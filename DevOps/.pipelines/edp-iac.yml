name: $(Build.BuildId).$(date:yyyyMMdd)

parameters:
  - name: environment
    displayName: "environment"
    type: string
    default: dev
    values:
     - dev
     - test
     - preprod
     - prod 

trigger: none
pr: none

variables:
- name: DevOpsDirectory
  value: DevOps/.pipelines/AzureResources
- group: 'VG-SHARED'
- group: 'VG-${{parameters.environment}}'

pool:
  vmImage: windows-latest

stages:
- stage: 'Deploy_Alerts'
  displayName: 'Deploy Alerts in ${{ parameters.environment }}'
  jobs:
  - deployment: 'Deploy_Alerts'
    displayName: 'Deploy Alerts in ${{ parameters.environment }}'
    environment: ${{ parameters.environment }}
    strategy:
        runOnce:
          deploy:
            steps:
              - checkout: self
              - task: AzureResourceManagerTemplateDeployment@3
                displayName: 'Deploy Azure Alerts in $(resourceGroupName)'
                inputs:
                  deploymentScope: 'Resource Group'
                  azureResourceManagerConnection: '$(azdoResourceConnection)'
                  action: 'Create Or Update Resource Group'
                  resourceGroupName: '$(resourceGroupName)'
                  location: $(location)
                  templateLocation: 'Linked artifact'
                  csmFile: '$(DevOpsDirectory)/alerts/templates/alerts.bicep'
                  overrideParameters: '-environment ${{parameters.environment}} -program $(program) -dataFactoryName $(dataFactoryName) -emailForAlerts $(emailForAlerts) -enableAlerts $(enableAlerts) -SQLAlertsActionGroup $(SQLAlertsActionGroup)'
                  deploymentMode: 'Incremental'
                  deploymentOutputs: 'armOutputs'
- stage: 'Deploy_Logic_App_Send_Email'
  displayName: 'Deploy LogicApp SendEmail in ${{ parameters.environment }}'
  jobs:
  - deployment: 'Deploy_Logic_App_Send_Email'
    displayName: 'Deploy LogicApp in ${{ parameters.environment }}'
    environment: ${{ parameters.environment }}
    strategy:
        runOnce:
          deploy:
            steps:
              - checkout: self
              - task: AzureResourceManagerTemplateDeployment@3
                displayName: 'Deploy Azure LogicApp in $(resourceGroupName)'
                inputs:
                  deploymentScope: 'Resource Group'
                  azureResourceManagerConnection: '$(azdoResourceConnection)'
                  action: 'Create Or Update Resource Group'
                  resourceGroupName: '$(resourceGroupName)'
                  location: $(location)
                  templateLocation: 'Linked artifact'
                  csmFile: '$(DevOpsDirectory)/logicapp/arm-logic-app-send-email.json'
                  overrideParameters: '-apiName "api-$(subscriptionName)-daf-${{parameters.environment}}-o365-01" -logicAppName "logic-$(subscriptionName)-daf-${{parameters.environment}}-sendemail-01"'
                  deploymentMode: 'Incremental'
                  deploymentOutputs: 'armOutputs'
- stage: 'Deploy_Unity_Catalog'
  displayName: 'Deploy Unity Catalog in ${{ parameters.environment }}'
  jobs:
  - deployment: 'unity_catalog_deploy'
    displayName: 'Deploy Unity Catalog in ${{ parameters.environment }}'
    environment: ${{ parameters.environment }}
    strategy:
        runOnce:
          deploy:
            steps:
              - checkout: self
              - task: AzureResourceManagerTemplateDeployment@3
                displayName: 'Deploy Unity Catalog in $(resourceGroupName)'
                inputs:
                  deploymentScope: 'Resource Group'
                  azureResourceManagerConnection: '$(azdoResourceConnection)'
                  action: 'Create Or Update Resource Group'
                  resourceGroupName: '$(resourceGroupName)'
                  location: '$(location)'
                  templateLocation: 'Linked artifact'
                  csmFile: '$(DevOpsDirectory)/UnityCatalog/daf-dbw-unity-storage-deploy.bicep'
                  csmParametersFile: '$(DevOpsDirectory)/UnityCatalog/daf-dbw-unity-storage-deploy-${{ parameters.environment }}.parameters.json'
                  deploymentMode: 'Incremental'
                  deploymentOutputs: 'armOutputs'
- stage: 'Deploy_Root_Unity_Catalog'
  displayName: 'Deploy Root Unity Catalog in ${{ parameters.environment }}'
  condition: and(succeeded(), eq('${{ parameters.environment }}', 'prod'))
  jobs:
  - deployment: 'root_unity_catalog_deploy'
    displayName: 'Deploy Root Unity Catalog in ${{ parameters.environment }}'
    environment: ${{ parameters.environment }}
    strategy:
        runOnce:
          deploy:
            steps:
              - checkout: self
              - task: AzureResourceManagerTemplateDeployment@3
                displayName: 'Deploy Root Unity Catalog in $(resourceGroupName)'
                inputs:
                  deploymentScope: 'Resource Group'
                  azureResourceManagerConnection: '$(azdoResourceConnection)'
                  action: 'Create Or Update Resource Group'
                  resourceGroupName: '$(resourceGroupName)'
                  location: '$(location)'
                  templateLocation: 'Linked artifact'
                  csmFile: '$(DevOpsDirectory)/UnityCatalog/daf-dbw-unity-storage-deploy.bicep'
                  csmParametersFile: '$(DevOpsDirectory)/UnityCatalog/daf-dbw-unity-storage-deploy-metastore-prod.parameters.json'
                  deploymentMode: 'Incremental'
                  deploymentOutputs: 'armOutputs'
- stage: 'deploy_databricks_workspace'
  variables:
    resourceName : 'Databricks Workspace'
  displayName: 'Deploy [${{ parameters.environment }}] ${{ variables.resourceName }}'
  jobs:
  - deployment: 'deploy_databricks_workspace'
    displayName: 'Deploy [${{ parameters.environment }}] ${{ variables.resourceName }}'
    environment: ${{ parameters.environment }}
    strategy:
        runOnce:
          deploy:
            steps:
              - checkout: self
              - task: AzureResourceManagerTemplateDeployment@3
                displayName: 'Deploy [$(databricks02Name)] ${{ variables.resourceName }} in [$(resourceGroupName)]'
                inputs:
                  deploymentScope: 'Resource Group'
                  azureResourceManagerConnection: '$(azdoResourceConnection)'
                  action: 'Create Or Update Resource Group'
                  resourceGroupName: '$(resourceGroupName)'
                  location: $(location)
                  templateLocation: 'Linked artifact'
                  csmFile: '$(DevOpsDirectory)/databricks/arm-databricks-workspace.json'
                  overrideParameters: '-workspaceName "$(databricks02Name)" -networkResourceGroup "$(networkResourceGroupName)" -vnetName "$(networkVnetName)" -subnetPrivateName "$(databricks02PrivateSubnet)" -subnetPublicName "$(databricks02PublicSubnet)" -subnetName "$(networkDefaultSubnet)" -privateDNSZoneId "$(databricksPrivateDnsZoneResourceId)"'
                  deploymentMode: 'Incremental'
                  deploymentOutputs: 'armOutputs'
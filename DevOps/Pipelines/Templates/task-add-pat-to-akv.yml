                    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
                  #                 | Rotate and Add Databricks PAT to Key Valut |                  #    
                  #                 ----------------------------------------------                  #
                  #     This is a task level template script used to rotate Databricks PAT          #
                  #     and add to Azure Key Vautl.                                                 #
                  #                                                                                 #
                    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

parameters:
- name: service_connection
  type: string 
- name: resource_group
  type: string
- name: databricks_workspace_name
  type: string
steps:
  - task: AzureCLI@2
    displayName: 'Create Databricks PAT'
    # name: create_pat
    inputs:
      azureSubscription: ${{ parameters.service_connection }}
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        # Change these values
        RESOURCE_GROUP="${{ parameters.resource_group }}"
        DATABRICKS_WORKSPACE="${{ parameters.databricks_workspace_name }}"

        tenantId=$(az account show --query tenantId -o tsv)
        wsId=$(az resource show \
          --resource-type Microsoft.Databricks/workspaces \
          -g "$RESOURCE_GROUP" \
          -n "$DATABRICKS_WORKSPACE" \
          --query id -o tsv)

        # Get a token for the global Databricks application.
        # The resource name is fixed and never changes.
        token_response=$(az account get-access-token --resource 2ff814a6-3304-4ab8-85cb-cd0e6f879c1d)
        token=$(jq .accessToken -r <<< "$token_response")

        # Get a token for the Azure management API
        token_response=$(az account get-access-token --resource https://management.core.windows.net/)
        azToken=$(jq .accessToken -r <<< "$token_response")

        # Use both tokens in Databricks API call
        list_response=$(curl -sf https://$(LOCATION).azuredatabricks.net/api/2.0/token/list -X GET \
          -H "Authorization: Bearer $token" \
          -H "X-Databricks-Azure-SP-Management-Token:$azToken" \
          -H "X-Databricks-Azure-Workspace-Resource-Id:$wsId")
        echo "Number of PAT tokens available:"
        echo "$list_response"
        
        # Get number of tokens created for pipeline (should be 0 or 1)
        # We need to check that the token has been created by checking comment
        # and if it has been expired.
        CURRENTDATE="$(date +'%Y/%m/%d')"
        CURRENTDATEEPOCH="$(date +'%s000')"
        num_tokens=$(jq 'if (. | length) == 0 then 0 else ([.token_infos[] | .expiry_time |= (. / 1000 | strftime("%Y-%m-%d")) | select(.expiry_time > "$CURRENTDATE" and .comment == "Azure DevOps Token")] | length) end' -r --arg CURRENTDATE "$CURRENTDATE" <<< "$list_response")
        echo "Number of PAT tokens created for Azure DevOps:"
        echo "$num_tokens"

        if [ $num_tokens -gt 0 ]
        then
          echo "PAT token already created. Rolling PAT token"
          jq -r '.token_infos[] | select(.expiry_time > $CURRENTDATEEPOCH and .comment == "Azure DevOps Token") | .token_id' --argjson CURRENTDATEEPOCH "$CURRENTDATEEPOCH"  <<< "$list_response"  | while read token_id
          do
            echo "Deleting PAT token $token_id"
            api_response=$(curl -sf https://$(LOCATION).azuredatabricks.net/api/2.0/token/delete \
              -H "Authorization: Bearer $token" \
              -H "X-Databricks-Azure-SP-Management-Token:$azToken" \
              -H "X-Databricks-Azure-Workspace-Resource-Id:$wsId" \
              -d '{ "token_id": "'$token_id'" }')
            echo '{ "token_id": "'$token_id'" }'
            echo "$api_response"
          done
          echo "Generating new PAT"
          # You can also generate a PAT token. Note the quota limit of 600 tokens.
          api_response=$(curl -sf https://$(LOCATION).azuredatabricks.net/api/2.0/token/create \
            -H "Authorization: Bearer $token" \
            -H "X-Databricks-Azure-SP-Management-Token:$azToken" \
            -H "X-Databricks-Azure-Workspace-Resource-Id:$wsId" \
            -d '{ "lifetime_seconds": 31557600, "comment": "Azure DevOps Token" }')
          pat_token=$(jq .token_value -r <<< "$api_response")

          echo "##vso[task.setvariable variable=DATABRICKS_PAT_TOKEN;isOutput=true]$pat_token"
          echo "##vso[task.setvariable variable=ADD_TO_KV;isOutput=true]Yes"
        else
          # You can also generate a PAT token. Note the quota limit of 600 tokens.
          api_response=$(curl -sf https://$(LOCATION).azuredatabricks.net/api/2.0/token/create \
            -H "Authorization: Bearer $token" \
            -H "X-Databricks-Azure-SP-Management-Token:$azToken" \
            -H "X-Databricks-Azure-Workspace-Resource-Id:$wsId" \
            -d '{ "lifetime_seconds": 31557600, "comment": "Azure DevOps Token" }')
          pat_token=$(jq .token_value -r <<< "$api_response")

          echo "##vso[task.setvariable variable=DATABRICKS_PAT_TOKEN;isOutput=true]$pat_token"
          echo "##vso[task.setvariable variable=ADD_TO_KV;isOutput=true]Yes"
        fi

  - task: AzureCLI@2
    displayName: 'Add PAT to Key Vault'
    # name: add_pat_to_keyvault
    condition: eq(variables['create_pat.ADD_TO_KV'], 'Yes')
    inputs:
      azureSubscription: ${{ parameters.service_connection }}
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        az keyvault set-policy --name "$(AZUREKEYVAULTNAME)" --secret-permissions set delete list get --object-id "$(SPOBJECTID)"
        az keyvault secret set --name databricks-token --vault-name "$(AZUREKEYVAULTNAME)" --value "$(create_pat.DATABRICKS_PAT_TOKEN)"
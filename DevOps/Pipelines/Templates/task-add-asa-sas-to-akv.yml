parameters:
- name: service_connection # name of the parameter; required
  type: string # data type of the parameter; required
- name: resource_group
  type: string
- name: src_resource_name 
  type: string

steps:
- task: AzureCLI@2
    displayName: 'Set SAS tokens in AKV for BLOB Storage'
    name: SetSasTokensBlobStorage
    inputs:
      azureSubscription: ${{ parameters.AzDoServiceConnection }}
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        list_response=$(az resource list )
        jq -r '.token_infos[] | select(.expiry_time > $CURRENTDATEEPOCH and .comment == "Azure DevOps Token") | .token_id' --argjson CURRENTDATEEPOCH "$CURRENTDATEEPOCH"  <<< "$list_response"  | while read token_id
          do
            echo "Deleting PAT token $token_id"
            api_response=$(curl -sf https://$(LOCATION).azuredatabricks.net/api/2.0/token/delete \
              -H "Authorization: Bearer $token" \
              -H "X-Databricks-Azure-SP-Management-Token:$azToken" \
              -H "X-Databricks-Azure-Workspace-Resource-Id:$wsId" \
              -d '{ "token_id": "'$token_id'" }')
            echo '{ "token_id": "'$token_id'" }'
            echo "$api_response"
          done

        $ErrorActionPreference = "Stop"

        Write-Host '$(armOutputs)'
        $json = '$(armOutputs)' | convertfrom-json

        az keyvault set-policy --name "$(AZUREKEYVAULTNAME)" --secret-permissions set list get --object-id "$(SPOBJECTID)"
        Write-Host "Policy set"

        $json.PSObject.Properties.Value.Value | ForEach-Object {
          $value = $_.name
          Write-Host $value
          
          $date_year=(Get-Date).AddYears(1).ToString("yyyy-MM-ddTH:mmZ")
          $sas_token=az storage account generate-sas --account-name $value --permissions racwdl --services b --resource-types sco --expiry $date_year --output tsv
          Write-Host "sas token genereated"
          az keyvault secret set --name (-join($value, "-sa-sastoken")) --vault-name "$(AZUREKEYVAULTNAME)" --value "$sas_token"
          Write-Host "Secret set"
        }
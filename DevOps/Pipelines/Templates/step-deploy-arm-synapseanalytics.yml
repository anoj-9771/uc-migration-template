parameters:
    - name: service_connection # name of the parameter; required
      type: string # data type of the parameter; required
    - name: resource_group
      type: string
    - name: synapseworkspacename 
      type: string
    - name: defaultDataLakeStorageAccountName
      type: string
    - name: defaultDataLakeStorageFilesystemName
      type: string
    - name: synapsesqlPoolName
      type: string
    
#Deploy Synapse Workspace (Synapse Analytics)
steps:
  - task: AzureCLI@2
    displayName: 'Check Workspace for Role Assigment'
    inputs:
      azureSubscription: ${{ parameters.service_connection }}
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        src_resource_id=$(az resource list --name ${{ parameters.src_resource_name }} --resource-group ${{ parameters.resource_group }} --output tsv --query "[].id")
        echo "##vso[task.setvariable variable=src_resource_id]$src_resource_id"
        echo "Name: ${{ parameters.src_resource_name }}, Id: $src_resource_id"
        log_resource_id=$(az resource list --name ${{ parameters.log_analytics_name }} --resource-group ${{ parameters.resource_group }} --output tsv --query "[].id")
        echo "##vso[task.setvariable variable=log_resource_id]$log_resource_id"
        echo "Name: ${{ parameters.log_analytics_name }}, Id: $log_resource_id"

        # diagnostic_check=$(az monitor diagnostic-settings show --resource $src_resource_id --name ${{ parameters.src_resource_name }}-ala)
        echo "az monitor diagnostic-settings create --name ${{ replace(parameters.src_resource_name,'/','') }}-ala --resource $src_resource_id --logs '${{ parameters.logs }}' --metrics '${{ parameters.metrics }}' --storage-account $log_resource_id"
        if [ ! -z "$logs" ] && [ -z "$metrics" ]
          then
            az monitor diagnostic-settings create \
            --name "${{ replace(lower(parameters.src_resource_name),'/','') }}-ala" \
            --resource "$src_resource_id" \
            --logs '${{ parameters.logs }}' \
            --workspace "$log_resource_id"
        elif [ ! -z "$metrics" ] && [ -z "$logs" ] 
          then 
            az monitor diagnostic-settings create \
            --name "${{ replace(lower(parameters.src_resource_name),'/','') }}-ala" \
            --resource "$src_resource_id" \
            --metrics '${{ parameters.metrics }}' \
            --workspace "$log_resource_id"
        else
          az monitor diagnostic-settings create \
          --name "${{ replace(lower(parameters.src_resource_name),'/','') }}-ala" \
          --resource "$src_resource_id" \
          --logs '${{ parameters.logs }}' \
          --metrics '${{ parameters.metrics }}' \
          --workspace "$log_resource_id"
        fi
  
  - task: AzureResourceGroupDeployment@2
    inputs:
     azureSubscription: ${{ parameters.service_connection }}
     action: 'Create Or Update Resource Group'
     resourceGroupName: ${{ parameters.resource_group }}
     location: $(LOCATION)
     templateLocation: 'Linked artifact'
     csmFile: '$(Pipeline.Workspace)/arm_templates/arm-synapseanalytics.json'
     overrideParameters: |
      -location $(LOCATION) -synapseworkspacename ${{ parameters.synapseworkspacename }} -defaultDataLakeStorageAccountName ${{ parameters.defaultDataLakeStorageAccountName }} -defaultDataLakeStorageFilesystemName ${{ parameters.defaultDataLakeStorageFilesystemName }} -setWorkspaceIdentityRbacOnStorageAccount ${{ parameters.setWorkspaceIdentityRbacOnStorageAccount }}
     deploymentMode: 'Incremental'
     deploymentOutputs: 'armOutputs'
    displayName: 'Deploy Synapse Analytics Workspace' 
  
# #Deploy Synapse analytics workspace SQL Pools
  - task: AzureResourceGroupDeployment@2
    inputs:
     azureSubscription: ${{ parameters.service_connection }}
     action: 'Create Or Update Resource Group'
     resourceGroupName: ${{ parameters.resource_group }}
     location: $(LOCATION)
     templateLocation: 'Linked artifact'
     csmFile: '$(Pipeline.Workspace)/arm_templates/arm-synapseanalytics-sqlpools.json'
     overrideParameters: |
      -location $(LOCATION) -synapseworkspacename ${{ parameters.synapseworkspacename }} -synapsesqlPoolName ${{ parameters.synapsesqlPoolName }}
     deploymentMode: 'Incremental'
     deploymentOutputs: 'armOutputs'
    displayName: 'Deploy Synapse Analytics Workspace SQL pools' 
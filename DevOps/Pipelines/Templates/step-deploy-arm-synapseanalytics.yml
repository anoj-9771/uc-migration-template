parameters:
    - name: service_connection # name of the parameter; required
      type: string # data type of the parameter; required
    - name: resource_group
      type: string
    - name: synapseworkspacename 
      type: string
    - name: defaultDataLakeStorageAccountName
      type: string
    - name: defaultDataLakeStorageFilesystemName
      type: string
    - name: synapsesqlPoolName
      type: string
    
#Deploy Synapse Workspace
steps:
  - task: AzureResourceGroupDeployment@2
    inputs:
     azureSubscription: ${{ parameters.service_connection }}
     action: 'Create Or Update Resource Group'
     resourceGroupName: ${{ parameters.resource_group }}
     location: $(LOCATION)
     templateLocation: 'Linked artifact'
     csmFile: '$(Pipeline.Workspace)/arm_templates/arm-synapseanalytics.json'
     overrideParameters: |
      -location $(LOCATION) -synapseworkspacename ${{ parameters.synapseworkspacename }} -defaultDataLakeStorageAccountName ${{ parameters.defaultDataLakeStorageAccountName }} -defaultDataLakeStorageFilesystemName ${{ parameters.defaultDataLakeStorageFilesystemName }}
     deploymentMode: 'Incremental'
     deploymentOutputs: 'armOutputs'
    displayName: 'Deploy Synapse Analytics Workspace' 

# #Deploy Synapse analytics workspace SQL Pools
  - task: AzureResourceGroupDeployment@2
    inputs:
     azureSubscription: ${{ parameters.service_connection }}
     action: 'Create Or Update Resource Group'
     resourceGroupName: ${{ parameters.resource_group }}
     location: $(LOCATION)
     templateLocation: 'Linked artifact'
     csmFile: '$(Pipeline.Workspace)/arm_templates/arm-synapseanalytics-sqlpools.json'
     overrideParameters: |
      -location $(LOCATION) -synapseworkspacename ${{ parameters.synapseworkspacename }} -synapsesqlPoolName ${{ parameters.synapsesqlPoolName }}
     deploymentMode: 'Incremental'
     deploymentOutputs: 'armOutputs'
    displayName: 'Deploy Synapse Analytics Workspace SQL pools' 


#-----------------------------------------------------------> Add MIs for synapse
  # # Add Data Factory MI to Key Vault Access Policies
  # - template: task-add-mi-to-akv-access-policy.yml
  #   parameters:
  #     service_connection: ${{ parameters.AzDoServiceConnection }}
  #     resource_group: ${{ parameters.resource_group }}
  #     src_resource_name: $(DATAFACTORYNAME)
  #     key_vault_name: $(AZUREKEYVAULTNAME)
  #     secret_permissions: 'list get'

  # # Add Data Factory MI to SQLServer Rbac
  # - template: task-add-mi-to-resource-rbac.yml
  #   parameters:
  #     service_connection: ${{ parameters.AzDoServiceConnection }}
  #     resource_group: ${{ parameters.resource_group }}
  #     src_resource_name: $(DATAFACTORYNAME)
  #     trg_resource_name: $(AZURESQLSERVERNAME)
  #     role: 'Contributor'
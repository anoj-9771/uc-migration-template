{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",

  "parameters": {    
    "tenantId": {
      "type": "string",
      "defaultValue": "[subscription().tenantId]",
      "metadata": {
        "description": "Specifies the Azure Active Directory tenant ID that should be used for authenticating requests to the key vault. Get it by using Get-AzSubscription cmdlet."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Specifies the Azure location where the key vault should be created."
      }
    },
    "resourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Specifies the Azure location where the key vault should be created."
      }
    },
    


    "prefix": {
      "type": "string",
      "metadata": {
        "description": "The prefix of naming convention"
      }
    },
    "postfix": {
      "type": "string",
      "metadata": {
        "description": "The postfix of naming convention"
      }
    },
    "environment": {
      "type": "string",
      "metadata": {
        "description": "The name of the environment to deploy into"
      }
    },


    "AzureSqlServerUn": {
      "type": "string",
      "metadata": {
        "description": "SQL Server User Name"
      }
    },
    "AzureSqlServerPw": {
      "type": "string",
      "metadata": {
        "description": "SQL Server Password"
      }
    },


    "storageAccountType": {
      "type": "string",
      "defaultValue": "Standard_GSR",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_ZRS",
        "Premium_LRS"
      ],
      "metadata": {
        "description": "Storage Account type"
      }
    },

    
    "databricksPricingTier": {
      "type": "string",
      "defaultValue": "premium",
      "allowedValues": [
        "standard",
        "premium"
      ],
      "metadata": {
        "description": "The pricing tier of workspace."
      }
    },
    "publicSubnetName": {
      "type": "string",
      "defaultValue": "public-subnet",
      "metadata": {
        "description": "The name of the public subnet in the custom VNet."
      }
    },
    "vnetId": {
      "type": "string",
      "metadata": {
        "description": "Vnet ResourceId"
      }
    },
    "privateSubnetName": {
      "type": "string",
      "defaultValue": "private-subnet",
      "metadata": {
        "description": "The name of the private subnet in the custom VNet."
      }
    },
    

    "keysPermissions": {
      "type": "array",
      "defaultValue": [
        "all"
      ],
      "metadata": {
        "description": "Specifies the permissions to keys in the vault. Valid values are: all, encrypt, decrypt, wrapKey, unwrapKey, sign, verify, get, list, create, update, import, delete, backup, restore, recover, and purge."
      }
    },
    "secretsPermissions": {
      "type": "array",
      "defaultValue": [
        "all"
      ],
      "metadata": {
        "description": "Specifies the permissions to secrets in the vault. Valid values are: all, get, list, set, delete, backup, restore, recover, and purge."
      }
    },
    "spObjectId": {
      "type": "string",
      "metadata": {
        "description": "Specifies the object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies. Get it by using Get-AzADUser or Get-AzADServicePrincipal cmdlets."
      }
    },

    
    "keyVaultSkuName": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Standard",
        "Premium"
      ],
      "metadata": {
        "description": "Specifies the SKU for the key vault"
      }
    },
    "enabledForDeployment": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Specifies whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault."
      }
    },
    "enabledForDiskEncryption": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Specifies whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys."
      }
    },
    "enabledForTemplateDeployment": {
      "type": "bool",
      "defaultValue": true,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Specifies whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
      }
    }
  },

  "variables": {
    "AzureSqlServerName": "[concat(parameters('prefix'), '-asql-', parameters('environment'))]",
    "databaseName":	"SQLDB",
    "controlDbName":"ControlDB",
    "rawNameStorageAccount":"[replace(concat(parameters('prefix'), 'raw', parameters('environment')),'-','')]",
    "stageNameStorageAccount":"[replace(concat(parameters('prefix'), 'stage', parameters('environment')),'-','')]",
    "dataFactoryName":"[concat(parameters('prefix'), '-datafactory-', parameters('environment'))]",
    "SHIRName":"[concat(parameters('prefix'), '-shir-', parameters('environment'))]",
    "workspaceName":"[concat(parameters('prefix'), '-databricks-', parameters('environment'))]",
    "keyVaultName":"[replace(concat(parameters('prefix'), 'kv', parameters('environment')),'-','')]",

    "databaseCollation": "SQL_Latin1_General_CP1_CI_AS",
    "databaseEdition": "Standard",
    "databaseRequestedServiceObjectiveName": "S3",    

    "managedResourceGroupId": "[concat(subscription().id, '/resourceGroups/', variables('managedResourceGroupName'))]",
    "managedResourceGroupName": "[concat('databricks-rg-', variables('workspaceName'), '-', uniqueString(variables('workspaceName'), resourceGroup().id))]"
  },

  "resources": [
    {
      "name": "[variables('AzureSqlServerName')]",
      "type": "Microsoft.Sql/servers",
      "apiVersion": "2015-05-01-preview",
      "location": "[parameters('location')]",
      "tags": {},
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "administratorLogin": "[parameters('AzureSqlServerUn')]",
        "administratorLoginPassword": "[parameters('AzureSqlServerPw')]"
      },
      "resources": [
      {
        "name": "AllowAllWindowsAzureIps",
        "type": "firewallrules",
        "location": "[parameters('location')]",
        "apiVersion": "2014-04-01-preview",
        "dependsOn": [
          "[resourceId('Microsoft.Sql/servers', variables('AzureSqlServerName'))]"
          ],
        "properties": {
          "startIpAddress": "0.0.0.0",
          "endIpAddress": "0.0.0.0"
        }
      },
      {
        "name": "[variables('databaseName')]",
        "type": "databases",
        "location": "[parameters('location')]",
        "apiVersion": "2014-04-01-preview",
        "dependsOn": [
          "[resourceId('Microsoft.Sql/servers', variables('AzureSqlServerName'))]"
        ],
        "tags": {
          "displayName": "database"
        },
        "properties": {
          "collation": "[variables('databaseCollation')]",
          "edition": "[variables('databaseEdition')]",
          "maxSizeBytes": "268435456000",
          "requestedServiceObjectiveName": "[variables('databaseRequestedServiceObjectiveName')]"
        }
      },
      {
        "name": "[variables('controlDbName')]",
        "type": "databases",
        "location": "[parameters('location')]",
        "apiVersion": "2014-04-01-preview",
        "dependsOn": [
          "[resourceId('Microsoft.Sql/servers', variables('AzureSqlServerName'))]"
        ],
        "tags": {
          "displayName": "control Database"
        },
        "properties": {
          "collation": "[variables('databaseCollation')]",
          "edition": "[variables('databaseEdition')]",
          "maxSizeBytes": "268435456000",
          "requestedServiceObjectiveName": "[variables('databaseRequestedServiceObjectiveName')]"
        }
      }
    ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('rawNameStorageAccount')]",
      "apiVersion": "2018-07-01",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "tags": {
        "displayName": "Azure Blob Storage Account"
      },
      "properties": {
        "accessTier": "Hot"
      },
      "resources": [
        {
          "name": "default/raw",
          "type": "blobServices/containers",
          "apiVersion": "2018-07-01",
          "dependsOn": [
              "[variables('rawNameStorageAccount')]"
          ]
        }
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('stageNameStorageAccount')]",
      "apiVersion": "2018-07-01",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "tags": {
        "displayName": "Azure Blob Storage Account"
      },
      "properties": {
        "accessTier": "Hot"
      },
      "resources": [
        {
          "name": "default/stage",
          "type": "blobServices/containers",
          "apiVersion": "2018-07-01",
          "dependsOn": [
              "[variables('stageNameStorageAccount')]"
          ]
        }
      ]
    },
    {
      "name": "[variables('dataFactoryName')]",
      "apiVersion": "2018-06-01",
      "type": "Microsoft.DataFactory/factories",
      "location": "[parameters('location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
      },
      "resources": [
        {
          "type": "integrationruntimes",
          "name": "[variables('SHIRName')]",
          "dependsOn": [ "[variables('dataFactoryName')]" ],
          "apiVersion": "2017-09-01-preview",
          "properties": {
            "type": "SelfHosted"
          }
        }
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "name": "[variables('keyVaultName')]",
      "location": "[parameters('location')]",
      "apiVersion": "2018-02-14",
      "tags": {
        "displayName": "KeyVault"
      },
      "properties": {
        "enabledForDeployment": "[parameters('enabledForDeployment')]",
        "enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
        "enabledForDiskEncryption": "[parameters('enabledForDiskEncryption')]",
        "tenantId": "[parameters('tenantId')]",
        "accessPolicies": [
          {
            "objectId": "[parameters('spObjectId')]",
            "tenantId": "[parameters('tenantId')]",
            "permissions": {
              "keys": "[parameters('keysPermissions')]",
              "secrets": "[parameters('secretsPermissions')]"      
            }
          },
          {
              "tenantId": "[reference(concat('Microsoft.DataFactory/factories/', variables('dataFactoryName')), '2018-06-01', 'Full').identity.tenantId]",
              "objectId": "[reference(concat('Microsoft.DataFactory/factories/', variables('dataFactoryName')), '2018-06-01', 'Full').identity.principalId]",
              "permissions": {
                  "keys": [
                      "Get",
                      "List",
                      "Update",
                      "Create",
                      "Import",
                      "Delete",
                      "Recover",
                      "Backup",
                      "Restore"
                  ],
                  "secrets": [
                      "Get",
                      "List",
                      "Set",
                      "Delete",
                      "Recover",
                      "Backup",
                      "Restore"
                  ],
                  "certificates": [
                      "Get",
                      "List",
                      "Update",
                      "Create",
                      "Import",
                      "Delete",
                      "Recover",
                      "Backup",
                      "Restore",
                      "ManageContacts",
                      "ManageIssuers",
                      "GetIssuers",
                      "ListIssuers",
                      "SetIssuers",
                      "DeleteIssuers"
                  ]
              }
          }
        ],
        "sku": {
          "name": "[parameters('keyVaultSkuName')]",
          "family": "A"
        },
        "networkAcls": {
          "value": {
            "defaultAction": "Allow",
            "bypass": "AzureServices"
          }
        }
      },
      "dependsOn": [
        "[concat('Microsoft.DataFactory/factories/', variables('dataFactoryName'))]"
      ]
    },
	  {
      "apiVersion": "2018-04-01",
      "type": "Microsoft.Databricks/workspaces",
      "location": "[parameters('location')]",
      "name": "[variables('workspaceName')]",
      "dependsOn": [
      ],
      "sku": {
        "name": "[parameters('databricksPricingTier')]"
      },
      "properties": {
        "ManagedResourceGroupId": "[variables('managedResourceGroupId')]",
        "parameters": {
          "customVirtualNetworkId": {
            "value": "[parameters('vnetId')]"
          },
          "customPublicSubnetName": {
            "value": "[parameters('publicSubnetName')]"
          },
          "customPrivateSubnetName": {
            "value": "[parameters('privateSubnetName')]"
          }
        }
      }
    }
  ],
  "outputs": {}
}

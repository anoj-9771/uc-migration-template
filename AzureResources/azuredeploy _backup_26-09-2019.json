{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",

  "parameters": {    
    "tenantId": {
      "type": "string",
      "defaultValue": "[subscription().tenantId]",
      "metadata": {
        "description": "Specifies the Azure Active Directory tenant ID that should be used for authenticating requests to the key vault. Get it by using Get-AzSubscription cmdlet."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Specifies the Azure location where the key vault should be created."
      }
    },
    "directory": {
      "type": "string",
      "metadata": {
        "description": "the subscription directory e.g. <someName>.onmicrosoft.com"
      }
    },
    "resourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Specifies the Azure location where the key vault should be created."
      }
    },
    


    "prefix": {
      "type": "string",
      "metadata": {
        "description": "The prefix of naming convention"
      }
    },
    "environment": {
      "type": "string",
      "metadata": {
        "description": "The name of the environment to deploy into"
      }
    },


    "AzureSqlServerUn": {
      "type": "string",
      "metadata": {
        "description": "SQL Server User Name"
      }
    },
    "AzureSqlServerPw": {
      "type": "string",
      "metadata": {
        "description": "SQL Server Password"
      }
    },


    "storageAccountType": {
      "type": "string",
      "defaultValue": "Standard_GSR",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_ZRS",
        "Premium_LRS"
      ],
      "metadata": {
        "description": "Storage Account type"
      }
    },


    "repositoryAccountName": {
      "type": "string",
      "metadata": {
        "description": "The name of the repository account" 
      }
    },
    "repoitoryProjectName": {
      "type": "string",
      "metadata": {
        "description": "The name of the repository account" 
      }
    },
    "repositoryTenantId": {
      "type": "string",
      "metadata": {
        "description": "The name of the repository account" 
      }
    },
    "repositoryName": {
      "type": "string",
      "metadata": {
        "description": "The name of the repository account" 
      }
    },
    "repositoryCollaborationBranch": {
      "type": "string",
      "metadata": {
        "description": "The name of the repository account" 
      }
    },
    "repositoryRootFolder": {
      "type": "string",
      "metadata": {
        "description": "The name of the repository account" 
      }
    },
    "repositoryLastCommitId": {
      "type": "string",
      "metadata": {
        "description": "The name of the repository account" 
      }
    },
    "repositoryType": {
      "type": "string",
      "metadata": {
        "description": "The name of the repository account" 
      }
    },

    
    "databricksPricingTier": {
      "type": "string",
      "defaultValue": "premium",
      "allowedValues": [
        "standard",
        "premium"
      ],
      "metadata": {
        "description": "The pricing tier of workspace."
      }
    },
    "customPublicSubnetName": {
      "type": "string",
      "defaultValue": "public-subnet",
      "metadata": {
        "description": "The name of the public subnet in the custom VNet."
      }
    },
    "customPrivateSubnetName": {
      "type": "string",
      "defaultValue": "private-subnet",
      "metadata": {
        "description": "The name of the private subnet in the custom VNet."
      }
    },
    

    "keysPermissions": {
      "type": "array",
      "defaultValue": [
        "all"
      ],
      "metadata": {
        "description": "Specifies the permissions to keys in the vault. Valid values are: all, encrypt, decrypt, wrapKey, unwrapKey, sign, verify, get, list, create, update, import, delete, backup, restore, recover, and purge."
      }
    },
    "secretsPermissions": {
      "type": "array",
      "defaultValue": [
        "all"
      ],
      "metadata": {
        "description": "Specifies the permissions to secrets in the vault. Valid values are: all, get, list, set, delete, backup, restore, recover, and purge."
      }
    },
    "spObjectId": {
      "type": "string",
      "metadata": {
        "description": "Specifies the object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies. Get it by using Get-AzADUser or Get-AzADServicePrincipal cmdlets."
      }
    },


    "vnetName":{
      "type": "string",
      "metadata": {
        "desctiption": "The name of the virtual network used for Databricks injection."
      }
    },
    "vnetResourceGroupName":{
      "type": "string",
      "metadata": {
        "desctiption": "The name of the virtual network Resource Group for Databricks injection."
      }
    },
    "controPanelIp": {
      "type": "string",
      "metadata": {
        "description": "The name of the network security group to create."
      }
    },
    "webappIp": {
      "type": "string",
      "metadata": {
        "description": "The name of the network security group to create."
      }
    },

    
    "keyVaultSkuName": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Standard",
        "Premium"
      ],
      "metadata": {
        "description": "Specifies the SKU for the key vault"
      }
    },
    "secretsObject": {
      "type": "secureObject",
      "defaultValue": "{}",
      "metadata": {
        "description": "Specifies all secrets {\"secretName\":\"\",\"secretValue\":\"\"} wrapped in a secure object."
      }
    },
    "enabledForDeployment": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Specifies whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault."
      }
    },
    "enabledForDiskEncryption": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Specifies whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys."
      }
    },
    "enabledForTemplateDeployment": {
      "type": "bool",
      "defaultValue": true,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Specifies whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
      }
    },

    "connectionName":{
      "type": "string",
      "defaultValue": "AzureRunAsConnection"
    }
  },

  "variables": {
    "AzureSqlServerName": "[concat(parameters('prefix'), '-asql-', parameters('environment'))]",
    "databaseName":	"SQLDB",
    "controlDbName":"ControlDB",
    "rawNameStorageAccount":"[replace(concat(parameters('prefix'), 'raw', parameters('environment')),'-','')]",
    "stageNameStorageAccount":"[replace(concat(parameters('prefix'), 'stage', parameters('environment')),'-','')]",
    "dataFactoryName":"[concat(parameters('prefix'), '-datafactory-', parameters('environment'))]",
    "SHIRName":"[concat(parameters('prefix'), '-shir-', parameters('environment'))]",
    "workspaceName":"[concat(parameters('prefix'), '-databricks-', parameters('environment'))]",
    "keyVaultName":"[replace(concat(parameters('prefix'), 'kv', parameters('environment')),'-','')]",
    "automationAccounts": "[concat(parameters('prefix'), '-automation-', parameters('environment'))]",

    "inputDatasetName": "InputBlobDataset",
    "outputDatasetName": "OutputSqlDataset",
    "databaseCollation": "SQL_Latin1_General_CP1_CI_AS",
    "databaseEdition": "Standard",
    "databaseRequestedServiceObjectiveName": "S3",    
    "managedResourceGroupId": "[concat(subscription().id, '/resourceGroups/', variables('managedResourceGroupName'))]",
    "managedResourceGroupName": "[concat('databricks-rg-', variables('workspaceName'), '-', uniqueString(variables('workspaceName'), resourceGroup().id))]", 
    "virtualNetworkExternalId": "[concat(subscription().id, '/resourceGroups/', parameters('vnetResourceGroupName'), '/providers/Microsoft.Network/virtualNetworks/', parameters('vnetName'))]",   
    "uniqueString": "[uniqueString(subscription().id, resourceGroup().id)]"
  },

  "resources": [
    {
      "name": "[variables('AzureSqlServerName')]",
      "type": "Microsoft.Sql/servers",
      "apiVersion": "2015-05-01-preview",
      "location": "[parameters('location')]",
      "tags": {},
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "administratorLogin": "[parameters('AzureSqlServerUn')]",
        "administratorLoginPassword": "[parameters('AzureSqlServerPw')]"
      },
      "resources": [
        {
          "name": "AllowAllWindowsAzureIps",
          "type": "firewallrules",
          "location": "[parameters('location')]",
          "apiVersion": "2014-04-01-preview",
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', variables('AzureSqlServerName'))]"
          ],
          "properties": {
            "startIpAddress": "0.0.0.0",
            "endIpAddress": "0.0.0.0"
          }
        },
        {
          "name": "[variables('databaseName')]",
          "type": "databases",
          "location": "[parameters('location')]",
          "apiVersion": "2014-04-01-preview",
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', variables('AzureSqlServerName'))]"
          ],
          "tags": {
            "displayName": "database"
          },
          "properties": {
            "collation": "[variables('databaseCollation')]",
            "edition": "[variables('databaseEdition')]",
            "maxSizeBytes": "268435456000",
            "requestedServiceObjectiveName": "[variables('databaseRequestedServiceObjectiveName')]"
          }
        },
        {
          "name": "[variables('controlDbName')]",
          "type": "databases",
          "location": "[parameters('location')]",
          "apiVersion": "2014-04-01-preview",
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', variables('AzureSqlServerName'))]"
          ],
          "tags": {
            "displayName": "control Database"
          },
          "properties": {
            "collation": "[variables('databaseCollation')]",
            "edition": "[variables('databaseEdition')]",
            "maxSizeBytes": "268435456000",
            "requestedServiceObjectiveName": "[variables('databaseRequestedServiceObjectiveName')]"
          }
        }
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('rawNameStorageAccount')]",
      "apiVersion": "2018-07-01",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "tags": {
        "displayName": "Azure Blob Storage Account"
      },
      "properties": {
        "accessTier": "Hot"
      },
      "resources": [
        {
          "name": "default/raw",
          "type": "blobServices/containers",
          "apiVersion": "2018-07-01",
          "dependsOn": [
              "[variables('rawNameStorageAccount')]"
          ]
        }
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('stageNameStorageAccount')]",
      "apiVersion": "2018-07-01",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "tags": {
        "displayName": "Azure Blob Storage Account"
      },
      "properties": {
        "accessTier": "Hot"
      },
      "resources": [
        {
          "name": "default/stage",
          "type": "blobServices/containers",
          "apiVersion": "2018-07-01",
          "dependsOn": [
              "[variables('stageNameStorageAccount')]"
          ]
        }
      ]
    },
    {
      "name": "[variables('dataFactoryName')]",
      "apiVersion": "2018-06-01",
      "type": "Microsoft.DataFactory/factories",
      "location": "[parameters('location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "repoConfiguration": {
          "accountName": "[parameters('repositoryAccountName')]",
          "projectName": "[parameters('repoitoryProjectName')]",
          "tenantId": "[parameters('repositoryTenantId')]",
          "repositoryName": "[parameters('repositoryName')]",
          "collaborationBranch": "[parameters('repositoryCollaborationBranch')]",
          "rootFolder": "[parameters('repositoryRootFolder')]",
          "lastCommitId": "[parameters('repositoryLastCommitId')]",
          "type": "[parameters('repositoryType')]"
        }
      },
      "dependsOn": [],
      "resources": [
        {
          "type": "integrationruntimes",
          "name": "[variables('SHIRName')]",
          "dependsOn": [ "[variables('dataFactoryName')]" ],
          "apiVersion": "2017-09-01-preview",
          "properties": {
            "type": "SelfHosted"
          }
        }
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "name": "[variables('keyVaultName')]",
      "location": "[parameters('location')]",
      "apiVersion": "2018-02-14",
      "tags": {
        "displayName": "KeyVault"
      },
      "properties": {
        "enabledForDeployment": "[parameters('enabledForDeployment')]",
        "enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
        "enabledForDiskEncryption": "[parameters('enabledForDiskEncryption')]",
        "tenantId": "[parameters('tenantId')]",
        "accessPolicies": [
          {
            "objectId": "[parameters('spObjectId')]",
            "tenantId": "[parameters('tenantId')]",
            "permissions": {
              "keys": "[parameters('keysPermissions')]",
              "secrets": "[parameters('secretsPermissions')]"      
            }
          },
          {
              "tenantId": "[reference(concat('Microsoft.DataFactory/factories/', variables('dataFactoryName')), '2018-06-01', 'Full').identity.tenantId]",
              "objectId": "[reference(concat('Microsoft.DataFactory/factories/', variables('dataFactoryName')), '2018-06-01', 'Full').identity.principalId]",
              "permissions": {
                  "keys": [
                      "Get",
                      "List",
                      "Update",
                      "Create",
                      "Import",
                      "Delete",
                      "Recover",
                      "Backup",
                      "Restore"
                  ],
                  "secrets": [
                      "Get",
                      "List",
                      "Set",
                      "Delete",
                      "Recover",
                      "Backup",
                      "Restore"
                  ],
                  "certificates": [
                      "Get",
                      "List",
                      "Update",
                      "Create",
                      "Import",
                      "Delete",
                      "Recover",
                      "Backup",
                      "Restore",
                      "ManageContacts",
                      "ManageIssuers",
                      "GetIssuers",
                      "ListIssuers",
                      "SetIssuers",
                      "DeleteIssuers"
                  ]
              }
          }
        ],
        "sku": {
          "name": "[parameters('keyVaultSkuName')]",
          "family": "A"
        },
        "networkAcls": {
          "value": {
            "defaultAction": "Allow",
            "bypass": "AzureServices"
          }
        }
      },
      "dependsOn": [
        "[concat('Microsoft.DataFactory/factories/', variables('dataFactoryName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(variables('keyVaultName'), '/', parameters('secretsObject').secrets[copyIndex()].secretName)]",
      "apiVersion": "2018-02-14",
      "dependsOn": [
        "[concat('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]"
      ],
      "copy": {
        "name": "secretsCopy",
        "count": "[length(parameters('secretsObject').secrets)]"
      },
      "properties": {
        "value": "[parameters('secretsObject').secrets[copyIndex()].secretValue]"
      }
    },
    {
      "type": "Microsoft.Databricks/workspaces",
      "name": "[variables('workspaceName')]",
      "location": "[parameters('location')]",
      "apiVersion": "2018-04-01",
      "sku": {
        "name": "[parameters('databricksPricingTier')]"
      },
      "properties": {
        "managedResourceGroupId": "[variables('managedResourceGroupId')]",
        "parameters": {
        }
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2019-04-01",
      "name": "[variables('managedResourceGroupName')]",
      "location": "[parameters('location')]",
      "properties": {
          "securityRules": [
              {
                  "name": "databricks-worker-to-worker",
                  "properties": {
                      "description": "Required for worker nodes communication within a cluster.",
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "destinationPortRange": "*",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 200,
                      "direction": "Inbound",
                      "sourcePortRanges": [],
                      "destinationPortRanges": [],
                      "sourceAddressPrefixes": [],
                      "destinationAddressPrefixes": []
                  }
              },
              {
                  "name": "databricks-control-plane-ssh",
                  "properties": {
                      "description": "Required for Databricks control plane management of worker nodes.",
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "destinationPortRange": "22",
                      "sourceAddressPrefix": "[parameters('controPanelIp')]",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 100,
                      "direction": "Inbound",
                      "sourcePortRanges": [],
                      "destinationPortRanges": [],
                      "sourceAddressPrefixes": [],
                      "destinationAddressPrefixes": []
                  }
              },
              {
                  "name": "databricks-control-plane-worker-proxy",
                  "properties": {
                      "description": "Required for Databricks control plane communication with worker nodes.",
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "destinationPortRange": "5557",
                      "sourceAddressPrefix": "[parameters('controPanelIp')]",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 110,
                      "direction": "Inbound",
                      "sourcePortRanges": [],
                      "destinationPortRanges": [],
                      "sourceAddressPrefixes": [],
                      "destinationAddressPrefixes": []
                  }
              },
              {
                  "name": "databricks-worker-to-webapp",
                  "properties": {
                      "description": "Required for workers communication with Databricks Webapp.",
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "destinationPortRange": "*",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "[parameters('webappIp')]",
                      "access": "Allow",
                      "priority": 100,
                      "direction": "Outbound",
                      "sourcePortRanges": [],
                      "destinationPortRanges": [],
                      "sourceAddressPrefixes": [],
                      "destinationAddressPrefixes": []
                  }
              },
              {
                  "name": "databricks-worker-to-sql",
                  "properties": {
                      "description": "Required for workers communication with Azure SQL services.",
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "destinationPortRange": "*",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "Sql",
                      "access": "Allow",
                      "priority": 110,
                      "direction": "Outbound",
                      "sourcePortRanges": [],
                      "destinationPortRanges": [],
                      "sourceAddressPrefixes": [],
                      "destinationAddressPrefixes": []
                  }
              },
              {
                  "name": "databricks-worker-to-storage",
                  "properties": {
                      "description": "Required for workers communication with Azure Storage services.",
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "destinationPortRange": "*",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "Storage",
                      "access": "Allow",
                      "priority": 120,
                      "direction": "Outbound",
                      "sourcePortRanges": [],
                      "destinationPortRanges": [],
                      "sourceAddressPrefixes": [],
                      "destinationAddressPrefixes": []
                  }
              },
              {
                  "name": "databricks-worker-to-worker-outbound",
                  "properties": {
                      "description": "Required for worker nodes communication within a cluster.",
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "destinationPortRange": "*",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "VirtualNetwork",
                      "access": "Allow",
                      "priority": 130,
                      "direction": "Outbound",
                      "sourcePortRanges": [],
                      "destinationPortRanges": [],
                      "sourceAddressPrefixes": [],
                      "destinationAddressPrefixes": []
                  }
              },
              {
                  "name": "databricks-worker-to-any",
                  "properties": {
                      "description": "Required for worker nodes communication with any destination.",
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "destinationPortRange": "*",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 140,
                      "direction": "Outbound",
                      "sourcePortRanges": [],
                      "destinationPortRanges": [],
                      "sourceAddressPrefixes": [],
                      "destinationAddressPrefixes": []
                  }
              }
          ]
        }
      },
      {
        "type": "Microsoft.Automation/automationAccounts",
        "apiVersion": "2015-10-31",
        "name": "[variables('automationAccounts')]",
        "location": "[parameters('location')]",
        "properties": {
          "sku": {
            "name": "free"
          }
        }
    },
    {
        "type": "Microsoft.Automation/automationAccounts/variables",
        "apiVersion": "2015-10-31",
        "name": "[concat(variables('automationAccounts'), '/DirectoryDomainName')]",
        "dependsOn": [
            "[resourceId('Microsoft.Automation/automationAccounts', variables('automationAccounts'))]"
        ],
        "properties": {
            "isEncrypted": false,
            "value": "[concat('\"',parameters('directory'),'\"')]"
        }
    },
    {
        "type": "Microsoft.Automation/automationAccounts/variables",
        "apiVersion": "2015-10-31",
        "name": "[concat(variables('automationAccounts'), '/RotateKeys-ClientId')]",
        "dependsOn": [
            "[resourceId('Microsoft.Automation/automationAccounts', variables('automationAccounts'))]"
        ],
        "properties": {
            "isEncrypted": false,
            "value": "[concat('\"',parameters('spObjectId'),'\"')]"
        }
    },
    {
        "type": "Microsoft.Automation/automationAccounts/variables",
        "apiVersion": "2015-10-31",
        "name": "[concat(variables('automationAccounts'), '/RotateKeys-ClientSecret')]",
        "dependsOn": [
            "[resourceId('Microsoft.Automation/automationAccounts', variables('automationAccounts'))]"
        ],
        "properties": {
            "isEncrypted": true
        }
    },
    {
        "type": "Microsoft.Automation/automationAccounts/variables",
        "apiVersion": "2015-10-31",
        "name": "[concat(variables('automationAccounts'), '/RotateKeys-StorageAccountKeyVaultMapping')]",
        "dependsOn": [
            "[resourceId('Microsoft.Automation/automationAccounts', variables('automationAccounts'))]"
        ],
        "properties": {
            "isEncrypted": false,
            "value": "[concat('\"{\\\"keyVault\\\":[{\\\"name\\\":\\\"',variables('keyVaultName'),'\\\",\\\"storageAcc\\\":[{\\\"name\\\":\\\"', variables('rawNameStorageAccount'),'\\\",\\\"container\\\":[{\\\"name\\\":\\\"raw\\\",\\\"permission\\\":\\\"rwdl\\\",\\\"secret\\\":\\\"rawZone-rwdl-SasToken\\\"}]},{\\\"name\\\":\\\"',  variables('stageNameStorageAccount'),'\\\",\\\"container\\\":[{\\\"name\\\":\\\"stage\\\",\\\"permission\\\":\\\"rwdl\\\",\\\"secret\\\":\\\"stageZone-rwdl-SasToken\\\"}]}]}]}\"')]"
        }
    },
    {
        "type": "Microsoft.Automation/automationAccounts/variables",
        "apiVersion": "2015-10-31",
        "name": "[concat(variables('automationAccounts'), '/SubscriptionId')]",
        "dependsOn": [
            "[resourceId('Microsoft.Automation/automationAccounts', variables('automationAccounts'))]"
        ],
        "properties": {
            "isEncrypted": false,
            "value": "[concat('\"',subscription().subscriptionId,'\"')]"
        }
    },
    {
        "type": "Microsoft.Automation/automationAccounts/variables",
        "apiVersion": "2015-10-31",
        "name": "[concat(variables('automationAccounts'), '/connectionName')]",
        "dependsOn": [
            "[resourceId('Microsoft.Automation/automationAccounts', variables('automationAccounts'))]"
        ],
        "properties": {
            "isEncrypted": false,
            "value": "[concat('\"',parameters('connectionName'),'\"')]"
        }
    },
    {
        "type": "Microsoft.Automation/automationAccounts/variables",
        "apiVersion": "2015-10-31",
        "name": "[concat(variables('automationAccounts'), '/automationAccountName')]",
        "dependsOn": [
            "[resourceId('Microsoft.Automation/automationAccounts', variables('automationAccounts'))]"
        ],
        "properties": {
            "isEncrypted": false,
            "value": "[concat('\"',variables('automationAccounts'),'\"')]"
        }
    },
    {
        "type": "Microsoft.Automation/automationAccounts/variables",
        "apiVersion": "2015-10-31",
        "name": "[concat(variables('automationAccounts'), '/resourceGroupName')]",
        "dependsOn": [
            "[resourceId('Microsoft.Automation/automationAccounts', variables('automationAccounts'))]"
        ],
        "properties": {
            "isEncrypted": false,
            "value": "[concat('\"',parameters('resourceGroupName'),'\"')]"
        }
    }
  ],
  "outputs": {}
}

{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "factoryName": {
            "type": "string",
            "metadata": "Data Factory name",
            "defaultValue": "ama-panel-adf-dp-dev-as-01"
        }
    },
    "variables": {
        "factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
    },
    "resources": [
        {
            "name": "[concat(parameters('factoryName'), '/04-DL-Load-Raw-to-Delta-Table')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "SP-Record-Manifest",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "If-ClusterType",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[CTL].[UpdateManifestDeltaRecords]",
                            "storedProcedureParameters": {
                                "BatchExecutionLogID": {
                                    "value": {
                                        "value": "@pipeline().parameters.BatchLogId",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "TaskExecutionLogID": {
                                    "value": {
                                        "value": "@pipeline().parameters.TaskExecutionLogId",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "RecordsDeltaTable": {
                                    "value": {
                                        "value": "@variables('ReturnValue')",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS-AzureSqlDatabase_Ctrldb",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "kvSecret": "AzureSqlDatabase-ControlDB"
                            }
                        }
                    },
                    {
                        "name": "If-ClusterType",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Set-ClusterType",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(variables('ClusterType'), 'interactive')",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Notebook-Delta-Table-Job",
                                    "type": "DatabricksNotebook",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "notebookPath": {
                                            "value": "@variables('NoteBookURL')",
                                            "type": "Expression"
                                        },
                                        "baseParameters": {
                                            "file_object": {
                                                "value": "@concat(pipeline().parameters.TargetBLOBFolder,pipeline().parameters.TargetBLOBName)",
                                                "type": "Expression"
                                            },
                                            "source_param": {
                                                "value": "@string(pipeline().parameters.TaskDetails)",
                                                "type": "Expression"
                                            }
                                        },
                                        "libraries": [
                                            {
                                                "maven": {
                                                    "coordinates": "com.microsoft.azure:azure-sqldb-spark:1.0.2"
                                                }
                                            }
                                        ]
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS-AzureDatabricks_JobCluster",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "kvSecret": {
                                                "value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
                                                "type": "Expression"
                                            },
                                            "DataBricksClusterType": {
                                                "value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[2]",
                                                "type": "Expression"
                                            },
                                            "DataBricksClusterVersion": {
                                                "value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[3]",
                                                "type": "Expression"
                                            },
                                            "DataBricksWorkerNodes": {
                                                "value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[4]",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "SET-ReturnValue-Job",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "Notebook-Delta-Table-Job",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "ReturnValue",
                                        "value": {
                                            "value": "@string(activity('Notebook-Delta-Table-Job').output.runOutput)",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "Notebook-Delta-Table-Interactive",
                                    "type": "DatabricksNotebook",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "notebookPath": {
                                            "value": "@variables('NoteBookURL')",
                                            "type": "Expression"
                                        },
                                        "baseParameters": {
                                            "file_object": {
                                                "value": "@concat(pipeline().parameters.TargetBLOBFolder,pipeline().parameters.TargetBLOBName)",
                                                "type": "Expression"
                                            },
                                            "source_param": {
                                                "value": "@string(pipeline().parameters.TaskDetails)",
                                                "type": "Expression"
                                            }
                                        },
                                        "libraries": [
                                            {
                                                "maven": {
                                                    "coordinates": "com.microsoft.azure:azure-sqldb-spark:1.0.2"
                                                }
                                            }
                                        ]
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS-AzureDatabricks_DefinedCluster",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "kvSecret": {
                                                "value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
                                                "type": "Expression"
                                            },
                                            "clusterId": {
                                                "value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[1]",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "SET-ReturnValue-Interactive",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "Notebook-Delta-Table-Interactive",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "ReturnValue",
                                        "value": {
                                            "value": "@string(activity('Notebook-Delta-Table-Interactive').output.runOutput)",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Set-ClusterType",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "ClusterType",
                            "value": {
                                "value": "@toLower(last(split(pipeline().parameters.TaskDetails.Processor,'|')))",
                                "type": "Expression"
                            }
                        }
                    }
                ],
                "parameters": {
                    "BatchLogId": {
                        "type": "int",
                        "defaultValue": 1
                    },
                    "TaskExecutionLogId": {
                        "type": "int",
                        "defaultValue": 1
                    },
                    "TaskDetails": {
                        "type": "object",
                        "defaultValue": {
                            "SourceType": "SQL Server",
                            "SourceServer": "onprem-wwidw",
                            "SourceGroup": "WWI",
                            "SourceName": "WWI_Dimension_Supplier",
                            "SourceLocation": "Dimension.Supplier",
                            "AdditionalProperty": "",
                            "Processor": "databricks-token|0607-060317-cases301|Standard_DS3_v2|8.1.x-scala2.12|2:8|interactive",
                            "IsAuditTable": false,
                            "SoftDeleteSource": "",
                            "ProjectName": "WWIDW",
                            "ProjectId": 1,
                            "TargetType": "BLOB Storage (json)",
                            "TargetName": "WWI_Dimension_Supplier",
                            "TargetLocation": "WWI/Dimension_Supplier",
                            "TargetServer": "datalake-SasToken",
                            "DataLoadMode": "TRUNCATE-LOAD",
                            "DeltaExtract": false,
                            "CDCSource": false,
                            "TruncateTarget": true,
                            "UpsertTarget": false,
                            "AppendTarget": null,
                            "TrackChanges": false,
                            "LoadToSqlEDW": true,
                            "TaskName": "WWI_Dimension_Supplier",
                            "ControlStageId": 1,
                            "TaskId": 3,
                            "StageSequence": 100,
                            "StageName": "Source to Raw",
                            "SourceId": 5,
                            "TargetId": 3,
                            "ObjectGrain": "Day",
                            "CommandTypeId": 1,
                            "Watermarks": "",
                            "WatermarksDT": null,
                            "WatermarkColumn": "",
                            "BusinessKeyColumn": "SupplierKey",
                            "UpdateMetaData": null,
                            "SourceTimeStampFormat": "",
                            "Command": "SELECT * FROM Dimension.Supplier",
                            "LastLoadedFile": null
                        }
                    },
                    "TargetBLOBFolder": {
                        "type": "string",
                        "defaultValue": "wwi/dimension_supplier/json/year=2021/month=06/day=07/"
                    },
                    "TargetBLOBName": {
                        "type": "string",
                        "defaultValue": "Dimension.Supplier_2021-06-07_210359_093.json.gz"
                    },
                    "ProjectRunID": {
                        "type": "string",
                        "defaultValue": "d4f67ed6-9268-4ec6-b2fe-1c967b5ef49e"
                    }
                },
                "variables": {
                    "ReturnValue": {
                        "type": "String"
                    },
                    "ClusterType": {
                        "type": "String"
                    },
                    "NoteBookURL": {
                        "type": "String",
                        "defaultValue": "/build/raw/load-raw-deltatable"
                    }
                },
                "folder": {
                    "name": "Data Lake"
                },
                "annotations": [],
                "lastPublishTime": "2021-06-27T00:17:48Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/06-Curated-EDWSP')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Log Success",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "SP-EDW-SP",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[CTL].[UpdateTaskLog]",
                            "storedProcedureParameters": {
                                "BatchLogId": {
                                    "value": {
                                        "value": "@pipeline().parameters.BatchLogId",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                },
                                "ExecutionLogId": {
                                    "value": {
                                        "value": "@pipeline().parameters.TaskExecutionLogId",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "Output": {
                                    "value": "Curated Load Complete",
                                    "type": "String"
                                },
                                "Status": {
                                    "value": "Success",
                                    "type": "String"
                                },
                                "TaskId": {
                                    "value": {
                                        "value": "@pipeline().parameters.TaskDetails.TaskId",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS-AzureSqlDatabase_Ctrldb",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "kvSecret": "AzureSqlDatabase-ControlDB"
                            }
                        }
                    },
                    {
                        "name": "SP-EDW-SP",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": {
                                "value": "@pipeline().parameters.TaskDetails.Command",
                                "type": "Expression"
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS-AzureSqlDatabase_Ctrldb",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "kvSecret": "AzureSqlDatabase-SQLDB"
                            }
                        }
                    },
                    {
                        "name": "Log SP Curated End",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "SP-EDW-SP",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[CTL].[UpdateTaskLog]",
                            "storedProcedureParameters": {
                                "BatchLogId": {
                                    "value": {
                                        "value": "@pipeline().parameters.BatchLogId",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "ErrorMessage": {
                                    "value": {
                                        "value": "Error Occurred during Curated load on EDW-SP End",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ExecutionLogId": {
                                    "value": {
                                        "value": "@pipeline().parameters.TaskExecutionLogId",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "Output": {
                                    "value": null,
                                    "type": "String"
                                },
                                "Status": {
                                    "value": "Failure",
                                    "type": "String"
                                },
                                "TaskId": {
                                    "value": {
                                        "value": "@pipeline().parameters.TaskDetails.TaskId",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS-AzureSqlDatabase_Ctrldb",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "kvSecret": "AzureSqlDatabase-ControlDB"
                            }
                        }
                    }
                ],
                "parameters": {
                    "TaskDetails": {
                        "type": "object",
                        "defaultValue": {
                            "SourceType": "BLOB Storage (csv)",
                            "SourceServer": "datalake-SasToken",
                            "SourceName": "Qualtrics_Qualtrics",
                            "SourceLocation": "Qualtrics",
                            "AdditionalProperty": "",
                            "Processor": "databricks-token|0925-064956-carps143|Standard_DS5_v2|6.4.x-scala2.11|2:8|interactive",
                            "ProjectName": "Qualtrics1",
                            "TargetType": "SQL Server",
                            "TargetName": "Qualtrics_Qualtrics",
                            "TargetLocation": "Qualtrics",
                            "TargetServer": "AzureSqlDatabase-SQLDB",
                            "DataLoadMode": "0",
                            "DeltaExtract": null,
                            "CDCSource": null,
                            "TruncateTarget": null,
                            "UpsertTarget": null,
                            "TrackChanges": false,
                            "LoadToSqlEDW": true,
                            "TaskName": "Qualtrics_Qualtrics",
                            "ControlStageId": 3,
                            "TaskId": 813,
                            "StageSequence": 300,
                            "StageName": "Trusted to Curated",
                            "SourceId": 851,
                            "TargetId": 830,
                            "ObjectGrain": "Day",
                            "CommandTypeId": 8,
                            "Watermarks": null,
                            "WatermarksDT": null,
                            "WatermarkColumn": "",
                            "BusinessKeyColumn": "",
                            "Command": "/Users/rahul.agrawal1@tafenswtest.edu.au/build/curated/Qualtrics/QualtricsMaster-Test",
                            "LastLoadedFile": null
                        }
                    },
                    "TaskExecutionLogId": {
                        "type": "int",
                        "defaultValue": 0
                    },
                    "BatchLogId": {
                        "type": "int",
                        "defaultValue": 0
                    },
                    "ProjectRunID": {
                        "type": "string"
                    }
                },
                "variables": {
                    "ClusterType": {
                        "type": "String"
                    },
                    "NoteBookReturnValue": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Curated"
                },
                "annotations": [],
                "lastPublishTime": "2021-06-24T12:03:06Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/08-EXPORT-SQLServer')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy-Data",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "SET-TargetTableID",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": {
                                    "value": "@{replace(variables('TRUNCATESQL'), '<<TABLE_NAME>>', variables('TargetTableID'))}",
                                    "type": "Expression"
                                },
                                "tableOption": "autoCreate",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_AZURE_SQLSERVER",
                                "type": "DatasetReference",
                                "parameters": {
                                    "kvSecret": {
                                        "value": "AzureSqlDatabase-SQLDB",
                                        "type": "Expression"
                                    },
                                    "TableName": {
                                        "value": "@split(pipeline().parameters.TaskDetails.SourceLocation,'.')[1]",
                                        "type": "Expression"
                                    },
                                    "SchemaName": {
                                        "value": "@split(pipeline().parameters.TaskDetails.SourceLocation,'.')[0]",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_AZURE_SQLSERVER",
                                "type": "DatasetReference",
                                "parameters": {
                                    "kvSecret": {
                                        "value": "@pipeline().parameters.TaskDetails.TargetServer",
                                        "type": "Expression"
                                    },
                                    "TableName": {
                                        "value": "@pipeline().parameters.TaskDetails.TargetLocation",
                                        "type": "Expression"
                                    },
                                    "SchemaName": {
                                        "value": "@variables('TargetSchema')",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "Log Copy Load Failure",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Copy-Data",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[CTL].[UpdateTaskLog]",
                            "storedProcedureParameters": {
                                "BatchLogId": {
                                    "value": {
                                        "value": "@pipeline().parameters.BatchLogId",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "ErrorMessage": {
                                    "value": {
                                        "value": "An Error Occurred while copy data",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ExecutionLogId": {
                                    "value": {
                                        "value": "@pipeline().parameters.TaskExecutionLogId",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "Status": {
                                    "value": "Failure",
                                    "type": "String"
                                },
                                "TaskId": {
                                    "value": {
                                        "value": "@pipeline().parameters.TaskDetails.TaskId",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "Output": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS-AzureSqlDatabase_Ctrldb",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "kvSecret": "AzureSqlDatabase-ControlDB"
                            }
                        }
                    },
                    {
                        "name": "Log Copy Load Success",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Copy-Data",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[CTL].[UpdateTaskLog]",
                            "storedProcedureParameters": {
                                "BatchLogId": {
                                    "value": {
                                        "value": "@pipeline().parameters.BatchLogId",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                },
                                "ExecutionLogId": {
                                    "value": {
                                        "value": "@pipeline().parameters.TaskExecutionLogId",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "Output": {
                                    "value": {
                                        "value": "@pipeline().parameters.TaskDetails.LastLoadedFile",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "Status": {
                                    "value": "Success",
                                    "type": "String"
                                },
                                "TaskId": {
                                    "value": {
                                        "value": "@pipeline().parameters.TaskDetails.TaskId",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS-AzureSqlDatabase_Ctrldb",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "kvSecret": "AzureSqlDatabase-ControlDB"
                            }
                        }
                    },
                    {
                        "name": "SET-TargetTableID",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "TargetTableID",
                            "value": {
                                "value": "@concat(variables('TargetSchema'), '.', pipeline().parameters.TaskDetails.TargetLocation)",
                                "type": "Expression"
                            }
                        }
                    }
                ],
                "parameters": {
                    "BatchLogId": {
                        "type": "int"
                    },
                    "TaskDetails": {
                        "type": "object"
                    },
                    "TaskExecutionLogId": {
                        "type": "int"
                    },
                    "ProjectRunID": {
                        "type": "string"
                    }
                },
                "variables": {
                    "TRUNCATESQL": {
                        "type": "String",
                        "defaultValue": "IF OBJECT_ID('<<TABLE_NAME>>', 'U') IS NOT NULL TRUNCATE TABLE <<TABLE_NAME>>"
                    },
                    "TargetSchema": {
                        "type": "String",
                        "defaultValue": "TRIP"
                    },
                    "TargetTableID": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Export"
                },
                "annotations": [],
                "lastPublishTime": "2021-06-24T12:03:07Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/05-DL-C-Update-Trusted-Deleted')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "LU-Manifest",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderStoredProcedureName": "[[CTL].[GetManifestAudit]",
                                "storedProcedureParameters": {
                                    "SourceObject": {
                                        "type": "String",
                                        "value": {
                                            "value": "@pipeline().parameters.TaskDetails.SoftDeleteSource",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "AzureSqlDatabase_Ctrldb",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        }
                    },
                    {
                        "name": "If-Check-Interactive",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "LU-Manifest",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Set-ClusterType",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@and(\n  not(equals(activity('LU-Manifest').output.firstRow.Batches, 0)), \n  equals(variables('ClusterType'), 'interactive')\n)",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Updated-Deleted-Interactive",
                                    "type": "DatabricksNotebook",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "notebookPath": {
                                            "value": "@variables('NoteBookURL')",
                                            "type": "Expression"
                                        },
                                        "baseParameters": {
                                            "main_table": {
                                                "value": "@pipeline().parameters.TaskDetails.SourceName",
                                                "type": "Expression"
                                            },
                                            "start_counter": {
                                                "value": "@activity('LU-Manifest').output.firstRow.StartCounter",
                                                "type": "Expression"
                                            },
                                            "end_counter": {
                                                "value": "@activity('LU-Manifest').output.firstRow.EndCounter",
                                                "type": "Expression"
                                            },
                                            "delta_column": {
                                                "value": "@activity('LU-Manifest').output.firstRow.DeltaColumn",
                                                "type": "Expression"
                                            },
                                            "business_key": {
                                                "value": "@pipeline().parameters.TaskDetails.BusinessKeyColumn",
                                                "type": "Expression"
                                            },
                                            "audit_table": {
                                                "value": "@pipeline().parameters.TaskDetails.SoftDeleteSource",
                                                "type": "Expression"
                                            }
                                        },
                                        "libraries": [
                                            {
                                                "maven": {
                                                    "coordinates": "com.microsoft.azure:azure-sqldb-spark:1.0.2"
                                                }
                                            }
                                        ]
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS-AzureDatabricks_DefinedCluster",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "kvSecret": {
                                                "value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
                                                "type": "Expression"
                                            },
                                            "clusterId": {
                                                "value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[1]",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "Set-DB-Output-Interactive",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "Updated-Deleted-Interactive",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "ReturnValue",
                                        "value": {
                                            "value": "@string(activity('Updated-Deleted-Interactive').output.runOutput)",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Set-ClusterType",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "ClusterType",
                            "value": {
                                "value": "@toLower(last(split(pipeline().parameters.TaskDetails.Processor,'|')))",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "SP-UpdateManifest",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "If-Check-Job",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[CTL].[UpdateManifestAudit]",
                            "storedProcedureParameters": {
                                "BatchExecutionLogID": {
                                    "value": {
                                        "value": "@pipeline().parameters.BatchLogId",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "SourceObject": {
                                    "value": {
                                        "value": "@pipeline().parameters.TaskDetails.SoftDeleteSource",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ProcessedToTrusted": {
                                    "value": {
                                        "value": "@variables('ReturnValue')",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineRunID": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS-AzureSqlDatabase_Ctrldb",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "kvSecret": "AzureSqlDatabase-ControlDB"
                            }
                        }
                    },
                    {
                        "name": "If-Check-Job",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "If-Check-Interactive",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@and(\n  not(equals(activity('LU-Manifest').output.firstRow.Batches, 0)), \n  not(equals(variables('ClusterType'), 'interactive'))\n)",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Updated-Deleted-Job",
                                    "type": "DatabricksNotebook",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "notebookPath": {
                                            "value": "@variables('NoteBookURL')",
                                            "type": "Expression"
                                        },
                                        "baseParameters": {
                                            "main_table": {
                                                "value": "@pipeline().parameters.TaskDetails.SourceName",
                                                "type": "Expression"
                                            },
                                            "start_counter": {
                                                "value": "@activity('LU-Manifest').output.firstRow.StartCounter",
                                                "type": "Expression"
                                            },
                                            "end_counter": {
                                                "value": "@activity('LU-Manifest').output.firstRow.EndCounter",
                                                "type": "Expression"
                                            },
                                            "delta_column": {
                                                "value": "@activity('LU-Manifest').output.firstRow.DeltaColumn",
                                                "type": "Expression"
                                            },
                                            "business_key": {
                                                "value": "@pipeline().parameters.TaskDetails.BusinessKeyColumn",
                                                "type": "Expression"
                                            },
                                            "audit_table": {
                                                "value": "@pipeline().parameters.TaskDetails.SoftDeleteSource",
                                                "type": "Expression"
                                            }
                                        },
                                        "libraries": [
                                            {
                                                "maven": {
                                                    "coordinates": "com.microsoft.azure:azure-sqldb-spark:1.0.2"
                                                }
                                            }
                                        ]
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS-AzureDatabricks_JobCluster",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "kvSecret": {
                                                "value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
                                                "type": "Expression"
                                            },
                                            "DataBricksClusterType": {
                                                "value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[2]",
                                                "type": "Expression"
                                            },
                                            "DataBricksClusterVersion": {
                                                "value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[3]",
                                                "type": "Expression"
                                            },
                                            "DataBricksWorkerNodes": {
                                                "value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[4]",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "Set-DB-Output-Job",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "Updated-Deleted-Job",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "ReturnValue",
                                        "value": {
                                            "value": "@string(activity('Updated-Deleted-Job').output.runOutput)",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "parameters": {
                    "TaskDetails": {
                        "type": "object",
                        "defaultValue": {
                            "SourceType": "BLOB Storage (json)",
                            "SourceServer": "datalake-SasToken",
                            "SourceName": "OneEBS_EBS_0165_USERS",
                            "SourceLocation": "OneEBS/EBS_0165_USERS",
                            "Processor": "databricks-token|0708-233111-note225",
                            "ProjectName": "OneEBS",
                            "TargetType": "BLOB Storage (csv)",
                            "TargetName": "OneEBS_EBS_0165_USERS",
                            "TargetLocation": "OneEBS/EBS_0165_USERS",
                            "TargetServer": "datalake-SasToken",
                            "DataLoadMode": "FULL-EXTRACT",
                            "DeltaExtract": false,
                            "CDCSource": false,
                            "TruncateTarget": false,
                            "UpsertTarget": true,
                            "TrackChanges": true,
                            "TaskName": "Copy OneEBS_EBS_0165_USERS",
                            "ControlStageId": 2,
                            "TaskId": 38,
                            "StageSequence": 200,
                            "StageName": "Raw to Trusted",
                            "SourceId": 38,
                            "TargetId": 38,
                            "ObjectGrain": "Day",
                            "CommandTypeId": 8,
                            "Watermarks": null,
                            "WatermarkColumn": "",
                            "BusinessKeyColumn": "ID",
                            "Command": "/build/load-trusted-zone",
                            "LastLoadedFile": "EBS_0165.USERS_2020-05-14_090517_167.json.gz"
                        }
                    },
                    "BatchLogId": {
                        "type": "int",
                        "defaultValue": 118
                    },
                    "TaskExecutionLogId": {
                        "type": "int",
                        "defaultValue": 870
                    },
                    "ProjectRunID": {
                        "type": "string"
                    }
                },
                "variables": {
                    "ReturnValue": {
                        "type": "String"
                    },
                    "ClusterType": {
                        "type": "String"
                    },
                    "NoteBookURL": {
                        "type": "String",
                        "defaultValue": "/build/trusted/function/update-deleted-from-audit"
                    }
                },
                "folder": {
                    "name": "Data Lake"
                },
                "annotations": [],
                "lastPublishTime": "2021-06-24T12:03:07Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/recon-record-validation')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "If-Check",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "LU-Source",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(activity('LU-Source').output.firstRow.IsAuditTable,false)",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "SP-Update-Validation",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[CTL].[RecordDataValidation]",
                                        "storedProcedureParameters": {
                                            "HighWatermark": {
                                                "value": {
                                                    "value": "@json(string(pipeline().parameters.ValidationDetails)).ReturnValue",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "MaxValue": {
                                                "value": {
                                                    "value": "@json(string(pipeline().parameters.ValidationDetails)).MaximumValue",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "MinValue": {
                                                "value": {
                                                    "value": "@json(string(pipeline().parameters.ValidationDetails)).MinimumValue",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "RecordCount": {
                                                "value": {
                                                    "value": "@json(string(pipeline().parameters.ValidationDetails)).RecordCount",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "TotalValue": {
                                                "value": {
                                                    "value": "@json(string(pipeline().parameters.ValidationDetails)).TotalValue",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "ValidationType": {
                                                "value": {
                                                    "value": "@json(string(pipeline().parameters.ValidationDetails)).ValidationType",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ProjectRunID": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ProjectRunID",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "SourceID": {
                                                "value": {
                                                    "value": "@pipeline().parameters.SourceID",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS-AzureSqlDatabase_Ctrldb",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "kvSecret": "AzureSqlDatabase-ControlDB"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "LU-Source",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "@concat('SELECT * FROM CTL.vw_ControlConfiguration WHERE SourceID = ', string(pipeline().parameters.SourceID))",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "AzureSqlDatabase_Ctrldb",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        }
                    }
                ],
                "parameters": {
                    "ProjectRunID": {
                        "type": "string",
                        "defaultValue": "0b6110e9-8d68-4a0a-8ee8-0182a03289ef"
                    },
                    "ValidationDetails": {
                        "type": "object",
                        "defaultValue": {
                            "SOURCECOLUMN": "COALESCE (UPDATED_DATE, CREATED_DATE)",
                            "RETURNVALUE": "2020-11-08 17:58:04",
                            "RECORDCOUNT": 52254,
                            "TOTALVALUE": 3361637939,
                            "MAXVALUE": 133557,
                            "MINVALUE": 2,
                            "VALIDATIONTYPE": "SOURCE"
                        }
                    },
                    "SourceID": {
                        "type": "int"
                    }
                },
                "folder": {
                    "name": "Validation"
                },
                "annotations": [],
                "lastPublishTime": "2021-06-24T12:03:07Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/05-DL-B-Load-Trusted-To-SQLEDW')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "LU-Manifest",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderStoredProcedureName": "[[CTL].[GetManifestSQLEDW]",
                                "storedProcedureParameters": {
                                    "SourceObject": {
                                        "type": "String",
                                        "value": {
                                            "value": "@pipeline().parameters.TaskDetails.SourceName",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "AzureSqlDatabase_Ctrldb",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        }
                    },
                    {
                        "name": "If-Check-Interactive",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "LU-Manifest",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Set-ClusterType",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@and(\n  not(equals(activity('LU-Manifest').output.firstRow.Batches, 0)), \n  equals(variables('ClusterType'), 'interactive')\n)",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Load-To-SQL-EDW-Interactive",
                                    "type": "DatabricksNotebook",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "notebookPath": {
                                            "value": "@variables('NotebookURL')",
                                            "type": "Expression"
                                        },
                                        "baseParameters": {
                                            "source_object": {
                                                "value": "@pipeline().parameters.TaskDetails.SourceName",
                                                "type": "Expression"
                                            },
                                            "start_counter": {
                                                "value": "@activity('LU-Manifest').output.firstRow.StartCounter",
                                                "type": "Expression"
                                            },
                                            "end_counter": {
                                                "value": "@activity('LU-Manifest').output.firstRow.EndCounter",
                                                "type": "Expression"
                                            },
                                            "delta_column": {
                                                "value": "@activity('LU-Manifest').output.firstRow.DeltaColumn",
                                                "type": "Expression"
                                            },
                                            "source_param": {
                                                "value": "@string(pipeline().parameters.TaskDetails)",
                                                "type": "Expression"
                                            }
                                        },
                                        "libraries": [
                                            {
                                                "maven": {
                                                    "coordinates": "com.microsoft.azure:azure-sqldb-spark:1.0.2"
                                                }
                                            }
                                        ]
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS-AzureDatabricks_DefinedCluster",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "kvSecret": {
                                                "value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
                                                "type": "Expression"
                                            },
                                            "clusterId": {
                                                "value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[1]",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "Set-DB-Output-Interactive",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "Load-To-SQL-EDW-Interactive",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "ReturnValue",
                                        "value": {
                                            "value": "@string(activity('Load-To-SQL-EDW-Interactive').output.runOutput)",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Set-ClusterType",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "ClusterType",
                            "value": {
                                "value": "@toLower(last(split(pipeline().parameters.TaskDetails.Processor,'|')))",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "SP-UpdateManifest",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "If-Check-Job",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[CTL].[UpdateManifestSQLEDW]",
                            "storedProcedureParameters": {
                                "BatchExecutionLogID": {
                                    "value": {
                                        "value": "@pipeline().parameters.BatchLogId",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "SourceObject": {
                                    "value": {
                                        "value": "@pipeline().parameters.TaskDetails.SourceName",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ProcessedToSQLEDW": {
                                    "value": {
                                        "value": "@variables('ReturnValue')",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "PipelineRunID": {
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS-AzureSqlDatabase_Ctrldb",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "kvSecret": "AzureSqlDatabase-ControlDB"
                            }
                        }
                    },
                    {
                        "name": "If-Check-Job",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "If-Check-Interactive",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@and(\n  not(equals(activity('LU-Manifest').output.firstRow.Batches, 0)), \n  not(equals(variables('ClusterType'), 'interactive'))\n)",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Load-To-SQL-EDW-Job",
                                    "type": "DatabricksNotebook",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "notebookPath": {
                                            "value": "@variables('NotebookURL')",
                                            "type": "Expression"
                                        },
                                        "baseParameters": {
                                            "source_object": {
                                                "value": "@pipeline().parameters.TaskDetails.SourceName",
                                                "type": "Expression"
                                            },
                                            "start_counter": {
                                                "value": "@activity('LU-Manifest').output.firstRow.StartCounter",
                                                "type": "Expression"
                                            },
                                            "end_counter": {
                                                "value": "@activity('LU-Manifest').output.firstRow.EndCounter",
                                                "type": "Expression"
                                            },
                                            "delta_column": {
                                                "value": "@activity('LU-Manifest').output.firstRow.DeltaColumn",
                                                "type": "Expression"
                                            },
                                            "source_param": {
                                                "value": "@string(pipeline().parameters.TaskDetails)",
                                                "type": "Expression"
                                            }
                                        },
                                        "libraries": [
                                            {
                                                "maven": {
                                                    "coordinates": "com.microsoft.azure:azure-sqldb-spark:1.0.2"
                                                }
                                            }
                                        ]
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS-AzureDatabricks_JobCluster",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "kvSecret": {
                                                "value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
                                                "type": "Expression"
                                            },
                                            "DataBricksClusterType": {
                                                "value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[2]",
                                                "type": "Expression"
                                            },
                                            "DataBricksClusterVersion": {
                                                "value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[3]",
                                                "type": "Expression"
                                            },
                                            "DataBricksWorkerNodes": {
                                                "value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[4]",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "Set-DB-Output-Job",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "Load-To-SQL-EDW-Job",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "ReturnValue",
                                        "value": {
                                            "value": "@string(activity('Load-To-SQL-EDW-Job').output.runOutput)",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "parameters": {
                    "TaskDetails": {
                        "type": "object",
                        "defaultValue": {
                            "SourceType": "BLOB Storage (json)",
                            "SourceServer": "datalake-SasToken",
                            "SourceName": "OneEBS_EBS_0165_USERS",
                            "SourceLocation": "OneEBS/EBS_0165_USERS",
                            "Processor": "databricks-token|0708-233111-note225",
                            "ProjectName": "OneEBS",
                            "TargetType": "BLOB Storage (csv)",
                            "TargetName": "OneEBS_EBS_0165_USERS",
                            "TargetLocation": "OneEBS/EBS_0165_USERS",
                            "TargetServer": "datalake-SasToken",
                            "DataLoadMode": "FULL-EXTRACT",
                            "DeltaExtract": false,
                            "CDCSource": false,
                            "TruncateTarget": false,
                            "UpsertTarget": true,
                            "TrackChanges": true,
                            "TaskName": "Copy OneEBS_EBS_0165_USERS",
                            "ControlStageId": 2,
                            "TaskId": 38,
                            "StageSequence": 200,
                            "StageName": "Raw to Trusted",
                            "SourceId": 38,
                            "TargetId": 38,
                            "ObjectGrain": "Day",
                            "CommandTypeId": 8,
                            "Watermarks": null,
                            "WatermarkColumn": "",
                            "BusinessKeyColumn": "ID",
                            "Command": "/build/load-trusted-zone",
                            "LastLoadedFile": "EBS_0165.USERS_2020-05-14_090517_167.json.gz"
                        }
                    },
                    "BatchLogId": {
                        "type": "int",
                        "defaultValue": 118
                    },
                    "TaskExecutionLogId": {
                        "type": "int",
                        "defaultValue": 870
                    },
                    "ProjectRunID": {
                        "type": "string"
                    }
                },
                "variables": {
                    "ReturnValue": {
                        "type": "String"
                    },
                    "ClusterType": {
                        "type": "String"
                    },
                    "NotebookURL": {
                        "type": "String",
                        "defaultValue": "/build/trusted/function/load-trusted-sqledw-v2"
                    }
                },
                "folder": {
                    "name": "Data Lake"
                },
                "annotations": [],
                "lastPublishTime": "2021-06-24T12:03:07Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/07-AAS-Main')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "processing-list",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "SET-RGName",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "SET-KVName",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "SET-WaitSeconds",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "SET-AASName",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "SELECT * FROM [aas].[Partition] ORDER BY CubeSequence, ProcessOrder",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "SRC_AzureSqlDatabase",
                                "type": "DatasetReference",
                                "parameters": {
                                    "kvSecret": "AzureSqlDatabase-SQLDB"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "for-each-process",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "processing-list",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('processing-list').output.value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "aas-process",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "07-AAS-Process",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "resourceGroupName": {
                                                "value": "@variables('resourceGroupName')",
                                                "type": "Expression"
                                            },
                                            "keyVaultName": {
                                                "value": "@variables('keyVaultName')",
                                                "type": "Expression"
                                            },
                                            "aasName": {
                                                "value": "@variables('aasName')",
                                                "type": "Expression"
                                            },
                                            "modelName": {
                                                "value": "@item().ModelName",
                                                "type": "Expression"
                                            },
                                            "processCommand": {
                                                "value": "@item().RefreshCommand",
                                                "type": "Expression"
                                            },
                                            "waitSeconds": {
                                                "value": "@variables('waitSeconds')",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "SET-RGName",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "resourceGroupName",
                            "value": {
                                "value": "@split(pipeline().parameters.TaskDetails.AdditionalProperty,'|')[0]",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "SET-KVName",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "keyVaultName",
                            "value": {
                                "value": "@split(pipeline().parameters.TaskDetails.AdditionalProperty,'|')[1]",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "SET-AASName",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "aasName",
                            "value": {
                                "value": "@split(pipeline().parameters.TaskDetails.AdditionalProperty,'|')[2]",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "SET-WaitSeconds",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "waitSeconds",
                            "value": {
                                "value": "@split(pipeline().parameters.TaskDetails.AdditionalProperty,'|')[3]",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Task Log Cube Process Failure",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "for-each-process",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[CTL].[UpdateTaskLog]",
                            "storedProcedureParameters": {
                                "BatchLogId": {
                                    "value": {
                                        "value": "@pipeline().parameters.BatchLogId",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "ErrorMessage": {
                                    "value": {
                                        "value": "An Error Occurred while processing the Cube",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ExecutionLogId": {
                                    "value": {
                                        "value": "@pipeline().parameters.TaskExecutionLogId",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "Status": {
                                    "value": "Failure",
                                    "type": "String"
                                },
                                "TaskId": {
                                    "value": {
                                        "value": "@pipeline().parameters.TaskDetails.TaskId",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "Output": {
                                    "value": null,
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS-AzureSqlDatabase_Ctrldb",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "kvSecret": "AzureSqlDatabase-ControlDB"
                            }
                        }
                    },
                    {
                        "name": "Log Cube Process Success",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "for-each-process",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[CTL].[UpdateTaskLog]",
                            "storedProcedureParameters": {
                                "BatchLogId": {
                                    "value": {
                                        "value": "@pipeline().parameters.BatchLogId",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                },
                                "ExecutionLogId": {
                                    "value": {
                                        "value": "@pipeline().parameters.TaskExecutionLogId",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "Output": {
                                    "value": {
                                        "value": "@pipeline().parameters.TaskDetails.LastLoadedFile",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "Status": {
                                    "value": "Success",
                                    "type": "String"
                                },
                                "TaskId": {
                                    "value": {
                                        "value": "@pipeline().parameters.TaskDetails.TaskId",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS-AzureSqlDatabase_Ctrldb",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "kvSecret": "AzureSqlDatabase-ControlDB"
                            }
                        }
                    }
                ],
                "parameters": {
                    "BatchLogId": {
                        "type": "int"
                    },
                    "TaskDetails": {
                        "type": "object"
                    },
                    "TaskExecutionLogId": {
                        "type": "int"
                    },
                    "ProjectRunID": {
                        "type": "string"
                    }
                },
                "variables": {
                    "resourceGroupName": {
                        "type": "String"
                    },
                    "keyVaultName": {
                        "type": "String"
                    },
                    "aasName": {
                        "type": "String"
                    },
                    "waitSeconds": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "AAS"
                },
                "annotations": [],
                "lastPublishTime": "2021-06-24T12:03:07Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/util-fileserver-delete-file')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Get File Metadata",
                        "type": "GetMetadata",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "BINARY_FILESERVER",
                                "type": "DatasetReference",
                                "parameters": {
                                    "FileShareUserID": {
                                        "value": "@pipeline().parameters.FileShareUserID",
                                        "type": "Expression"
                                    },
                                    "Folder": {
                                        "value": "@pipeline().parameters.SourceFolder",
                                        "type": "Expression"
                                    },
                                    "File": {
                                        "value": "@pipeline().parameters.SourceFile",
                                        "type": "Expression"
                                    },
                                    "FileShareURL": {
                                        "value": "@pipeline().parameters.FileShareURL",
                                        "type": "Expression"
                                    },
                                    "FileSharePassword": {
                                        "value": "@pipeline().parameters.FileSharePassword",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "fieldList": [
                                "exists"
                            ],
                            "storeSettings": {
                                "type": "FileServerReadSettings",
                                "recursive": true
                            },
                            "formatSettings": {
                                "type": "BinaryReadSettings"
                            }
                        }
                    },
                    {
                        "name": "If-DeleteFile",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Get File Metadata",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@activity('Get File Metadata').output.exists",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Delete-File",
                                    "type": "Delete",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "BINARY_FILESERVER",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FileShareUserID": {
                                                    "value": "@pipeline().parameters.FileShareUserID",
                                                    "type": "Expression"
                                                },
                                                "Folder": {
                                                    "value": "@pipeline().parameters.SourceFolder",
                                                    "type": "Expression"
                                                },
                                                "File": {
                                                    "value": "@pipeline().parameters.SourceFile",
                                                    "type": "Expression"
                                                },
                                                "FileShareURL": {
                                                    "value": "@pipeline().parameters.FileShareURL",
                                                    "type": "Expression"
                                                },
                                                "FileSharePassword": {
                                                    "value": "@pipeline().parameters.FileSharePassword",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "enableLogging": false,
                                        "storeSettings": {
                                            "type": "FileServerReadSettings",
                                            "recursive": true
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "parameters": {
                    "SourceFile": {
                        "type": "string"
                    },
                    "SourceFolder": {
                        "type": "string"
                    },
                    "FileShareURL": {
                        "type": "string"
                    },
                    "FileShareUserID": {
                        "type": "string"
                    },
                    "FileSharePassword": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Utility/fileserver"
                },
                "annotations": [],
                "lastPublishTime": "2021-06-24T12:03:07Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/LU_Source')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Lookup1",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "OracleSource",
                                "oracleReaderQuery": "SELECT * FROM all_tab_cols WHERE  owner like 'o%'",
                                "partitionOption": "None",
                                "queryTimeout": "02:00:00"
                            },
                            "dataset": {
                                "referenceName": "SRC_Oracle",
                                "type": "DatasetReference",
                                "parameters": {
                                    "kvSecret": "OneEBS-0165"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Copy data1",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Lookup1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "OracleSource",
                                "oracleReaderQuery": "select * from all_tables\nwhere owner ='EBS_0900'",
                                "partitionOption": "None",
                                "queryTimeout": "02:00:00"
                            },
                            "sink": {
                                "type": "DelimitedTextSink",
                                "storeSettings": {
                                    "type": "AzureBlobStorageWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextWriteSettings",
                                    "quoteAllText": true,
                                    "fileExtension": ".txt"
                                }
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "SRC_Oracle",
                                "type": "DatasetReference",
                                "parameters": {
                                    "kvSecret": "EBS900T4U"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "RAW_ADLS_CSV",
                                "type": "DatasetReference",
                                "parameters": {
                                    "BlobPath": "external",
                                    "BlobName": "filename.csv",
                                    "Compression": "none"
                                }
                            }
                        ]
                    },
                    {
                        "name": "LU-EBS",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "OracleSource",
                                "oracleReaderQuery": "select * FROM EBS_0165.DISABILITIES WHERE ID IN (38728, 38729)",
                                "partitionOption": "None",
                                "queryTimeout": "02:00:00"
                            },
                            "dataset": {
                                "referenceName": "SRC_Oracle",
                                "type": "DatasetReference",
                                "parameters": {
                                    "kvSecret": "Oneebs-0165"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "LU-MySQL",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "MySqlSource",
                                "query": "SELECT \n\t'timemodified, timecreated' AS SourceColumn, \n\tFROM_UNIXTIME(MAX(IFNULL(COALESCE(timemodified, timecreated), 0))) As ReturnValue, \n\tCOUNT(1) AS RecordCount, \n\t0 AS TotalValue, \n\t0 AS MaxValue, \n\t0 AS MinValue, \n\t'SOURCE' AS ValidationType \nFROM lmsuu.mdl_course"
                            },
                            "dataset": {
                                "referenceName": "SRC_MySQL",
                                "type": "DatasetReference",
                                "parameters": {
                                    "kvSecret": "LMS-lmsp"
                                }
                            },
                            "firstRowOnly": false
                        }
                    }
                ],
                "variables": {
                    "Owner": {
                        "type": "String"
                    },
                    "Table": {
                        "type": "String"
                    },
                    "BLOBPath": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Archive"
                },
                "annotations": [],
                "lastPublishTime": "2021-06-24T12:03:07Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/util-fileserver-upload-file')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy-Files-Out",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "BinarySource",
                                "storeSettings": {
                                    "type": "AzureBlobStorageReadSettings",
                                    "recursive": true
                                },
                                "formatSettings": {
                                    "type": "BinaryReadSettings"
                                }
                            },
                            "sink": {
                                "type": "BinarySink",
                                "storeSettings": {
                                    "type": "FileServerWriteSettings"
                                }
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "BINARY_ADLS",
                                "type": "DatasetReference",
                                "parameters": {
                                    "File": {
                                        "value": "@pipeline().parameters.FileName",
                                        "type": "Expression"
                                    },
                                    "Container": {
                                        "value": "@pipeline().parameters.SourceContainer",
                                        "type": "Expression"
                                    },
                                    "Folder": {
                                        "value": "@pipeline().parameters.SourceFolder",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "BINARY_FILESERVER",
                                "type": "DatasetReference",
                                "parameters": {
                                    "FileShareUserID": {
                                        "value": "@pipeline().parameters.FileShareUserID",
                                        "type": "Expression"
                                    },
                                    "Folder": {
                                        "value": "@pipeline().parameters.UploadFolder",
                                        "type": "Expression"
                                    },
                                    "File": {
                                        "value": "@pipeline().parameters.FileName",
                                        "type": "Expression"
                                    },
                                    "FileShareURL": {
                                        "value": "@pipeline().parameters.FileShareURL",
                                        "type": "Expression"
                                    },
                                    "FileSharePassword": {
                                        "value": "@pipeline().parameters.FileSharePassword",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    }
                ],
                "parameters": {
                    "SourceContainer": {
                        "type": "string",
                        "defaultValue": "external"
                    },
                    "SourceFolder": {
                        "type": "string",
                        "defaultValue": "test"
                    },
                    "FileName": {
                        "type": "string"
                    },
                    "UploadFolder": {
                        "type": "string",
                        "defaultValue": "In"
                    },
                    "FileShareURL": {
                        "type": "string"
                    },
                    "FileShareUserID": {
                        "type": "string"
                    },
                    "FileSharePassword": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Utility/fileserver"
                },
                "annotations": [],
                "lastPublishTime": "2021-06-24T12:03:07Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/util-datalake-move-file')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Get File Metadata",
                        "type": "GetMetadata",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "BINARY_ADLS",
                                "type": "DatasetReference",
                                "parameters": {
                                    "File": {
                                        "value": "@pipeline().parameters.SourceFile",
                                        "type": "Expression"
                                    },
                                    "Container": {
                                        "value": "@pipeline().parameters.SourceContainer",
                                        "type": "Expression"
                                    },
                                    "Folder": {
                                        "value": "@pipeline().parameters.SourceFolder",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "fieldList": [
                                "exists"
                            ],
                            "storeSettings": {
                                "type": "AzureBlobStorageReadSettings",
                                "recursive": true
                            },
                            "formatSettings": {
                                "type": "BinaryReadSettings"
                            }
                        }
                    },
                    {
                        "name": "If-File-Exists",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Get File Metadata",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@activity('Get File Metadata').output.exists",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Move File",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "BinarySource",
                                            "storeSettings": {
                                                "type": "AzureBlobStorageReadSettings",
                                                "recursive": true,
                                                "deleteFilesAfterCompletion": {
                                                    "value": "@pipeline().parameters.DeleteFile",
                                                    "type": "Expression"
                                                }
                                            },
                                            "formatSettings": {
                                                "type": "BinaryReadSettings"
                                            }
                                        },
                                        "sink": {
                                            "type": "BinarySink",
                                            "storeSettings": {
                                                "type": "AzureBlobStorageWriteSettings"
                                            }
                                        },
                                        "enableStaging": false
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "BINARY_ADLS",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "File": {
                                                    "value": "@pipeline().parameters.SourceFile",
                                                    "type": "Expression"
                                                },
                                                "Container": {
                                                    "value": "@pipeline().parameters.SourceContainer",
                                                    "type": "Expression"
                                                },
                                                "Folder": {
                                                    "value": "@pipeline().parameters.SourceFolder",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "BINARY_ADLS",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "File": {
                                                    "value": "@pipeline().parameters.TargetFile",
                                                    "type": "Expression"
                                                },
                                                "Container": {
                                                    "value": "@pipeline().parameters.TargetContainer",
                                                    "type": "Expression"
                                                },
                                                "Folder": {
                                                    "value": "@pipeline().parameters.TargetFolder",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "name": "If-DeleteFile",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "If-File-Exists",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@pipeline().parameters.DeleteFile",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Delete-File",
                                    "type": "Delete",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "BINARY_ADLS",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "File": {
                                                    "value": "@pipeline().parameters.SourceFile",
                                                    "type": "Expression"
                                                },
                                                "Container": {
                                                    "value": "@pipeline().parameters.SourceContainer",
                                                    "type": "Expression"
                                                },
                                                "Folder": {
                                                    "value": "@pipeline().parameters.SourceFolder",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "enableLogging": false,
                                        "storeSettings": {
                                            "type": "AzureBlobStorageReadSettings",
                                            "recursive": true
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "parameters": {
                    "SourceFolder": {
                        "type": "string"
                    },
                    "SourceFile": {
                        "type": "string"
                    },
                    "SourceContainer": {
                        "type": "string"
                    },
                    "TargetContainer": {
                        "type": "string"
                    },
                    "DeleteFile": {
                        "type": "bool",
                        "defaultValue": true
                    },
                    "TargetFolder": {
                        "type": "string"
                    },
                    "TargetFile": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Utility"
                },
                "annotations": [],
                "lastPublishTime": "2021-06-24T12:03:07Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/util-fileserver-download-file')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Get File Metadata",
                        "type": "GetMetadata",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "BINARY_FILESERVER",
                                "type": "DatasetReference",
                                "parameters": {
                                    "FileShareUserID": {
                                        "value": "@pipeline().parameters.FileShareUserID",
                                        "type": "Expression"
                                    },
                                    "Folder": {
                                        "value": "@pipeline().parameters.SourceFolder",
                                        "type": "Expression"
                                    },
                                    "File": {
                                        "value": "@pipeline().parameters.SourceFile",
                                        "type": "Expression"
                                    },
                                    "FileShareURL": {
                                        "value": "@pipeline().parameters.FileShareURL",
                                        "type": "Expression"
                                    },
                                    "FileSharePassword": {
                                        "value": "@pipeline().parameters.FileSharePassword",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "fieldList": [
                                "exists",
                                "lastModified"
                            ],
                            "storeSettings": {
                                "type": "FileServerReadSettings",
                                "recursive": true
                            },
                            "formatSettings": {
                                "type": "BinaryReadSettings"
                            }
                        }
                    },
                    {
                        "name": "If-File-Exists",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Get File Metadata",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@activity('Get File Metadata').output.exists",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Move File",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "BinarySource",
                                            "storeSettings": {
                                                "type": "FileServerReadSettings",
                                                "recursive": true,
                                                "deleteFilesAfterCompletion": {
                                                    "value": "@pipeline().parameters.DeleteFile",
                                                    "type": "Expression"
                                                }
                                            },
                                            "formatSettings": {
                                                "type": "BinaryReadSettings"
                                            }
                                        },
                                        "sink": {
                                            "type": "BinarySink",
                                            "storeSettings": {
                                                "type": "AzureBlobStorageWriteSettings"
                                            }
                                        },
                                        "enableStaging": false
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "BINARY_FILESERVER",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FileShareUserID": {
                                                    "value": "@pipeline().parameters.FileShareUserID",
                                                    "type": "Expression"
                                                },
                                                "Folder": {
                                                    "value": "@pipeline().parameters.SourceFolder",
                                                    "type": "Expression"
                                                },
                                                "File": {
                                                    "value": "@pipeline().parameters.SourceFile",
                                                    "type": "Expression"
                                                },
                                                "FileShareURL": {
                                                    "value": "@pipeline().parameters.FileShareURL",
                                                    "type": "Expression"
                                                },
                                                "FileSharePassword": {
                                                    "value": "@pipeline().parameters.FileSharePassword",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "BINARY_ADLS",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "File": {
                                                    "value": "@pipeline().parameters.TargetFile",
                                                    "type": "Expression"
                                                },
                                                "Container": {
                                                    "value": "@pipeline().parameters.TargetContainer",
                                                    "type": "Expression"
                                                },
                                                "Folder": {
                                                    "value": "@pipeline().parameters.TargetFolder",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "name": "If-DeleteFile",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "If-File-Exists",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@and(pipeline().parameters.DeleteFile, activity('Get File Metadata').output.exists)",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Delete-File",
                                    "type": "Delete",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "BINARY_FILESERVER",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FileShareUserID": {
                                                    "value": "@pipeline().parameters.FileShareUserID",
                                                    "type": "Expression"
                                                },
                                                "Folder": {
                                                    "value": "@pipeline().parameters.SourceFolder",
                                                    "type": "Expression"
                                                },
                                                "File": {
                                                    "value": "@pipeline().parameters.SourceFile",
                                                    "type": "Expression"
                                                },
                                                "FileShareURL": {
                                                    "value": "@pipeline().parameters.FileShareURL",
                                                    "type": "Expression"
                                                },
                                                "FileSharePassword": {
                                                    "value": "@pipeline().parameters.FileSharePassword",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "enableLogging": false,
                                        "storeSettings": {
                                            "type": "FileServerReadSettings",
                                            "recursive": true
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "parameters": {
                    "TargetFolder": {
                        "type": "string"
                    },
                    "TargetContainer": {
                        "type": "string"
                    },
                    "DeleteFile": {
                        "type": "bool"
                    },
                    "SourceFile": {
                        "type": "string"
                    },
                    "TargetFile": {
                        "type": "string"
                    },
                    "SourceFolder": {
                        "type": "string"
                    },
                    "FileShareURL": {
                        "type": "string"
                    },
                    "FileShareUserID": {
                        "type": "string"
                    },
                    "FileSharePassword": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Utility/fileserver"
                },
                "annotations": [],
                "lastPublishTime": "2021-06-24T12:03:07Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/04-Oracle-Generate-Source-Schema')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Generate Schema",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Set-Owner",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Set-Table",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Set-File",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Set-Folder",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "OracleSource",
                                "oracleReaderQuery": {
                                    "value": "@replace(replace(variables('SQL'), '<<TABLE>>', variables('Table')), '<<OWNER>>', variables('Owner'))",
                                    "type": "Expression"
                                },
                                "partitionOption": "None",
                                "queryTimeout": "02:00:00"
                            },
                            "sink": {
                                "type": "DelimitedTextSink",
                                "storeSettings": {
                                    "type": "AzureBlobStorageWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextWriteSettings",
                                    "quoteAllText": true,
                                    "fileExtension": ".txt"
                                }
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "SRC_Oracle",
                                "type": "DatasetReference",
                                "parameters": {
                                    "kvSecret": {
                                        "value": "@pipeline().parameters.TaskDetails.SourceServer",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "RAW_ADLS_Schema",
                                "type": "DatasetReference",
                                "parameters": {
                                    "BlobPath": {
                                        "value": "@variables('Folder')",
                                        "type": "Expression"
                                    },
                                    "BlobName": {
                                        "value": "@variables('File')",
                                        "type": "Expression"
                                    },
                                    "Compression": "none",
                                    "ColumnDelim": ",",
                                    "HeaderRow": false
                                }
                            }
                        ]
                    },
                    {
                        "name": "Generate Schema Original",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Generate Schema",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "OracleSource",
                                "oracleReaderQuery": {
                                    "value": "@replace(replace(variables('SQL-Original'), '<<TABLE>>', variables('Table')), '<<OWNER>>', variables('Owner'))",
                                    "type": "Expression"
                                },
                                "partitionOption": "None",
                                "queryTimeout": "02:00:00"
                            },
                            "sink": {
                                "type": "DelimitedTextSink",
                                "storeSettings": {
                                    "type": "AzureBlobStorageWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextWriteSettings",
                                    "quoteAllText": true,
                                    "fileExtension": ".txt"
                                }
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "SRC_Oracle",
                                "type": "DatasetReference",
                                "parameters": {
                                    "kvSecret": {
                                        "value": "@pipeline().parameters.TaskDetails.SourceServer",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "RAW_ADLS_Schema",
                                "type": "DatasetReference",
                                "parameters": {
                                    "BlobPath": {
                                        "value": "@concat(variables('Folder'), '/original/')",
                                        "type": "Expression"
                                    },
                                    "BlobName": {
                                        "value": "@concat(variables('File'), '.csv')",
                                        "type": "Expression"
                                    },
                                    "Compression": "none",
                                    "ColumnDelim": ",",
                                    "HeaderRow": true
                                }
                            }
                        ]
                    },
                    {
                        "name": "If-Empty-Delete",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Generate Schema Original",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(activity('Generate Schema').output.rowsCopied, 0)",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Delete-Empty-File",
                                    "type": "Delete",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "BINARY_ADLS",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "File": {
                                                    "value": "@variables('File')",
                                                    "type": "Expression"
                                                },
                                                "Container": "raw",
                                                "Folder": {
                                                    "value": "@variables('Folder')",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "logStorageSettings": {
                                            "linkedServiceName": {
                                                "referenceName": "LS-AzureDataLake",
                                                "type": "LinkedServiceReference"
                                            },
                                            "path": "log"
                                        },
                                        "enableLogging": true,
                                        "storeSettings": {
                                            "type": "AzureBlobStorageReadSettings",
                                            "recursive": true
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Set-Folder",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "Folder",
                            "value": {
                                "value": "@toLower(concat(pipeline().parameters.TaskDetails.SourceGroup, '//', 'schema'))",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Set-File",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "File",
                            "value": {
                                "value": "@toLower(concat(pipeline().parameters.TaskDetails.SourceName, '.', 'schema'))",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Set-Table",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "Table",
                            "value": {
                                "value": "@split(pipeline().parameters.TaskDetails.SourceLocation,'.')[1]",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Set-Owner",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "Owner",
                            "value": {
                                "value": "@split(pipeline().parameters.TaskDetails.SourceLocation,'.')[0]",
                                "type": "Expression"
                            }
                        }
                    }
                ],
                "parameters": {
                    "TaskDetails": {
                        "type": "object"
                    }
                },
                "variables": {
                    "Owner": {
                        "type": "String"
                    },
                    "Table": {
                        "type": "String"
                    },
                    "SQL": {
                        "type": "String",
                        "defaultValue": "SELECT column_name,         CASE           WHEN data_type = 'NUMBER' AND data_scale = 0 THEN 'double'           WHEN data_type = 'NUMBER' AND data_scale > 0 THEN 'double'           WHEN data_type = 'DATE' THEN 'timestamp'           ELSE 'string'         END                              AS fieldtype,         CASE           WHEN data_type = 'DATE' THEN 'DATETIME2'           ELSE data_type         END                              AS data_type,         Nvl(data_precision, data_length) PRECISION,         data_scale                       scale,         table_name                       table_name,         owner                            table_schema  FROM   all_tab_cols  WHERE  table_name = '<<TABLE>>'         AND owner = '<<OWNER>>'         AND hidden_column = 'NO'  \t   "
                    },
                    "SQL-Original": {
                        "type": "String",
                        "defaultValue": "SELECT * FROM all_tab_cols WHERE table_name = '<<TABLE>>' \tAND owner = '<<OWNER>>'"
                    },
                    "Folder": {
                        "type": "String"
                    },
                    "File": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Oracle"
                },
                "annotations": [],
                "lastPublishTime": "2021-06-24T12:03:07Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/04-MySQL-Generate-Source-Schema')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Generate Schema",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Set-Folder",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Set-File",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Set-Table",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Set-Schema",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "MySqlSource",
                                "query": {
                                    "value": "@replace(replace(variables('SQL'), '<<TABLE>>', variables('Table')), '<<SCHEMA>>', variables('Schema'))",
                                    "type": "Expression"
                                }
                            },
                            "sink": {
                                "type": "DelimitedTextSink",
                                "storeSettings": {
                                    "type": "AzureBlobStorageWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextWriteSettings",
                                    "quoteAllText": true,
                                    "fileExtension": ".txt"
                                }
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "SRC_MySQL",
                                "type": "DatasetReference",
                                "parameters": {
                                    "kvSecret": {
                                        "value": "@pipeline().parameters.TaskDetails.SourceServer",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "RAW_ADLS_Schema",
                                "type": "DatasetReference",
                                "parameters": {
                                    "BlobPath": {
                                        "value": "@variables('Folder')",
                                        "type": "Expression"
                                    },
                                    "BlobName": {
                                        "value": "@variables('File')",
                                        "type": "Expression"
                                    },
                                    "Compression": "none",
                                    "ColumnDelim": ",",
                                    "HeaderRow": false
                                }
                            }
                        ]
                    },
                    {
                        "name": "Generate Schema Original",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Generate Schema",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "MySqlSource",
                                "query": {
                                    "value": "@replace(replace(variables('SQL-Original'), '<<TABLE>>', variables('Table')), '<<SCHEMA>>', variables('Schema'))",
                                    "type": "Expression"
                                }
                            },
                            "sink": {
                                "type": "DelimitedTextSink",
                                "storeSettings": {
                                    "type": "AzureBlobStorageWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextWriteSettings",
                                    "quoteAllText": true,
                                    "fileExtension": ".txt"
                                }
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "SRC_MySQL",
                                "type": "DatasetReference",
                                "parameters": {
                                    "kvSecret": {
                                        "value": "@pipeline().parameters.TaskDetails.SourceServer",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "RAW_ADLS_Schema",
                                "type": "DatasetReference",
                                "parameters": {
                                    "BlobPath": {
                                        "value": "@concat(variables('Folder'), '/original/')",
                                        "type": "Expression"
                                    },
                                    "BlobName": {
                                        "value": "@concat(variables('File'), '.csv')",
                                        "type": "Expression"
                                    },
                                    "Compression": "none",
                                    "ColumnDelim": ",",
                                    "HeaderRow": true
                                }
                            }
                        ]
                    },
                    {
                        "name": "Set-Folder",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "Folder",
                            "value": {
                                "value": "@toLower(concat(pipeline().parameters.TaskDetails.SourceGroup, '//', 'schema'))",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Set-File",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "File",
                            "value": {
                                "value": "@toLower(concat(pipeline().parameters.TaskDetails.SourceName, '.', 'schema'))",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "If-Empty-Delete",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Generate Schema Original",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(activity('Generate Schema').output.rowsCopied, 0)",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Delete-Empty-File",
                                    "type": "Delete",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "BINARY_ADLS",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "File": {
                                                    "value": "@variables('File')",
                                                    "type": "Expression"
                                                },
                                                "Container": "raw",
                                                "Folder": {
                                                    "value": "@variables('Folder')",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "logStorageSettings": {
                                            "linkedServiceName": {
                                                "referenceName": "LS-AzureDataLake",
                                                "type": "LinkedServiceReference"
                                            },
                                            "path": "log"
                                        },
                                        "enableLogging": true,
                                        "storeSettings": {
                                            "type": "AzureBlobStorageReadSettings",
                                            "recursive": true
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Set-Table",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "Table",
                            "value": {
                                "value": "@split(pipeline().parameters.TaskDetails.SourceLocation,'.')[1]",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Set-Schema",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "Schema",
                            "value": {
                                "value": "@split(pipeline().parameters.TaskDetails.SourceLocation,'.')[0]",
                                "type": "Expression"
                            }
                        }
                    }
                ],
                "parameters": {
                    "TaskDetails": {
                        "type": "object"
                    }
                },
                "variables": {
                    "Schema": {
                        "type": "String"
                    },
                    "Table": {
                        "type": "String"
                    },
                    "SQL": {
                        "type": "String",
                        "defaultValue": "SELECT column_name,     CASE \t\tWHEN data_type = 'bit' THEN 'boolean' \t\tWHEN data_type = 'bigint' THEN 'long' \t\tWHEN data_type IN ( 'int', 'smallint', 'tinyint', 'mediumint' ) THEN 'integer' \t\tWHEN data_type IN ( 'float', 'double', 'money', 'smallmoney' ) THEN 'double' \t\tWHEN data_type IN ( 'numeric', 'decimal' ) THEN 'decimal'  \t\tWHEN data_type IN ( 'nvarchar', 'varchar', 'char', 'nchar' ) THEN 'string' \t\tWHEN data_type IN ( 'date', 'datetime', 'datetime2', 'smalldatetime') THEN 'timestamp' \t\tELSE 'string'          \tEND AS fieldtype,     convert(case when data_type = 'mediumint' then 'int' else data_type end, char(100)) as data_type,     COALESCE(datetime_precision, numeric_precision, character_maximum_length) 'precision',     numeric_scale scale, \ttable_name, \ttable_schema FROM information_schema.columns   WHERE table_name = '<<TABLE>>'          AND table_schema = '<<SCHEMA>>'  ORDER BY ORDINAL_POSITION"
                    },
                    "SQL-Original": {
                        "type": "String",
                        "defaultValue": "SELECT * FROM information_schema.columns   WHERE table_name = '<<TABLE>>'          AND table_schema = '<<SCHEMA>>'  ORDER BY ORDINAL_POSITION"
                    },
                    "Folder": {
                        "type": "String"
                    },
                    "File": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "MySQL"
                },
                "annotations": [],
                "lastPublishTime": "2021-06-24T12:03:07Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/04-SQLServer-Generate-Source-Schema')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Generate Schema",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Set-Schema",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Set-Table",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Set-File",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Set-Folder",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlServerSource",
                                "sqlReaderQuery": {
                                    "value": "@replace(replace(variables('SQL'), '<<TABLE>>', variables('Table')), '<<SCHEMA>>', variables('Schema'))",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "DelimitedTextSink",
                                "storeSettings": {
                                    "type": "AzureBlobStorageWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextWriteSettings",
                                    "quoteAllText": true,
                                    "fileExtension": ".txt"
                                }
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "SRC_SQLServer",
                                "type": "DatasetReference",
                                "parameters": {
                                    "kvSecret": {
                                        "value": "@pipeline().parameters.TaskDetails.SourceServer",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "RAW_ADLS_Schema",
                                "type": "DatasetReference",
                                "parameters": {
                                    "BlobPath": {
                                        "value": "@variables('Folder')",
                                        "type": "Expression"
                                    },
                                    "BlobName": {
                                        "value": "@variables('File')",
                                        "type": "Expression"
                                    },
                                    "Compression": "none",
                                    "ColumnDelim": ",",
                                    "HeaderRow": false
                                }
                            }
                        ]
                    },
                    {
                        "name": "Generate Schema Original",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Generate Schema",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlServerSource",
                                "sqlReaderQuery": {
                                    "value": "@replace(replace(variables('SQL-Original'), '<<TABLE>>', variables('Table')), '<<SCHEMA>>', variables('Schema'))",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "DelimitedTextSink",
                                "storeSettings": {
                                    "type": "AzureBlobStorageWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextWriteSettings",
                                    "quoteAllText": true,
                                    "fileExtension": ".txt"
                                }
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "SRC_SQLServer",
                                "type": "DatasetReference",
                                "parameters": {
                                    "kvSecret": {
                                        "value": "@pipeline().parameters.TaskDetails.SourceServer",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "RAW_ADLS_Schema",
                                "type": "DatasetReference",
                                "parameters": {
                                    "BlobPath": {
                                        "value": "@concat(variables('Folder'), '/original/')",
                                        "type": "Expression"
                                    },
                                    "BlobName": {
                                        "value": "@concat(variables('File'), '.csv')",
                                        "type": "Expression"
                                    },
                                    "Compression": "none",
                                    "ColumnDelim": ",",
                                    "HeaderRow": true
                                }
                            }
                        ]
                    },
                    {
                        "name": "If-Empty-Delete",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Generate Schema Original",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(activity('Generate Schema').output.rowsCopied, 0)",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Delete-Empty-File",
                                    "type": "Delete",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "BINARY_ADLS",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "File": {
                                                    "value": "@variables('File')",
                                                    "type": "Expression"
                                                },
                                                "Container": "raw",
                                                "Folder": {
                                                    "value": "@variables('Folder')",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "logStorageSettings": {
                                            "linkedServiceName": {
                                                "referenceName": "LS-AzureDataLake",
                                                "type": "LinkedServiceReference"
                                            },
                                            "path": "log"
                                        },
                                        "enableLogging": true,
                                        "storeSettings": {
                                            "type": "AzureBlobStorageReadSettings",
                                            "recursive": true
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Set-Folder",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "Folder",
                            "value": {
                                "value": "@toLower(concat(pipeline().parameters.TaskDetails.SourceGroup, '//', 'schema'))",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Set-File",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "File",
                            "value": {
                                "value": "@toLower(concat(pipeline().parameters.TaskDetails.SourceName, '.', 'schema'))",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Set-Table",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "Table",
                            "value": {
                                "value": "@split(pipeline().parameters.TaskDetails.SourceLocation,'.')[1]",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Set-Schema",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "Schema",
                            "value": {
                                "value": "@split(pipeline().parameters.TaskDetails.SourceLocation,'.')[0]",
                                "type": "Expression"
                            }
                        }
                    }
                ],
                "parameters": {
                    "TaskDetails": {
                        "type": "object"
                    }
                },
                "variables": {
                    "Schema": {
                        "type": "String"
                    },
                    "Table": {
                        "type": "String"
                    },
                    "SQL": {
                        "type": "String",
                        "defaultValue": "SELECT column_name,     CASE \t\tWHEN data_type = 'bit' THEN 'boolean' \t\tWHEN data_type = 'bigint' THEN 'long' \t\tWHEN data_type IN ( 'int', 'smallint' ) THEN 'integer' \t\tWHEN data_type IN ( 'float', 'double', 'money', 'smallmoney' ) THEN 'double' \t\tWHEN data_type IN ( 'numeric' ) THEN 'decimal'  \t\tWHEN data_type IN ( 'nvarchar', 'varchar', 'char', 'nchar' ) THEN 'string' \t\tWHEN data_type IN ( 'date', 'datetime', 'datetime2', 'smalldatetime') THEN 'timestamp' \t\tELSE 'string'          \tEND AS fieldtype,     data_type,     COALESCE(datetime_precision, numeric_precision, character_maximum_length) precision,     numeric_scale scale, \ttable_name, \ttable_schema FROM information_schema.columns   WHERE table_name = '<<TABLE>>'          AND table_schema = '<<SCHEMA>>'  ORDER BY ORDINAL_POSITION"
                    },
                    "SQL-Original": {
                        "type": "String",
                        "defaultValue": "SELECT * FROM information_schema.columns WHERE table_name = '<<TABLE>>' AND table_schema = '<<SCHEMA>>'"
                    },
                    "Folder": {
                        "type": "String"
                    },
                    "File": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "SQL Server"
                },
                "annotations": [],
                "lastPublishTime": "2021-06-24T12:03:07Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/04-SQLAzure-Generate-Source-Schema')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Generate Schema",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Set-Schema",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Set-Table",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Set-File",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Set-Folder",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlServerSource",
                                "sqlReaderQuery": {
                                    "value": "@replace(replace(variables('SQL'), '<<TABLE>>', variables('Table')), '<<SCHEMA>>', variables('Schema'))",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "DelimitedTextSink",
                                "storeSettings": {
                                    "type": "AzureBlobStorageWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextWriteSettings",
                                    "quoteAllText": true,
                                    "fileExtension": ".txt"
                                }
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "SRC_SQLAzure",
                                "type": "DatasetReference",
                                "parameters": {
                                    "kvSecret": {
                                        "value": "@pipeline().parameters.TaskDetails.SourceServer",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "RAW_ADLS_Schema",
                                "type": "DatasetReference",
                                "parameters": {
                                    "BlobPath": {
                                        "value": "@variables('Folder')",
                                        "type": "Expression"
                                    },
                                    "BlobName": {
                                        "value": "@variables('File')",
                                        "type": "Expression"
                                    },
                                    "Compression": "none",
                                    "ColumnDelim": ",",
                                    "HeaderRow": false
                                }
                            }
                        ]
                    },
                    {
                        "name": "Generate Schema Original",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Generate Schema",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlServerSource",
                                "sqlReaderQuery": {
                                    "value": "@replace(replace(variables('SQL-Original'), '<<TABLE>>', variables('Table')), '<<SCHEMA>>', variables('Schema'))",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "DelimitedTextSink",
                                "storeSettings": {
                                    "type": "AzureBlobStorageWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextWriteSettings",
                                    "quoteAllText": true,
                                    "fileExtension": ".txt"
                                }
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "SRC_SQLAzure",
                                "type": "DatasetReference",
                                "parameters": {
                                    "kvSecret": {
                                        "value": "@pipeline().parameters.TaskDetails.SourceServer",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "RAW_ADLS_Schema",
                                "type": "DatasetReference",
                                "parameters": {
                                    "BlobPath": {
                                        "value": "@concat(variables('Folder'), '/original/')",
                                        "type": "Expression"
                                    },
                                    "BlobName": {
                                        "value": "@concat(variables('File'), '.csv')",
                                        "type": "Expression"
                                    },
                                    "Compression": "none",
                                    "ColumnDelim": ",",
                                    "HeaderRow": true
                                }
                            }
                        ]
                    },
                    {
                        "name": "If-Empty-Delete",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Generate Schema Original",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(activity('Generate Schema').output.rowsCopied, 0)",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Delete-Empty-File",
                                    "type": "Delete",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "BINARY_ADLS",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "File": {
                                                    "value": "@variables('File')",
                                                    "type": "Expression"
                                                },
                                                "Container": "raw",
                                                "Folder": {
                                                    "value": "@variables('Folder')",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "logStorageSettings": {
                                            "linkedServiceName": {
                                                "referenceName": "LS-AzureDataLake",
                                                "type": "LinkedServiceReference"
                                            },
                                            "path": "log"
                                        },
                                        "enableLogging": true,
                                        "storeSettings": {
                                            "type": "AzureBlobStorageReadSettings",
                                            "recursive": true
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Set-Folder",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "Folder",
                            "value": {
                                "value": "@toLower(concat(pipeline().parameters.TaskDetails.SourceGroup, '//', 'schema'))",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Set-File",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "File",
                            "value": {
                                "value": "@toLower(concat(pipeline().parameters.TaskDetails.SourceName, '.', 'schema'))",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Set-Table",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "Table",
                            "value": {
                                "value": "@split(pipeline().parameters.TaskDetails.SourceLocation,'.')[1]",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Set-Schema",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "Schema",
                            "value": {
                                "value": "@split(pipeline().parameters.TaskDetails.SourceLocation,'.')[0]",
                                "type": "Expression"
                            }
                        }
                    }
                ],
                "parameters": {
                    "TaskDetails": {
                        "type": "object"
                    }
                },
                "variables": {
                    "Schema": {
                        "type": "String"
                    },
                    "Table": {
                        "type": "String"
                    },
                    "SQL": {
                        "type": "String",
                        "defaultValue": "SELECT column_name,     CASE \t\tWHEN data_type = 'bit' THEN 'boolean' \t\tWHEN data_type = 'bigint' THEN 'long' \t\tWHEN data_type IN ( 'int', 'smallint' ) THEN 'integer' \t\tWHEN data_type IN ( 'float', 'double', 'money', 'smallmoney' ) THEN 'double' \t\tWHEN data_type IN ( 'numeric' ) THEN 'decimal'  \t\tWHEN data_type IN ( 'nvarchar', 'varchar', 'char', 'nchar' ) THEN 'string' \t\tWHEN data_type IN ( 'date', 'datetime', 'datetime2', 'smalldatetime') THEN 'timestamp' \t\tELSE 'string'          \tEND AS fieldtype,     data_type,     COALESCE(datetime_precision, numeric_precision, character_maximum_length) precision,     numeric_scale scale, \ttable_name, \ttable_schema FROM information_schema.columns   WHERE table_name = '<<TABLE>>'          AND table_schema = '<<SCHEMA>>'  ORDER BY ORDINAL_POSITION"
                    },
                    "SQL-Original": {
                        "type": "String",
                        "defaultValue": "SELECT * FROM information_schema.columns WHERE table_name = '<<TABLE>>' AND table_schema = '<<SCHEMA>>'"
                    },
                    "Folder": {
                        "type": "String"
                    },
                    "File": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "SQL Azure"
                },
                "annotations": [],
                "lastPublishTime": "2021-06-28T02:27:16Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/recon-target')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "If-Exists",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "LU-GetSourceID",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@contains(activity('LU-GetSourceID').output,'firstRow')",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Get-SQL",
                                    "type": "Lookup",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "AzureSqlSource",
                                            "sqlReaderStoredProcedureName": "[[CTL].[GetTableDetails]",
                                            "storedProcedureParameters": {
                                                "SourceId": {
                                                    "type": "Int64",
                                                    "value": {
                                                        "value": "@activity('LU-GetSourceID').output.firstRow.SourceID",
                                                        "type": "Expression"
                                                    }
                                                },
                                                "ValidationType": {
                                                    "type": "String",
                                                    "value": "TARGET"
                                                }
                                            },
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "AzureSqlDatabase_Ctrldb",
                                            "type": "DatasetReference",
                                            "parameters": {}
                                        }
                                    }
                                },
                                {
                                    "name": "Get-Values",
                                    "type": "Lookup",
                                    "dependsOn": [
                                        {
                                            "activity": "Get-SQL",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "AzureSqlSource",
                                            "sqlReaderQuery": {
                                                "value": "@activity('Get-SQL').output.firstrow.SQLStatement",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "SRC_AzureSqlDatabase",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "kvSecret": {
                                                    "value": "AzureSqlDatabase-SQLDB",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "firstRowOnly": true
                                    }
                                },
                                {
                                    "name": "EP-Record-Validation",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [
                                        {
                                            "activity": "Get-Values",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "recon-record-validation",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "ProjectRunID": {
                                                "value": "@pipeline().parameters.ProjectRunID",
                                                "type": "Expression"
                                            },
                                            "ValidationDetails": {
                                                "value": "@activity('Get-Values').output.firstRow",
                                                "type": "Expression"
                                            },
                                            "SourceID": {
                                                "value": "@activity('LU-GetSourceID').output.firstRow.SourceID",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "LU-GetSourceID",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "@concat('SELECT SourceId FROM CTL.vw_ControlConfiguration WHERE TaskName = ''', pipeline().parameters.SourceName, ''' AND ControlStageID = 1')",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "AzureSqlDatabase_Ctrldb",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        }
                    }
                ],
                "parameters": {
                    "ProjectID": {
                        "type": "int",
                        "defaultValue": 1
                    },
                    "ProjectRunID": {
                        "type": "string",
                        "defaultValue": "c1ff545d-e875-4b1b-a579-975f86dbaf21"
                    },
                    "SourceName": {
                        "type": "string",
                        "defaultValue": "OneEBS_EBS_0165_LOCATIONS"
                    }
                },
                "folder": {
                    "name": "Validation"
                },
                "annotations": [],
                "lastPublishTime": "2021-06-24T12:03:07Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/recon-record-validation')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/05-DL-A-Load-Raw-to-Trusted-Zone')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "LU-Manifest",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderStoredProcedureName": "[[CTL].[GetManifestTrusted]",
                                "storedProcedureParameters": {
                                    "SourceObject": {
                                        "type": "String",
                                        "value": {
                                            "value": "@pipeline().parameters.TaskDetails.SourceName",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "AzureSqlDatabase_Ctrldb",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Log Success",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "If-LoadToSqlEDW",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[CTL].[UpdateTaskLog]",
                            "storedProcedureParameters": {
                                "BatchLogId": {
                                    "value": {
                                        "value": "@pipeline().parameters.BatchLogId",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "ErrorMessage": {
                                    "value": null,
                                    "type": "String"
                                },
                                "ExecutionLogId": {
                                    "value": {
                                        "value": "@pipeline().parameters.TaskExecutionLogId",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "Output": {
                                    "value": {
                                        "value": "@pipeline().parameters.TaskDetails.LastLoadedFile",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "Status": {
                                    "value": "Success",
                                    "type": "String"
                                },
                                "TaskId": {
                                    "value": {
                                        "value": "@pipeline().parameters.TaskDetails.TaskId",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS-AzureSqlDatabase_Ctrldb",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "kvSecret": "AzureSqlDatabase-ControlDB"
                            }
                        }
                    },
                    {
                        "name": "Log Failure DL Trusted",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Loop Manifest",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[CTL].[UpdateTaskLog]",
                            "storedProcedureParameters": {
                                "BatchLogId": {
                                    "value": {
                                        "value": "@pipeline().parameters.BatchLogId",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "ErrorMessage": {
                                    "value": {
                                        "value": "Error Occurred during Trusted Zone load",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ExecutionLogId": {
                                    "value": {
                                        "value": "@pipeline().parameters.TaskExecutionLogId",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                },
                                "Output": {
                                    "value": null,
                                    "type": "String"
                                },
                                "Status": {
                                    "value": "Failure",
                                    "type": "String"
                                },
                                "TaskId": {
                                    "value": {
                                        "value": "@pipeline().parameters.TaskDetails.TaskId",
                                        "type": "Expression"
                                    },
                                    "type": "Int64"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS-AzureSqlDatabase_Ctrldb",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "kvSecret": "AzureSqlDatabase-ControlDB"
                            }
                        }
                    },
                    {
                        "name": "Loop Manifest",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "LU-Manifest",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('LU-Manifest').output.value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "SP-UpdateManifest",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "If-ClusterType",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[CTL].[UpdateManifestDLTrusted]",
                                        "storedProcedureParameters": {
                                            "BatchExecutionLogID": {
                                                "value": {
                                                    "value": "@item().BatchExecutionLogID",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "SourceObject": {
                                                "value": {
                                                    "value": "@item().SourceObject",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "StartCounter": {
                                                "value": {
                                                    "value": "@item().StartCounter",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "PipelineRunID": {
                                                "value": {
                                                    "value": "@pipeline().RunId",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS-AzureSqlDatabase_Ctrldb",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "kvSecret": "AzureSqlDatabase-ControlDB"
                                        }
                                    }
                                },
                                {
                                    "name": "If-ClusterType",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Set-ClusterType",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@equals(variables('ClusterType'), 'interactive')",
                                            "type": "Expression"
                                        },
                                        "ifFalseActivities": [
                                            {
                                                "name": "Load-To-Trusted-Zone-Job",
                                                "type": "DatabricksNotebook",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "notebookPath": {
                                                        "value": "@pipeline().parameters.TaskDetails.Command",
                                                        "type": "Expression"
                                                    },
                                                    "baseParameters": {
                                                        "source_object": {
                                                            "value": "@pipeline().parameters.TaskDetails.SourceName",
                                                            "type": "Expression"
                                                        },
                                                        "start_counter": {
                                                            "value": "@item().StartCounter",
                                                            "type": "Expression"
                                                        },
                                                        "end_counter": {
                                                            "value": "@item().EndCounter",
                                                            "type": "Expression"
                                                        },
                                                        "delta_column": {
                                                            "value": "@item().DeltaColumn",
                                                            "type": "Expression"
                                                        },
                                                        "source_param": {
                                                            "value": "@string(pipeline().parameters.TaskDetails)",
                                                            "type": "Expression"
                                                        }
                                                    },
                                                    "libraries": [
                                                        {
                                                            "maven": {
                                                                "coordinates": "com.microsoft.azure:azure-sqldb-spark:1.0.2"
                                                            }
                                                        }
                                                    ]
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "LS-AzureDatabricks_JobCluster",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "kvSecret": {
                                                            "value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
                                                            "type": "Expression"
                                                        },
                                                        "DataBricksClusterType": {
                                                            "value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[2]",
                                                            "type": "Expression"
                                                        },
                                                        "DataBricksClusterVersion": {
                                                            "value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[3]",
                                                            "type": "Expression"
                                                        },
                                                        "DataBricksWorkerNodes": {
                                                            "value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[4]",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Set-ReturnValue-Job",
                                                "type": "SetVariable",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Load-To-Trusted-Zone-Job",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "ReturnValue",
                                                    "value": {
                                                        "value": "@string(activity('Load-To-Trusted-Zone-Job').output.runOutput)",
                                                        "type": "Expression"
                                                    }
                                                }
                                            }
                                        ],
                                        "ifTrueActivities": [
                                            {
                                                "name": "Load-To-Trusted-Zone-Interactive",
                                                "type": "DatabricksNotebook",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "notebookPath": {
                                                        "value": "@pipeline().parameters.TaskDetails.Command",
                                                        "type": "Expression"
                                                    },
                                                    "baseParameters": {
                                                        "source_object": {
                                                            "value": "@pipeline().parameters.TaskDetails.SourceName",
                                                            "type": "Expression"
                                                        },
                                                        "start_counter": {
                                                            "value": "@item().StartCounter",
                                                            "type": "Expression"
                                                        },
                                                        "end_counter": {
                                                            "value": "@item().EndCounter",
                                                            "type": "Expression"
                                                        },
                                                        "delta_column": {
                                                            "value": "@item().DeltaColumn",
                                                            "type": "Expression"
                                                        },
                                                        "source_param": {
                                                            "value": "@string(pipeline().parameters.TaskDetails)",
                                                            "type": "Expression"
                                                        }
                                                    },
                                                    "libraries": [
                                                        {
                                                            "maven": {
                                                                "coordinates": "com.microsoft.azure:azure-sqldb-spark:1.0.2"
                                                            }
                                                        }
                                                    ]
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "LS-AzureDatabricks_DefinedCluster",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "kvSecret": {
                                                            "value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
                                                            "type": "Expression"
                                                        },
                                                        "clusterId": {
                                                            "value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[1]",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Set-Return-Interactive",
                                                "type": "SetVariable",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Load-To-Trusted-Zone-Interactive",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "ReturnValue",
                                                    "value": {
                                                        "value": "@string(activity('Load-To-Trusted-Zone-Interactive').output.runOutput)",
                                                        "type": "Expression"
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "Set-ClusterType",
                                    "type": "SetVariable",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "ClusterType",
                                        "value": {
                                            "value": "@toLower(last(split(pipeline().parameters.TaskDetails.Processor,'|')))",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "If-LoadToSqlEDW",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "If-SoftDelete",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@pipeline().parameters.TaskDetails.LoadToSqlEDW",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "EP-DataLake-SQLEDW",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "05-DL-B-Load-Trusted-To-SQLEDW",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "TaskDetails": {
                                                "value": "@pipeline().parameters.TaskDetails",
                                                "type": "Expression"
                                            },
                                            "BatchLogId": {
                                                "value": "@pipeline().parameters.BatchLogId",
                                                "type": "Expression"
                                            },
                                            "TaskExecutionLogId": {
                                                "value": "@pipeline().parameters.TaskExecutionLogId",
                                                "type": "Expression"
                                            },
                                            "ProjectRunID": {
                                                "value": "@pipeline().parameters.ProjectRunID",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "Log Failure SQLEDW",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "EP-DataLake-SQLEDW",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[CTL].[UpdateTaskLog]",
                                        "storedProcedureParameters": {
                                            "BatchLogId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.BatchLogId",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "ErrorMessage": {
                                                "value": {
                                                    "value": "Error Occurred during SQLEDW load",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ExecutionLogId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.TaskExecutionLogId",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "Output": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "Status": {
                                                "value": "Failure",
                                                "type": "String"
                                            },
                                            "TaskId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.TaskDetails.TaskId",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS-AzureSqlDatabase_Ctrldb",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "kvSecret": "AzureSqlDatabase-ControlDB"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "If-SoftDelete",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Loop Manifest",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@not(equals(pipeline().parameters.TaskDetails.SoftDeleteSource, ''))",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "EP-Update-Deleted",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "05-DL-C-Update-Trusted-Deleted",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "TaskDetails": {
                                                "value": "@pipeline().parameters.TaskDetails",
                                                "type": "Expression"
                                            },
                                            "BatchLogId": {
                                                "value": "@pipeline().parameters.BatchLogId",
                                                "type": "Expression"
                                            },
                                            "TaskExecutionLogId": {
                                                "value": "@pipeline().parameters.TaskExecutionLogId",
                                                "type": "Expression"
                                            },
                                            "ProjectRunID": {
                                                "value": "@pipeline().parameters.ProjectRunID",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "Log Failure Deleted",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "EP-Update-Deleted",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[CTL].[UpdateTaskLog]",
                                        "storedProcedureParameters": {
                                            "BatchLogId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.BatchLogId",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "ErrorMessage": {
                                                "value": {
                                                    "value": "Error Occurred during Trusted Deleted",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ExecutionLogId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.TaskExecutionLogId",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            },
                                            "Output": {
                                                "value": null,
                                                "type": "String"
                                            },
                                            "Status": {
                                                "value": "Failure",
                                                "type": "String"
                                            },
                                            "TaskId": {
                                                "value": {
                                                    "value": "@pipeline().parameters.TaskDetails.TaskId",
                                                    "type": "Expression"
                                                },
                                                "type": "Int64"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "LS-AzureSqlDatabase_Ctrldb",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "kvSecret": "AzureSqlDatabase-ControlDB"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "parameters": {
                    "TaskDetails": {
                        "type": "object"
                    },
                    "BatchLogId": {
                        "type": "int"
                    },
                    "TaskExecutionLogId": {
                        "type": "int"
                    },
                    "ProjectRunID": {
                        "type": "string"
                    }
                },
                "variables": {
                    "ReturnValue": {
                        "type": "String"
                    },
                    "ClusterType": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Data Lake"
                },
                "annotations": [],
                "lastPublishTime": "2021-06-24T12:03:07Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/05-DL-B-Load-Trusted-To-SQLEDW')]",
                "[concat(variables('factoryId'), '/pipelines/05-DL-C-Update-Trusted-Deleted')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/util-fileserver-upload-folder')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Get-Files",
                        "type": "GetMetadata",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "BINARY_ADLS",
                                "type": "DatasetReference",
                                "parameters": {
                                    "File": {
                                        "value": "@pipeline().parameters.FileType",
                                        "type": "Expression"
                                    },
                                    "Container": {
                                        "value": "@pipeline().parameters.SourceContainer",
                                        "type": "Expression"
                                    },
                                    "Folder": {
                                        "value": "@pipeline().parameters.SourceFolder",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "fieldList": [
                                "childItems"
                            ],
                            "storeSettings": {
                                "type": "AzureBlobStorageReadSettings",
                                "recursive": true
                            },
                            "formatSettings": {
                                "type": "BinaryReadSettings"
                            }
                        }
                    },
                    {
                        "name": "ForEach-CopyFiles",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get-Files",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get-Files').output.childItems",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "If-File-Copy",
                                    "type": "IfCondition",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@equals(item().type, 'File')",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "EP-Upload-File",
                                                "type": "ExecutePipeline",
                                                "dependsOn": [],
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "pipeline": {
                                                        "referenceName": "util-fileserver-upload-file",
                                                        "type": "PipelineReference"
                                                    },
                                                    "waitOnCompletion": true,
                                                    "parameters": {
                                                        "SourceContainer": {
                                                            "value": "@pipeline().parameters.SourceContainer",
                                                            "type": "Expression"
                                                        },
                                                        "SourceFolder": {
                                                            "value": "@pipeline().parameters.SourceFolder",
                                                            "type": "Expression"
                                                        },
                                                        "FileName": {
                                                            "value": "@item().name",
                                                            "type": "Expression"
                                                        },
                                                        "UploadFolder": {
                                                            "value": "@pipeline().parameters.TargetFolder",
                                                            "type": "Expression"
                                                        },
                                                        "FileShareURL": {
                                                            "value": "@pipeline().parameters.FileShareURL",
                                                            "type": "Expression"
                                                        },
                                                        "FileShareUserID": {
                                                            "value": "@pipeline().parameters.FileShareUserID",
                                                            "type": "Expression"
                                                        },
                                                        "FileSharePassword": {
                                                            "value": "@pipeline().parameters.FileSharePassword",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ],
                "parameters": {
                    "FileType": {
                        "type": "string"
                    },
                    "SourceContainer": {
                        "type": "string"
                    },
                    "SourceFolder": {
                        "type": "string"
                    },
                    "TargetFolder": {
                        "type": "string"
                    },
                    "FileShareURL": {
                        "type": "string"
                    },
                    "FileShareUserID": {
                        "type": "string"
                    },
                    "FileSharePassword": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Utility/fileserver"
                },
                "annotations": [],
                "lastPublishTime": "2021-06-24T12:03:07Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/util-fileserver-upload-file')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/06-Curated-Qualtrics')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Get-Files",
                        "type": "GetMetadata",
                        "dependsOn": [
                            {
                                "activity": "Set-ReportFolder",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Set-FileShareUserID",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Set-FileShareURL",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Set-FileSharePassword",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "BINARY_ADLS",
                                "type": "DatasetReference",
                                "parameters": {
                                    "File": "CX*.txt",
                                    "Container": {
                                        "value": "@variables('SourceContainer')",
                                        "type": "Expression"
                                    },
                                    "Folder": {
                                        "value": "@variables('ReportFolder')",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "fieldList": [
                                "childItems"
                            ],
                            "storeSettings": {
                                "type": "AzureBlobStorageReadSettings",
                                "recursive": true
                            },
                            "formatSettings": {
                                "type": "BinaryReadSettings"
                            }
                        }
                    },
                    {
                        "name": "Set-ReportFolder",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "ReportFolder",
                            "value": {
                                "value": "@concat('qualtrics/reports/', pipeline().parameters.NotebookOutput)",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "ForEach-CopyFiles",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get-Files",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get-Files').output.childItems",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "EP-Upload-File",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "util-fileserver-upload-file",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "SourceContainer": {
                                                "value": "@variables('SourceContainer')",
                                                "type": "Expression"
                                            },
                                            "SourceFolder": {
                                                "value": "@variables('ReportFolder')",
                                                "type": "Expression"
                                            },
                                            "FileName": {
                                                "value": "@item().name",
                                                "type": "Expression"
                                            },
                                            "UploadFolder": {
                                                "value": "@variables('UploadFolder')",
                                                "type": "Expression"
                                            },
                                            "FileShareURL": {
                                                "value": "@variables('FileShareURL')",
                                                "type": "Expression"
                                            },
                                            "FileShareUserID": {
                                                "value": "@variables('FileShareUserID')",
                                                "type": "Expression"
                                            },
                                            "FileSharePassword": {
                                                "value": "@variables('FileSharePassword')",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Set-FileShareUserID",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "FileShareUserID",
                            "value": {
                                "value": "123\n/*@pipeline().globalParameters.FileServerUserID*/",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Set-FileShareURL",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "FileShareURL",
                            "value": {
                                "value": "@split(pipeline().parameters.TaskDetails.SourceServer,'|')[0]",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Set-FileSharePassword",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "FileSharePassword",
                            "value": {
                                "value": "@split(pipeline().parameters.TaskDetails.SourceServer,'|')[2]",
                                "type": "Expression"
                            }
                        }
                    }
                ],
                "parameters": {
                    "TaskDetails": {
                        "type": "object",
                        "defaultValue": {
                            "SourceType": "BLOB Storage (csv)",
                            "SourceServer": "datalake-SasToken",
                            "SourceName": "Qualtrics_Qualtrics",
                            "SourceLocation": "Qualtrics",
                            "AdditionalProperty": "",
                            "Processor": "databricks-token|0925-064956-carps143|Standard_DS5_v2|6.4.x-scala2.11|2:8|interactive",
                            "ProjectName": "Qualtrics1",
                            "TargetType": "SQL Server",
                            "TargetName": "Qualtrics_Qualtrics",
                            "TargetLocation": "Qualtrics",
                            "TargetServer": "AzureSqlDatabase-SQLDB",
                            "DataLoadMode": "0",
                            "DeltaExtract": null,
                            "CDCSource": null,
                            "TruncateTarget": null,
                            "UpsertTarget": null,
                            "TrackChanges": false,
                            "LoadToSqlEDW": true,
                            "TaskName": "Qualtrics_Qualtrics",
                            "ControlStageId": 3,
                            "TaskId": 813,
                            "StageSequence": 300,
                            "StageName": "Trusted to Curated",
                            "SourceId": 851,
                            "TargetId": 830,
                            "ObjectGrain": "Day",
                            "CommandTypeId": 8,
                            "Watermarks": null,
                            "WatermarksDT": null,
                            "WatermarkColumn": "",
                            "BusinessKeyColumn": "",
                            "Command": "/Users/rahul.agrawal1@tafenswtest.edu.au/build/curated/Qualtrics/QualtricsMaster-Test",
                            "LastLoadedFile": null
                        }
                    },
                    "NotebookOutput": {
                        "type": "string",
                        "defaultValue": "year=2020/month=10/day=14/hour=22/minute=58/"
                    }
                },
                "variables": {
                    "ReportFolder": {
                        "type": "String"
                    },
                    "SourceContainer": {
                        "type": "String",
                        "defaultValue": "curated"
                    },
                    "UploadFolder": {
                        "type": "String",
                        "defaultValue": "out/qualtrics"
                    },
                    "FileShareURL": {
                        "type": "String",
                        "defaultValue": "FileServer-URL"
                    },
                    "FileShareUserID": {
                        "type": "String"
                    },
                    "FileSharePassword": {
                        "type": "String",
                        "defaultValue": "FileServer-ServiceAccount-Password"
                    }
                },
                "folder": {
                    "name": "Curated"
                },
                "annotations": [],
                "lastPublishTime": "2021-06-24T12:03:07Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/util-fileserver-upload-file')]"
            ]
        }
    ]
}
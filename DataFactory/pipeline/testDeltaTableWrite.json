{
	"name": "testDeltaTableWrite",
	"properties": {
		"activities": [
			{
				"name": "Copy-Source-DataLake",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "SP-Record-Manifest_copy1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlServerSource",
						"sqlReaderQuery": {
							"value": "@concat(pipeline().parameters.DeltaSql,' WHERE ?AdfDynamicRangePartitionCondition')",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "DynamicRange",
						"partitionSettings": {
							"partitionColumnName": "BELNR_INT",
							"partitionUpperBound": "",
							"partitionLowerBound": ""
						}
					},
					"sink": {
						"type": "AzureDatabricksDeltaLakeSink",
						"importSettings": {
							"type": "AzureDatabricksDeltaLakeImportCommand"
						}
					},
					"enableStaging": true,
					"stagingSettings": {
						"linkedServiceName": {
							"referenceName": "LS_AzureDatalake",
							"type": "LinkedServiceReference"
						},
						"path": "raw/landing/isu_data/ercho",
						"enableCompression": false
					},
					"parallelCopies": 32,
					"dataIntegrationUnits": 8
				},
				"inputs": [
					{
						"referenceName": "SRC_SQLSERVER",
						"type": "DatasetReference",
						"parameters": {
							"kvSecret": {
								"value": "daf-sql-slt-test-connectionstring",
								"type": "Expression"
							},
							"tableName": "ERCHO",
							"schemaName": "EQ1"
						}
					}
				],
				"outputs": [
					{
						"referenceName": "DS_RAW_ADLS_DELTALAKE",
						"type": "DatasetReference",
						"parameters": {
							"TableName": "isu_ercho"
						}
					}
				]
			},
			{
				"name": "SP-Record-Manifest_copy1",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[CTL].[CreateManifestRecord]",
					"storedProcedureParameters": {
						"BatchExecutionLogID": {
							"value": {
								"value": "@pipeline().parameters.BatchLogId",
								"type": "Expression"
							},
							"type": "Int64"
						},
						"Container": {
							"value": "raw",
							"type": "String"
						},
						"EndCounter": {
							"value": {
								"value": "@json(string(pipeline().parameters.ValidationDetails)).ReturnValue",
								"type": "Expression"
							},
							"type": "String"
						},
						"FileName": {
							"value": {
								"value": "@pipeline().parameters.TargetBLOBName",
								"type": "Expression"
							},
							"type": "String"
						},
						"FolderName": {
							"value": {
								"value": "@pipeline().parameters.TargetBLOBFolder",
								"type": "Expression"
							},
							"type": "String"
						},
						"Records": {
							"value": {
								"value": "@string(activity('testDeltaTableWrite').output.rowsCopied)",
								"type": "Expression"
							},
							"type": "Int64"
						},
						"SourceObject": {
							"value": {
								"value": "@pipeline().parameters.TaskDetails.SourceName",
								"type": "Expression"
							},
							"type": "String"
						},
						"StartCounter": {
							"value": {
								"value": "@pipeline().parameters.TaskDetails.Watermarks",
								"type": "Expression"
							},
							"type": "String"
						},
						"TaskExecutionLogID": {
							"value": {
								"value": "@pipeline().parameters.TaskExecutionLogId",
								"type": "Expression"
							},
							"type": "Int64"
						},
						"DeltaColumn": {
							"value": {
								"value": "@pipeline().parameters.TaskDetails.WatermarkColumn",
								"type": "Expression"
							},
							"type": "String"
						},
						"PipelineRunID": {
							"value": {
								"value": "@pipeline().RunId",
								"type": "Expression"
							},
							"type": "String"
						},
						"SourceFileName": {
							"value": "SQL",
							"type": "String"
						},
						"SourceFileDateStamp": {
							"value": "1",
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "LS-AzureSqlDatabase_Ctrldb",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "SP-Update-Manifest-Delta-Records",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Copy-Source-DataLake",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[CTL].[UpdateManifestDeltaRecords]",
					"storedProcedureParameters": {
						"BatchExecutionLogID": {
							"value": {
								"value": "@pipeline().parameters.BatchLogId",
								"type": "Expression"
							},
							"type": "Int64"
						},
						"TaskExecutionLogID": {
							"value": {
								"value": "@pipeline().parameters.TaskExecutionLogId",
								"type": "Expression"
							},
							"type": "Int64"
						},
						"RecordsDeltaTable": {
							"value": {
								"value": "@variables('DataFileRecordCount')",
								"type": "Expression"
							},
							"type": "Int64"
						},
						"SourceFileDateStamp": {
							"value": {
								"value": "@pipeline().parameters.SourceFileDateTimeStamp",
								"type": "Expression"
							},
							"type": "String"
						},
						"RecordsTargetTable": {
							"value": {
								"value": "@variables('TargetTableRecordCount')",
								"type": "Expression"
							},
							"type": "Int64"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "LS-AzureSqlDatabase_Ctrldb",
					"type": "LinkedServiceReference"
				}
			}
		],
		"parameters": {
			"DeltaSql": {
				"type": "string"
			}
		},
		"variables": {
			"RecordsWritten": {
				"type": "String"
			},
			"RecordsRead": {
				"type": "String"
			}
		},
		"folder": {
			"name": "z_Archive/Test"
		},
		"annotations": []
	}
}
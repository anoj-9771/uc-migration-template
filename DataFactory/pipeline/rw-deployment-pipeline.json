{
	"name": "rw-deployment-pipeline",
	"properties": {
		"activities": [
			{
				"name": "set-secret-variable",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "get-bearer-token",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "DatabricksSecret",
					"value": {
						"value": "@activity('get-bearer-token').output.value",
						"type": "Expression"
					}
				}
			},
			{
				"name": "get-bearer-token",
				"type": "WebActivity",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"url": {
						"value": "@concat('https://', pipeline().globalParameters.keyVaultName, '.vault.azure.net/secrets/databricks-token?api-version=7.0')",
						"type": "Expression"
					},
					"method": "GET",
					"authentication": {
						"type": "MSI",
						"resource": "https://vault.azure.net"
					}
				}
			},
			{
				"name": "get-databricks-jobs",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "run-job-pool-deployment",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"url": "https://australiaeast.azuredatabricks.net/api/2.1/jobs/list",
					"method": "GET",
					"headers": {
						"Authorization": {
							"value": "Bearer @{variables('DatabricksSecret')}",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "get-mlflow-models",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "run-job-pool-deployment",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"url": "https://australiaeast.azuredatabricks.net/api/2.0/preview/mlflow/registered-models/list",
					"method": "GET",
					"headers": {
						"Authorization": {
							"value": "Bearer @{variables('DatabricksSecret')}",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "if-riverwatch-model-exists",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "if-register-model-job-exists",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "if-registered-models-exist",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@and(\n    equals(variables('ModelExists'), true),\n    bool(contains(activity('get-mlflow-models').output, 'registered_models'))\n    )",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "run-databricks-job_register-riverwatch-model_1",
							"type": "WebActivity",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"url": "https://australiaeast.azuredatabricks.net/api/2.1/jobs/run-now",
								"method": "POST",
								"headers": {
									"Authorization": {
										"value": "Bearer @{variables('DatabricksSecret')}",
										"type": "Expression"
									}
								},
								"body": {
									"value": "{ \"job_id\": @{variables('RegisterModelJobID')}}}",
									"type": "Expression"
								}
							}
						},
						{
							"name": "wait_until_job_complete",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "get-job-id-last-task",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "wait-until-databricks-job-complete",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"RunID": {
										"value": "@activity('get-job-id-last-task').output.Value[0].run_id",
										"type": "Expression"
									},
									"DatabricksSecret": {
										"value": "@variables('DatabricksSecret')",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "get-job-task-id",
							"type": "WebActivity",
							"dependsOn": [
								{
									"activity": "run-databricks-job_register-riverwatch-model_1",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"url": {
									"value": "@concat('https://australiaeast.azuredatabricks.net/api/2.1/jobs/runs/list?job_id=', variables('RegisterModelJobID'),'&active_only=true&expand_tasks=true')",
									"type": "Expression"
								},
								"method": "GET",
								"headers": {
									"Authorization": {
										"value": "Bearer @{variables('DatabricksSecret')}",
										"type": "Expression"
									}
								},
								"body": {
									"value": "{ \"job_id\": @{variables('RegisterModelJobID')}}}",
									"type": "Expression"
								}
							}
						},
						{
							"name": "check-job-status-register-model",
							"type": "WebActivity",
							"dependsOn": [
								{
									"activity": "wait_until_job_complete",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"url": {
									"value": "@concat('https://australiaeast.azuredatabricks.net/api/2.1/jobs/runs/get-output?run_id=', activity('get-job-id-last-task').output.Value[0].run_id)",
									"type": "Expression"
								},
								"method": "GET",
								"headers": {
									"Authorization": {
										"value": "Bearer @{variables('DatabricksSecret')}",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "set-register-model-state-variable_3",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "check-job-status-register-model",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "RegisterModelState",
								"value": {
									"value": "@activity('check-job-status-register-model').output.metadata.state.result_state",
									"type": "Expression"
								}
							}
						},
						{
							"name": "get-job-id-last-task",
							"type": "Filter",
							"dependsOn": [
								{
									"activity": "get-job-task-id",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"items": {
									"value": "@activity('get-job-task-id').output.runs[0].tasks",
									"type": "Expression"
								},
								"condition": {
									"value": "@equals(item().task_key, 'complete_registration')",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "if-register-model-job-exists",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "if-jobs-exist",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "filter-job-pool-batch-exists",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "set-job-pool-id",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@and(\n    equals(variables('RegisterModelJobExists'), true),\n    bool(contains(activity('get-databricks-jobs').output, 'jobs'))\n    )",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "create-register-model-job-api",
							"type": "WebActivity",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"url": "https://australiaeast.azuredatabricks.net/api/2.1/jobs/create",
								"method": "POST",
								"headers": {
									"Authorization": {
										"value": "Bearer @{variables('DatabricksSecret')}",
										"type": "Expression"
									}
								},
								"body": {
									"value": "{\n    \"name\": \"register-riverwatch-model\",\n    \"email_notifications\": {\n        \"no_alert_for_skipped_runs\": false\n    },\n    \"timeout_seconds\": 0,\n    \"max_concurrent_runs\": 1,\n    \"tasks\": [\n        {\n            \"task_key\": \"register-riverwatch-model\",\n            \"notebook_task\": {\n                \"notebook_path\": \"/AI-ML/Riverwatch/00_register_bayesian_network_water_quality_model_mlflow\",\n                \"source\": \"WORKSPACE\"\n            },\n            \"job_cluster_key\": \"riverwatch-job-cluster\",\n            \"libraries\": [\n                {\n                    \"pypi\": {\n                        \"package\": \"pybbn==3.2.1\"\n                    }\n                },\n                {\n                    \"pypi\": {\n                        \"package\": \"mlflow\"\n                    }\n                }\n            ],\n            \"timeout_seconds\": 0\n        },\n        {\n            \"task_key\": \"complete_registration\",\n            \"depends_on\": [\n                {\n                    \"task_key\": \"register-riverwatch-model\"\n                }\n            ],\n            \"notebook_task\": {\n                \"notebook_path\": \"/AI-ML/Riverwatch/register_model_complete\",\n                \"source\": \"WORKSPACE\"\n            },\n            \"job_cluster_key\": \"riverwatch-job-cluster\",\n            \"timeout_seconds\": 0\n        }\n    ],\n    \"job_clusters\": [\n        {\n            \"job_cluster_key\": \"riverwatch-job-cluster\",\n            \"new_cluster\": {\n                \"cluster_name\": \"\",\n                \"spark_version\": \"10.4.x-cpu-ml-scala2.12\",\n                \"spark_conf\": {\n                    \"spark.databricks.delta.preview.enabled\": \"true\"\n                },\n                \"instance_pool_id\": \"@{variables('JobPoolId')}\",\n                \"data_security_mode\": \"LEGACY_SINGLE_USER_STANDARD\",\n                \"runtime_engine\": \"STANDARD\",\n                \"num_workers\": 2\n            }\n        }\n    ],\n    \"format\": \"MULTI_TASK\",\n    \"access_control_list\": [\n        {\n            \"user_name\": \"onyu@sydneywater.com.au\",\n            \"permission_level\": \"IS_OWNER\"\n        }\n    ]\n}",
									"type": "Expression"
								}
							}
						},
						{
							"name": "set-register-model-job-id-variable_4",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "create-register-model-job-api",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "RegisterModelJobID",
								"value": {
									"value": "@string(activity('create-register-model-job-api').output.job_id)",
									"type": "Expression"
								}
							}
						},
						{
							"name": "set-register-model-exists-variable_4",
							"description": "",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "set-register-model-job-id-variable_4",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "RegisterModelJobExists",
								"value": true
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "set-register-model-job-id",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "RegisterModelJobID",
								"value": {
									"value": "@string(activity('filter-register-riverwatch-model-job').output.Value[0].job_id)",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "if-riverwatch-pipeline-exists",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "if-jobs-exist",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "filter-job-pool-batch-exists",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "set-job-pool-id",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@and(\n    equals(variables('PipelineJobExists'), true),\n    bool(contains(activity('get-databricks-jobs').output, 'jobs'))\n    )",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "create-riverwatch-pipeline-job",
							"type": "WebActivity",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"url": "https://australiaeast.azuredatabricks.net/api/2.1/jobs/create",
								"method": "POST",
								"headers": {
									"Authorization": {
										"value": "Bearer @{variables('DatabricksSecret')}",
										"type": "Expression"
									}
								},
								"body": {
									"value": "{\n    \"name\": \"riverwatch-pipeline\",\n    \"email_notifications\": {\n        \"no_alert_for_skipped_runs\": false\n    },\n    \"timeout_seconds\": 0,\n    \"max_concurrent_runs\": 1,\n    \"tasks\": [\n        {\n            \"task_key\": \"preprocess_water_quality_features\",\n            \"notebook_task\": {\n                \"notebook_path\": \"/AI-ML/Riverwatch/01_water_quality_feature_selection\",\n                \"base_parameters\": {\n                    \"current_model_runtime\": \"\",\n                    \"last_model_runtime\": \"\"\n                },\n                \"source\": \"WORKSPACE\"\n            },\n            \"job_cluster_key\": \"riverwatch-job-cluster\",\n            \"timeout_seconds\": 0\n        },\n        {\n            \"task_key\": \"inference_water_quality\",\n            \"depends_on\": [\n                {\n                    \"task_key\": \"preprocess_water_quality_features\"\n                }\n            ],\n            \"notebook_task\": {\n                \"notebook_path\": \"/AI-ML/Riverwatch/02_water_quality_predictions\",\n                \"base_parameters\": {\n                    \"current_model_runtime\": \"\"\n                },\n                \"source\": \"WORKSPACE\"\n            },\n            \"job_cluster_key\": \"riverwatch-job-cluster\",\n            \"libraries\": [\n                {\n                    \"pypi\": {\n                        \"package\": \"pybbn==3.2.1\"\n                    }\n                },\n                {\n                    \"pypi\": {\n                        \"package\": \"mlflow\"\n                    }\n                }\n            ],\n            \"timeout_seconds\": 0\n        }\n    ],\n    \"job_clusters\": [\n        {\n            \"job_cluster_key\": \"riverwatch-job-cluster\",\n            \"new_cluster\": {\n                \"cluster_name\": \"\",\n                \"spark_version\": \"10.4.x-cpu-ml-scala2.12\",\n                \"spark_conf\": {\n                    \"spark.databricks.delta.preview.enabled\": \"true\"\n                },\n                \"instance_pool_id\": \"@{variables('JobPoolId')}\",\n                \"data_security_mode\": \"LEGACY_SINGLE_USER_STANDARD\",\n                \"runtime_engine\": \"STANDARD\",\n                \"num_workers\": 2\n            }\n        }\n    ],\n    \"format\": \"MULTI_TASK\",\n    \"access_control_list\": [\n        {\n            \"user_name\": \"onyu@sydneywater.com.au\",\n            \"permission_level\": \"IS_OWNER\"\n        }\n    ]\n}",
									"type": "Expression"
								}
							}
						},
						{
							"name": "set-riverwatch-pipeline-job-id-variable_2",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "create-riverwatch-pipeline-job",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "PipelineJobID",
								"value": {
									"value": "@string(activity('create-riverwatch-pipeline-job').output.job_id)",
									"type": "Expression"
								}
							}
						},
						{
							"name": "set-riverwatch-pipeline-exists-variable_2",
							"description": "true",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "set-riverwatch-pipeline-job-id-variable_2",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "PipelineJobExists",
								"value": true
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "set-riverwatch-pipeline-job-id",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "PipelineJobID",
								"value": {
									"value": "@string(activity('filter-riverwatch-pipeline-job').output.Value[0].job_id)",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "Execute Riverwatch Ingestion Notebook",
				"type": "DatabricksNotebook",
				"dependsOn": [
					{
						"activity": "set-job-pool-id",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebookPath": "/AI-ML/Riverwatch/Riverwatch-ingestion"
				},
				"linkedServiceName": {
					"referenceName": "LS_AzureDatabricks_InstancePool",
					"type": "LinkedServiceReference",
					"parameters": {
						"kvSecret": "databricks-token",
						"PoolId": {
							"value": "@variables('JobPoolId')",
							"type": "Expression"
						},
						"DatabricksVersion": "10.4.x-cpu-ml-scala2.12"
					}
				}
			},
			{
				"name": "run-job-pool-deployment",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "set-secret-variable",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "util-job-pool-deployment",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"DatabricksSecret": {
							"value": "@variables('DatabricksSecret')",
							"type": "Expression"
						},
						"JobPoolName": {
							"value": "@pipeline().parameters.BatchPoolName",
							"type": "Expression"
						},
						"NodeTypeId": "Standard_DS3_v2",
						"ApplicationTag": "Riverwatch"
					}
				}
			},
			{
				"name": "if-jobs-exist",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "get-databricks-jobs",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@bool(contains(activity('get-databricks-jobs').output, 'jobs'))",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "filter-riverwatch-pipeline-job",
							"type": "Filter",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"items": {
									"value": "@activity('get-databricks-jobs').output.jobs",
									"type": "Expression"
								},
								"condition": {
									"value": "@equals(item().settings.name, 'riverwatch-pipeline')",
									"type": "Expression"
								}
							}
						},
						{
							"name": "filter-register-riverwatch-model-job",
							"type": "Filter",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"items": {
									"value": "@activity('get-databricks-jobs').output.jobs",
									"type": "Expression"
								},
								"condition": {
									"value": "@equals(item().settings.name, 'register-riverwatch-model')",
									"type": "Expression"
								}
							}
						},
						{
							"name": "set-pipeline-job-exists",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "filter-riverwatch-pipeline-job",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "PipelineJobExists",
								"value": {
									"value": "@not(empty(activity('filter-riverwatch-pipeline-job').output.Value))",
									"type": "Expression"
								}
							}
						},
						{
							"name": "set-register-model-job-exists",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "filter-register-riverwatch-model-job",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "RegisterModelJobExists",
								"value": {
									"value": "@not(empty(activity('filter-register-riverwatch-model-job').output.Value))",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "get-databricks-job-pools",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "run-job-pool-deployment",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"url": "https://australiaeast.azuredatabricks.net/api/2.0/instance-pools/list",
					"method": "GET",
					"headers": {
						"Authorization": {
							"value": "Bearer @{variables('DatabricksSecret')}",
							"type": "Expression"
						}
					},
					"body": {
						"autoscale": {
							"min_workers": 2,
							"max_workers": 10
						},
						"cluster_name": "sewer-cctv",
						"spark_version": "10.4.x-cpu-ml-scala2.12",
						"spark_conf": {
							"spark.databricks.delta.preview.enabled": "true"
						},
						"ssh_public_keys": [],
						"autotermination_minutes": 60,
						"init_scripts": [],
						"instance_pool_id": "1024-005500-twain3-pool-jk2lh0go",
						"driver_instance_pool_id": "1024-005500-twain3-pool-jk2lh0go",
						"runtime_engine": "STANDARD"
					}
				}
			},
			{
				"name": "filter-job-pool-batch-exists",
				"type": "Filter",
				"dependsOn": [
					{
						"activity": "get-databricks-job-pools",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('get-databricks-job-pools').output.instance_pools",
						"type": "Expression"
					},
					"condition": {
						"value": "@equals(item().instance_pool_name, pipeline().parameters.BatchPoolName)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "set-job-pool-id",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "filter-job-pool-batch-exists",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "JobPoolId",
					"value": {
						"value": "@string(activity('filter-job-pool-batch-exists').output.Value[0].instance_pool_id)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "if-registered-models-exist",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "get-mlflow-models",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@bool(contains(activity('get-mlflow-models').output, 'registered_models'))",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "filter-riverwatch-model",
							"type": "Filter",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"items": {
									"value": "@activity('get-mlflow-models').output.registered_models",
									"type": "Expression"
								},
								"condition": {
									"value": "@equals(item().latest_versions[0].name, 'riverwatch-pollution-classifier')",
									"type": "Expression"
								}
							}
						},
						{
							"name": "set-model-exists",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "filter-riverwatch-model",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "ModelExists",
								"value": {
									"value": "@and(\n    not(empty(activity('filter-riverwatch-model').output.Value)),\n    equals(activity('filter-riverwatch-model').output.Value[0].latest_versions.current_stage, 'Production')\n)",
									"type": "Expression"
								}
							}
						}
					]
				}
			}
		],
		"parameters": {
			"BatchPoolName": {
				"type": "string",
				"defaultValue": "RIVERWATCH_POOL"
			}
		},
		"variables": {
			"DatabricksSecret": {
				"type": "String"
			},
			"PipelineJobExists": {
				"type": "Boolean",
				"defaultValue": false
			},
			"PipelineJobID": {
				"type": "String"
			},
			"ModelExists": {
				"type": "Boolean",
				"defaultValue": false
			},
			"RegisterModelJobExists": {
				"type": "Boolean",
				"defaultValue": false
			},
			"RegisterModelJobID": {
				"type": "String"
			},
			"RegisterModelState": {
				"type": "String"
			},
			"ClusterId": {
				"type": "String"
			},
			"JobsExist": {
				"type": "Boolean"
			},
			"JobPoolExists": {
				"type": "Boolean"
			},
			"JobPoolId": {
				"type": "String"
			}
		},
		"folder": {
			"name": "AI-ML/Riverwatch"
		},
		"annotations": []
	}
}
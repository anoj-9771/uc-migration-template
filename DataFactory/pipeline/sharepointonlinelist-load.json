{
	"name": "sharepointonlinelist-load",
	"properties": {
		"activities": [
			{
				"name": "set-full-path",
				"type": "SetVariable",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"variableName": "OutputFullPath",
					"value": {
						"value": "@replace(replace(replace(replace(replace(replace(\npipeline().parameters.task.RawPath\n,'$yyyy$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'yyyy'))\n,'$MM$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'MM'))\n,'$dd$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'dd'))\n,'$HH$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'HH'))\n,'$mm$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'mm'))\n,'$guid$', guid())",
						"type": "Expression"
					}
				}
			},
			{
				"name": "task-raw-path",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "copy-sharepointonline-list",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "log-status-update",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"ID": {
							"value": "@pipeline().parameters.task.ID",
							"type": "Expression"
						},
						"Property": "RawPath",
						"Value": {
							"value": "@variables('OutputFullPath')",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "if-delta",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "set-is-delta",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@and(variables('IsDelta'),not(variables('NoRecordsToProcess')))",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "set-watermark-column",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "WatermarkColumn",
								"value": {
									"value": "@pipeline().parameters.task.WatermarkColumn",
									"type": "Expression"
								}
							}
						},
						{
							"name": "set-query-clause",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "set-low-watermark-formatted",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "set-high-watermark-formatted",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "QueryClause",
								"value": {
									"value": "@concat('&$filter=', \n  if(empty(variables('LowWatermark'))\n    , '1 eq 1', concat(variables('WatermarkColumn'),' gt ', variables('LowWatermarkFormatted'))),\n  ' and ',\n  if(empty(variables('HighWatermark'))\n    , '1 eq 1', concat(variables('WatermarkColumn'),' le ', variables('HighWatermarkFormatted'))))",
									"type": "Expression"
								}
							}
						},
						{
							"name": "task-high-watermark",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "set-high-watermark",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "log-status-update",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"ID": {
										"value": "@pipeline().parameters.task.ID",
										"type": "Expression"
									},
									"Property": "HighWatermark",
									"Value": {
										"value": "@variables('HighWatermark')",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "check-watermarks",
							"type": "Script",
							"dependsOn": [
								{
									"activity": "set-no-records-to-process",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"linkedServiceName": {
								"referenceName": "LS-AzureSqlDatabase_Ctrldb",
								"type": "LinkedServiceReference"
							},
							"typeProperties": {
								"scripts": [
									{
										"type": "Query",
										"text": {
											"value": "@concat(\n    '\n    select \n        isdate(''',variables('LowWatermark'),''') as lowWaterMarkIsDate\n        ,isdate(''',variables('HighWatermark'),''') as highWaterMarkIsDate\n    '\n)",
											"type": "Expression"
										}
									}
								],
								"scriptBlockExecutionTimeout": "02:00:00"
							}
						},
						{
							"name": "set-low-watermark",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "set-high-watermark",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "LowWatermark",
								"value": {
									"value": "@pipeline().parameters.task.LowWatermark",
									"type": "Expression"
								}
							}
						},
						{
							"name": "set-high-watermark",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "high-watermark",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "HighWatermark",
								"value": {
									"value": "@{activity('high-watermark').output.firstRow[variables('WatermarkColumn')]}",
									"type": "Expression"
								}
							}
						},
						{
							"name": "high-watermark",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "set-watermark-column",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SharePointOnlineListSource",
									"query": {
										"value": "$select=@{variables('WatermarkColumn')}&$orderby=@{variables('WatermarkColumn')} desc",
										"type": "Expression"
									},
									"httpRequestTimeout": "00:05:00"
								},
								"dataset": {
									"referenceName": "SharePointOnlineList",
									"type": "DatasetReference",
									"parameters": {
										"list": {
											"value": "@pipeline().parameters.task.SourceTableName",
											"type": "Expression"
										},
										"url": {
											"value": "@pipeline().parameters.task.SourceQuery",
											"type": "Expression"
										}
									}
								}
							}
						},
						{
							"name": "set-low-watermark-formatted",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "check-watermarks",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "LowWatermarkFormatted",
								"value": {
									"value": "@if(\n    equals(\n        activity('check-watermarks').output.resultSets[0].rows[0].lowWatermarkIsDate,\n        1\n    ),\n    concat('DateTime''',variables('LowWatermark'),''''),\n    string(variables('LowWatermark'))\n)",
									"type": "Expression"
								}
							}
						},
						{
							"name": "set-high-watermark-formatted",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "check-watermarks",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "HighWatermarkFormatted",
								"value": {
									"value": "@if(\n    equals(\n        activity('check-watermarks').output.resultSets[0].rows[0].HighWatermarkIsDate,\n        1\n    ),\n    concat('DateTime''',variables('HighWatermark'),''''),\n    string(variables('HighWatermark'))\n)",
									"type": "Expression"
								}
							}
						},
						{
							"name": "set-no-records-to-process",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "set-low-watermark",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "NoRecordsToProcess",
								"value": {
									"value": "@equals(variables('LowWatermark'),variables('HighWatermark'))",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "set-is-delta",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "set-no-records-to-process-for-full-load",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "IsDelta",
					"value": {
						"value": "@not(empty(pipeline().parameters.task.WatermarkColumn))",
						"type": "Expression"
					}
				}
			},
			{
				"name": "set-query",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "if-delta",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "Query",
					"value": {
						"value": "@variables('QueryClause')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "copy-sharepointonline-list",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "set-query",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "set-full-path",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 2,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SharePointOnlineListSource",
						"additionalColumns": [
							{
								"name": "dummy",
								"value": "dummy"
							}
						],
						"query": {
							"value": "@variables('Query')",
							"type": "Expression"
						},
						"httpRequestTimeout": "00:05:00"
					},
					"sink": {
						"type": "ParquetSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						},
						"formatSettings": {
							"type": "ParquetWriteSettings"
						}
					},
					"enableStaging": false,
					"enableSkipIncompatibleRow": false,
					"translator": {
						"type": "TabularTranslator",
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "SharePointOnlineList",
						"type": "DatasetReference",
						"parameters": {
							"list": {
								"value": "@pipeline().parameters.task.SourceTableName",
								"type": "Expression"
							},
							"url": {
								"value": "@pipeline().parameters.task.SourceQuery",
								"type": "Expression"
							}
						}
					}
				],
				"outputs": [
					{
						"referenceName": "DLS_Parquet",
						"type": "DatasetReference",
						"parameters": {
							"BlobPath": "@variables('OutputFullPath')"
						}
					}
				]
			},
			{
				"name": "log-copy",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "copy-sharepointonline-list",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "log-message",
						"type": "PipelineReference"
					},
					"waitOnCompletion": false,
					"parameters": {
						"ID": {
							"value": "@pipeline().parameters.task.ID",
							"type": "Expression"
						},
						"ActivityType": "copy-data",
						"Message": {
							"value": "@{activity('copy-sharepointonline-list')}",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "task-sink-row-count",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "copy-sharepointonline-list",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "log-status-update",
						"type": "PipelineReference"
					},
					"waitOnCompletion": false,
					"parameters": {
						"ID": {
							"value": "@pipeline().parameters.task.ID",
							"type": "Expression"
						},
						"Property": "SinkRowCount",
						"Value": {
							"value": "@if(variables('NoRecordsToProcess'),0,activity('copy-sharepointonline-list').output.rowsCopied)",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "check-for-records",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SharePointOnlineListSource",
						"httpRequestTimeout": "00:05:00"
					},
					"dataset": {
						"referenceName": "SharePointOnlineList",
						"type": "DatasetReference",
						"parameters": {
							"list": {
								"value": "@pipeline().parameters.task.SourceTableName",
								"type": "Expression"
							},
							"url": {
								"value": "@pipeline().parameters.task.SourceQuery",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "set-no-records-to-process-for-full-load",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "check-for-records",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "NoRecordsToProcess",
					"value": {
						"value": "@empty(activity('check-for-records').output.firstRow)",
						"type": "Expression"
					}
				}
			}
		],
		"parameters": {
			"task": {
				"type": "object"
			}
		},
		"variables": {
			"auth-client-id": {
				"type": "String"
			},
			"survey-list": {
				"type": "String"
			},
			"bearer-token": {
				"type": "String"
			},
			"export-status": {
				"type": "String"
			},
			"progress-id": {
				"type": "String"
			},
			"OutputFullPath": {
				"type": "String"
			},
			"IsDelta": {
				"type": "Boolean"
			},
			"HighWatermark": {
				"type": "String"
			},
			"LowWatermark": {
				"type": "String"
			},
			"WatermarkColumn": {
				"type": "String"
			},
			"HighWatermarkFormatted": {
				"type": "String"
			},
			"LowWatermarkFormatted": {
				"type": "String"
			},
			"QueryClause": {
				"type": "String"
			},
			"Query": {
				"type": "String"
			},
			"NoRecordsToProcess": {
				"type": "Boolean"
			}
		},
		"folder": {
			"name": "MDP-Framework/SourceHandler/SharePointOnlineList"
		},
		"annotations": []
	}
}
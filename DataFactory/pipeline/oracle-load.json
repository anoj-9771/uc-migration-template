{
	"name": "oracle-load",
	"properties": {
		"activities": [
			{
				"name": "set-base-query",
				"type": "SetVariable",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"variableName": "BaseQuery",
					"value": {
						"value": "@coalesce(pipeline().parameters.task.SourceQuery, \nreplace(replace('SELECT * FROM $A$.$B$'\n,'$A$'\n,pipeline().parameters.task.SourceSchema)\n,'$B$'\n,pipeline().parameters.task.SourceTableName)\n)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "row-count",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "set-query",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "set-full-path",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "OracleSource",
						"oracleReaderQuery": {
							"value": "SELECT COUNT(*) RowCount FROM (@{variables('Query')}) T",
							"type": "Expression"
						},
						"partitionOption": "None",
						"queryTimeout": "02:00:00"
					},
					"dataset": {
						"referenceName": "Oracle_Server",
						"type": "DatasetReference",
						"parameters": {
							"kvSecret": {
								"value": "@pipeline().parameters.task.SourceKeyVaultSecret",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "set-full-path",
				"type": "SetVariable",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"variableName": "OutputFullPath",
					"value": {
						"value": "@replace(replace(replace(replace(replace(replace(\ncoalesce(pipeline().parameters.task.RawPath, '')\n,'$yyyy$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'yyyy'))\n,'$MM$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'MM'))\n,'$dd$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'dd'))\n,'$HH$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'HH'))\n,'$mm$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'mm'))\n,'$guid$', guid())",
						"type": "Expression"
					}
				}
			},
			{
				"name": "set-query",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "if-delta",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "Query",
					"value": {
						"value": "@if(variables('IsDelta')\n,replace(replace(\n'SELECT * FROM ($Q$) T $W$'\n,'$Q$', variables('BaseQuery'))\n,'$W$', variables('QueryClause'))\n,variables('BaseQuery'))",
						"type": "Expression"
					}
				}
			},
			{
				"name": "if-delta",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "set-base-query",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "set-is-delta",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@variables('IsDelta')",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "low-high-watermark",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "set-watermark-column",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "OracleSource",
									"oracleReaderQuery": {
										"value": "@replace(replace(replace(\n'SELECT $PLW$ LowWatermark,  ''''||MAX($WC$)||'''' HighWatermark FROM $Q$ T'\n,'$PLW$', if(empty(pipeline().parameters.task.LowWatermark), 'NULL', concat('''', pipeline().parameters.task.LowWatermark, '''')))\n,'$WC$', variables('WatermarkColumn'))\n,'$Q$', concat('(',variables('BaseQuery'),')'))",
										"type": "Expression"
									},
									"partitionOption": "None",
									"convertDecimalToInteger": false,
									"queryTimeout": "02:00:00"
								},
								"dataset": {
									"referenceName": "Oracle_Server",
									"type": "DatasetReference",
									"parameters": {
										"kvSecret": {
											"value": "@pipeline().parameters.task.SourceKeyVaultSecret",
											"type": "Expression"
										}
									}
								},
								"firstRowOnly": true
							}
						},
						{
							"name": "set-watermark-column",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "WatermarkColumn",
								"value": {
									"value": "@pipeline().parameters.task.WatermarkColumn",
									"type": "Expression"
								}
							}
						},
						{
							"name": "set-query-clause",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "set-high-watermark",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "set-low-watermark",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "QueryClause",
								"value": {
									"value": "@if(equals(pipeline().parameters.task.LowWatermark,variables('HighWatermark')),\n  coalesce(pipeline().parameters.task.QueryFilter, \n    concat('WHERE ', \n    if(or(empty(activity('low-high-watermark').output.firstRow.LowWatermark), empty(activity('low-high-watermark').output.firstRow.HighWatermark))\n      , '1=1', concat(variables('WatermarkColumn'),' > ', variables('LowWatermark'))),\n    ' AND ',\n    if(or(empty(activity('low-high-watermark').output.firstRow.LowWatermark), empty(activity('low-high-watermark').output.firstRow.HighWatermark))\n      , '1=1', concat(variables('WatermarkColumn'),' <= ', variables('HighWatermark'))))) ,\n  coalesce(pipeline().parameters.task.QueryFilter, \n    concat('WHERE ', \n    if(or(empty(activity('low-high-watermark').output.firstRow.LowWatermark), empty(activity('low-high-watermark').output.firstRow.HighWatermark))\n      , '1=1', concat(variables('WatermarkColumn'),' >= ', variables('LowWatermark'))),\n    ' AND ',\n    if(or(empty(activity('low-high-watermark').output.firstRow.LowWatermark), empty(activity('low-high-watermark').output.firstRow.HighWatermark))\n      , '1=1', concat(variables('WatermarkColumn'),' <= ', variables('HighWatermark')))) ))",
									"type": "Expression"
								}
							}
						},
						{
							"name": "task-low-watermark",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "low-high-watermark",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "log-status-update",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"ID": {
										"value": "@pipeline().parameters.task.ID",
										"type": "Expression"
									},
									"Property": "LowWatermark",
									"Value": {
										"value": "@{activity('low-high-watermark').output.firstRow.LowWatermark}",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "task-high-watermark",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "low-high-watermark",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "log-status-update",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"ID": {
										"value": "@pipeline().parameters.task.ID",
										"type": "Expression"
									},
									"Property": "HighWatermark",
									"Value": {
										"value": "@{activity('low-high-watermark').output.firstRow.HighWatermark}",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "check-watermarks",
							"type": "Script",
							"dependsOn": [
								{
									"activity": "low-high-watermark",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"linkedServiceName": {
								"referenceName": "LS-AzureSqlDatabase_Ctrldb",
								"type": "LinkedServiceReference"
							},
							"typeProperties": {
								"scripts": [
									{
										"type": "Query",
										"text": {
											"value": "@concat(\n    '\n    select \n        isnumeric(''',activity('low-high-watermark').output.firstRow.LowWatermark,''') as lowWaterMarkIsNumeric\n        ,isnumeric(''',activity('low-high-watermark').output.firstRow.HighWatermark,''') as highWaterMarkIsNumeric\n    '\n)",
											"type": "Expression"
										}
									}
								],
								"scriptBlockExecutionTimeout": "02:00:00"
							}
						},
						{
							"name": "set-low-watermark",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "check-watermarks",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "LowWatermark",
								"value": {
									"value": "@if(\n    equals(\n        activity('check-watermarks').output.resultSets[0].rows[0].lowWatermarkIsNumeric,\n        1\n    ),\n    string(activity('low-high-watermark').output.firstRow.LowWatermark),\n    concat('''',activity('low-high-watermark').output.firstRow.LowWatermark,'''')\n)",
									"type": "Expression"
								}
							}
						},
						{
							"name": "set-high-watermark",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "check-watermarks",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "HighWatermark",
								"value": {
									"value": "@if(\n    equals(\n        activity('check-watermarks').output.resultSets[0].rows[0].highWatermarkIsNumeric,\n        1\n    ),\n    string(activity('low-high-watermark').output.firstRow.HighWatermark),\n    concat('''',activity('low-high-watermark').output.firstRow.HighWatermark,'''')\n)",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "set-is-delta",
				"type": "SetVariable",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"variableName": "IsDelta",
					"value": {
						"value": "@not(empty(pipeline().parameters.task.WatermarkColumn))",
						"type": "Expression"
					}
				}
			},
			{
				"name": "switch-copy-sql",
				"type": "Switch",
				"dependsOn": [
					{
						"activity": "task-source-row-count",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"on": {
						"value": "@if(equals(length(split(pipeline().parameters.task.SourceHandler, '/')), 1), pipeline().parameters.task.SourceHandler, split(pipeline().parameters.task.SourceHandler, '/')[1])",
						"type": "Expression"
					},
					"cases": [
						{
							"value": "none",
							"activities": [
								{
									"name": "not-implemented",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "not-implemented",
										"errorCode": "500"
									}
								}
							]
						}
					],
					"defaultActivities": [
						{
							"name": "copy-sql",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 3,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [
								{
									"name": "Destination",
									"value": "raw/Cewa Financials/"
								}
							],
							"typeProperties": {
								"source": {
									"type": "OracleSource",
									"oracleReaderQuery": {
										"value": "@variables('Query')",
										"type": "Expression"
									},
									"partitionOption": "None",
									"queryTimeout": "02:00:00"
								},
								"sink": {
									"type": "ParquetSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "ParquetWriteSettings"
									}
								},
								"enableStaging": false
							},
							"inputs": [
								{
									"referenceName": "Oracle_Server",
									"type": "DatasetReference",
									"parameters": {
										"kvSecret": {
											"value": "@pipeline().parameters.task.SourceKeyVaultSecret",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "DLS_Parquet",
									"type": "DatasetReference",
									"parameters": {
										"BlobPath": {
											"value": "@variables('OutputFullPath')",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "task-raw-path",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "copy-sql",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "log-status-update",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"ID": {
										"value": "@pipeline().parameters.task.ID",
										"type": "Expression"
									},
									"Property": "RawPath",
									"Value": {
										"value": "@variables('OutputFullPath')",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "task-sink-row-count",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "copy-sql",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "log-status-update",
									"type": "PipelineReference"
								},
								"waitOnCompletion": false,
								"parameters": {
									"ID": {
										"value": "@pipeline().parameters.task.ID",
										"type": "Expression"
									},
									"Property": "SinkRowCount",
									"Value": {
										"value": "@{activity('copy-sql').output.rowsCopied}",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "log-copy",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "copy-sql",
									"dependencyConditions": [
										"Completed"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "log-message",
									"type": "PipelineReference"
								},
								"waitOnCompletion": false,
								"parameters": {
									"ID": {
										"value": "@pipeline().parameters.task.ID",
										"type": "Expression"
									},
									"ActivityType": "copy-data",
									"Message": {
										"value": "@{activity('copy-sql')}",
										"type": "Expression"
									}
								}
							}
						}
					]
				}
			},
			{
				"name": "task-source-row-count",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "row-count",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "log-status-update",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"ID": {
							"value": "@pipeline().parameters.task.ID",
							"type": "Expression"
						},
						"Property": "SourceRowCount",
						"Value": {
							"value": "@{activity('row-count').output.firstRow.RowCount}",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "log-count",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "row-count",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "log-message",
						"type": "PipelineReference"
					},
					"waitOnCompletion": false,
					"parameters": {
						"ID": {
							"value": "@pipeline().parameters.task.ID",
							"type": "Expression"
						},
						"ActivityType": "row-count",
						"Message": {
							"value": "@{activity('row-count')}",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "cleansed-source-count",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "set-query",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "OracleSource",
						"oracleReaderQuery": {
							"value": "@replace(replace('SELECT COUNT(*) CleansedSourceCount FROM $A$.$B$',\n'$A$',pipeline().parameters.task.SourceSchema),\n'$B$',pipeline().parameters.task.SourceTableName)",
							"type": "Expression"
						},
						"partitionOption": "None",
						"convertDecimalToInteger": false,
						"queryTimeout": "02:00:00"
					},
					"dataset": {
						"referenceName": "Oracle_Server",
						"type": "DatasetReference",
						"parameters": {
							"kvSecret": {
								"value": "@pipeline().parameters.task.SourceKeyVaultSecret",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "task-cleansed-source-count",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "cleansed-source-count",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "log-status-update",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"ID": {
							"value": "@pipeline().parameters.task.ID",
							"type": "Expression"
						},
						"Property": "CleansedSourceCount",
						"Value": {
							"value": "@{activity('cleansed-source-count').output.firstRow.CleansedSourceCount}",
							"type": "Expression"
						}
					}
				}
			}
		],
		"parameters": {
			"task": {
				"type": "object",
				"defaultValue": {
					"BatchID": "dd656a6d",
					"ID": 1946,
					"LowWatermark": "25/SEP/2012 13:46:39",
					"SourceID": 57001,
					"SystemCode": "iicatsref",
					"SourceSchema": "iicats",
					"SourceTableName": "bi_reference_codes",
					"SourceQuery": null,
					"SourceFolderPath": null,
					"SourceFileName": null,
					"SourceKeyVaultSecret": "daf-oracle-IICATS-connectionstring",
					"SourceHandler": "oracle-load",
					"LoadType": null,
					"BusinessKeyColumn": null,
					"WatermarkColumn": "TO_CHAR(M_DATE, 'DD/MON/YYYY HH24:MI:SS')",
					"RawHandler": "raw-load-delta",
					"RawPath": "/raw/iicatsref/iicats_bi_reference_codes/$yyyy$/$MM$/$dd$/$HH$$mm$/$guid$.parquet",
					"CleansedHandler": "cleansed-load-delta",
					"CleansedPath": "/cleansed/iicatsref/iicats_bi_reference_codes/",
					"DestinationSchema": "iicats",
					"DestinationTableName": "bi_reference_codes",
					"DestinationKeyVaultSecret": null,
					"ExtendedProperties": null,
					"QueryFilter": null,
					"ExtraConfig": "[{\"DefaultPoolName\":\"pool-small\"}]"
				}
			}
		},
		"variables": {
			"Query": {
				"type": "String"
			},
			"OutputFullPath": {
				"type": "String"
			},
			"WatermarkColumn": {
				"type": "String"
			},
			"BaseQuery": {
				"type": "String"
			},
			"QueryClause": {
				"type": "String"
			},
			"IsDelta": {
				"type": "Boolean"
			},
			"HighWatermark": {
				"type": "String"
			},
			"LowWatermark": {
				"type": "String"
			}
		},
		"folder": {
			"name": "MDP-Framework/SourceHandler/Oracle"
		},
		"annotations": [],
		"lastPublishTime": "2021-07-08T10:40:24Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}
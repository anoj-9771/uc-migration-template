{
	"name": "04-MySQL-Generate-Source-Schema",
	"properties": {
		"activities": [
			{
				"name": "Generate Schema",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Set-Folder",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Set-File",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Set-Table",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Set-Schema",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "MySqlSource",
						"query": {
							"value": "@replace(replace(variables('SQL'), '<<TABLE>>', variables('Table')), '<<SCHEMA>>', variables('Schema'))",
							"type": "Expression"
						}
					},
					"sink": {
						"type": "DelimitedTextSink",
						"storeSettings": {
							"type": "AzureBlobStorageWriteSettings"
						},
						"formatSettings": {
							"type": "DelimitedTextWriteSettings",
							"quoteAllText": true,
							"fileExtension": ".txt"
						}
					},
					"enableStaging": false
				},
				"inputs": [
					{
						"referenceName": "SRC_MySQL",
						"type": "DatasetReference",
						"parameters": {
							"kvSecret": {
								"value": "@pipeline().parameters.TaskDetails.SourceServer",
								"type": "Expression"
							}
						}
					}
				],
				"outputs": [
					{
						"referenceName": "RAW_ADLS_Schema",
						"type": "DatasetReference",
						"parameters": {
							"BlobPath": {
								"value": "@variables('Folder')",
								"type": "Expression"
							},
							"BlobName": {
								"value": "@variables('File')",
								"type": "Expression"
							},
							"Compression": "none",
							"ColumnDelim": ",",
							"HeaderRow": false
						}
					}
				]
			},
			{
				"name": "Generate Schema Original",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Generate Schema",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "MySqlSource",
						"query": {
							"value": "@replace(replace(variables('SQL-Original'), '<<TABLE>>', variables('Table')), '<<SCHEMA>>', variables('Schema'))",
							"type": "Expression"
						}
					},
					"sink": {
						"type": "DelimitedTextSink",
						"storeSettings": {
							"type": "AzureBlobStorageWriteSettings"
						},
						"formatSettings": {
							"type": "DelimitedTextWriteSettings",
							"quoteAllText": true,
							"fileExtension": ".txt"
						}
					},
					"enableStaging": false
				},
				"inputs": [
					{
						"referenceName": "SRC_MySQL",
						"type": "DatasetReference",
						"parameters": {
							"kvSecret": {
								"value": "@pipeline().parameters.TaskDetails.SourceServer",
								"type": "Expression"
							}
						}
					}
				],
				"outputs": [
					{
						"referenceName": "RAW_ADLS_Schema",
						"type": "DatasetReference",
						"parameters": {
							"BlobPath": {
								"value": "@concat(variables('Folder'), '/original/')",
								"type": "Expression"
							},
							"BlobName": {
								"value": "@concat(variables('File'), '.csv')",
								"type": "Expression"
							},
							"Compression": "none",
							"ColumnDelim": ",",
							"HeaderRow": true
						}
					}
				]
			},
			{
				"name": "Set-Folder",
				"type": "SetVariable",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"variableName": "Folder",
					"value": {
						"value": "@toLower(concat(pipeline().parameters.TaskDetails.SourceGroup, '//', 'schema'))",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Set-File",
				"type": "SetVariable",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"variableName": "File",
					"value": {
						"value": "@toLower(concat(pipeline().parameters.TaskDetails.SourceName, '.', 'schema'))",
						"type": "Expression"
					}
				}
			},
			{
				"name": "If-Empty-Delete",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Generate Schema Original",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@equals(activity('Generate Schema').output.rowsCopied, 0)",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Delete-Empty-File",
							"type": "Delete",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataset": {
									"referenceName": "BINARY_ADLS",
									"type": "DatasetReference",
									"parameters": {
										"File": {
											"value": "@variables('File')",
											"type": "Expression"
										},
										"Container": "raw",
										"Folder": {
											"value": "@variables('Folder')",
											"type": "Expression"
										}
									}
								},
								"logStorageSettings": {
									"linkedServiceName": {
										"referenceName": "LS-AzureDataLake",
										"type": "LinkedServiceReference"
									},
									"path": "log"
								},
								"enableLogging": true,
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								}
							}
						}
					]
				}
			},
			{
				"name": "Set-Table",
				"type": "SetVariable",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"variableName": "Table",
					"value": {
						"value": "@split(pipeline().parameters.TaskDetails.SourceLocation,'.')[1]",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Set-Schema",
				"type": "SetVariable",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"variableName": "Schema",
					"value": {
						"value": "@split(pipeline().parameters.TaskDetails.SourceLocation,'.')[0]",
						"type": "Expression"
					}
				}
			}
		],
		"parameters": {
			"TaskDetails": {
				"type": "object"
			}
		},
		"variables": {
			"Schema": {
				"type": "String"
			},
			"Table": {
				"type": "String"
			},
			"SQL": {
				"type": "String",
				"defaultValue": "SELECT column_name,     CASE \t\tWHEN data_type = 'bit' THEN 'boolean' \t\tWHEN data_type = 'bigint' THEN 'long' \t\tWHEN data_type IN ( 'int', 'smallint', 'tinyint', 'mediumint' ) THEN 'integer' \t\tWHEN data_type IN ( 'float', 'double', 'money', 'smallmoney' ) THEN 'double' \t\tWHEN data_type IN ( 'numeric', 'decimal' ) THEN 'decimal'  \t\tWHEN data_type IN ( 'nvarchar', 'varchar', 'char', 'nchar' ) THEN 'string' \t\tWHEN data_type IN ( 'date', 'datetime', 'datetime2', 'smalldatetime') THEN 'timestamp' \t\tELSE 'string'          \tEND AS fieldtype,     convert(case when data_type = 'mediumint' then 'int' else data_type end, char(100)) as data_type,     COALESCE(datetime_precision, numeric_precision, character_maximum_length) 'precision',     numeric_scale scale, \ttable_name, \ttable_schema FROM information_schema.columns   WHERE table_name = '<<TABLE>>'          AND table_schema = '<<SCHEMA>>'  ORDER BY ORDINAL_POSITION"
			},
			"SQL-Original": {
				"type": "String",
				"defaultValue": "SELECT * FROM information_schema.columns   WHERE table_name = '<<TABLE>>'          AND table_schema = '<<SCHEMA>>'  ORDER BY ORDINAL_POSITION"
			},
			"Folder": {
				"type": "String"
			},
			"File": {
				"type": "String"
			}
		},
		"folder": {
			"name": "MySQL"
		},
		"annotations": []
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}
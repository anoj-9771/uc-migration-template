{
	"name": "bom-nc-load",
	"properties": {
		"activities": [
			{
				"name": "copy-folder-binary",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "set-output-full-path",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "set-delete-source-files",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "for-each-nc-file",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [
					{
						"name": "Destination",
						"value": "raw/Cewa Financials/"
					}
				],
				"typeProperties": {
					"source": {
						"type": "BinarySource",
						"storeSettings": {
							"type": "AzureBlobStorageReadSettings",
							"recursive": true,
							"wildcardFileName": {
								"value": "@variables('WildcardFileName')",
								"type": "Expression"
							},
							"deleteFilesAfterCompletion": {
								"value": "@variables('DeleteSourceFiles')",
								"type": "Expression"
							}
						},
						"formatSettings": {
							"type": "BinaryReadSettings"
						}
					},
					"sink": {
						"type": "BinarySink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						}
					},
					"enableStaging": false
				},
				"inputs": [
					{
						"referenceName": "BLOB_Binary_Folder",
						"type": "DatasetReference",
						"parameters": {
							"folderPath": {
								"value": "@variables('SourceFilePath')",
								"type": "Expression"
							}
						}
					}
				],
				"outputs": [
					{
						"referenceName": "DLS_Binary_Folder",
						"type": "DatasetReference",
						"parameters": {
							"folderPath": {
								"value": "@variables('OutputFullPath')",
								"type": "Expression"
							}
						}
					}
				]
			},
			{
				"name": "set-source-file-path",
				"type": "SetVariable",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"variableName": "SourceFilePath",
					"value": {
						"value": "@pipeline().parameters.task.SourceQuery",
						"type": "Expression"
					}
				}
			},
			{
				"name": "set-output-full-path",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "set-wildcard-file-name",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "OutputFullPath",
					"value": {
						"value": "@replace(replace(replace(replace(replace(replace(replace(\npipeline().parameters.task.RawPath\n,'$yyyy$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'yyyy'))\n,'$MM$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'MM'))\n,'$dd$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'dd'))\n,'$HH$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'HH'))\n,'$mm$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'mm'))\n,'$guid$', guid())\n,variables('WildcardFileName'),'')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "task-raw-path",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "copy-folder-binary",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "log-status-update",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"ID": {
							"value": "@pipeline().parameters.task.ID",
							"type": "Expression"
						},
						"Property": "RawPath",
						"Value": {
							"value": "@concat(variables('OutputFullPath'),variables('WildcardFileName'))",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "log-copy",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "copy-folder-binary",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "log-message",
						"type": "PipelineReference"
					},
					"waitOnCompletion": false,
					"parameters": {
						"ID": {
							"value": "@pipeline().parameters.task.ID",
							"type": "Expression"
						},
						"ActivityType": "copy-data",
						"Message": {
							"value": "@{activity('copy-folder-binary')}",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "fail-folder-copy",
				"type": "Fail",
				"dependsOn": [
					{
						"activity": "copy-folder-binary",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"message": "fail-folder-copy",
					"errorCode": "500"
				}
			},
			{
				"name": "set-delete-source-files",
				"type": "SetVariable",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"variableName": "DeleteSourceFiles",
					"value": {
						"value": "@if(contains(coalesce(pipeline().parameters.task.ExtendedProperties, ''), 'DeleteSourceFiles'), bool(json(coalesce(pipeline().parameters.task.ExtendedProperties, '{}')).DeleteSourceFiles),false)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "set-wildcard-file-name",
				"type": "SetVariable",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"variableName": "WildcardFileName",
					"value": {
						"value": "@substring(\n    pipeline().parameters.task.RawPath,\n    add(lastindexof(pipeline().parameters.task.RawPath,'/'), 1),\n    sub(length(pipeline().parameters.task.RawPath), add(lastindexof(pipeline().parameters.task.RawPath,'/'), 1))\n)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "get-container-file-list",
				"type": "GetMetadata",
				"dependsOn": [
					{
						"activity": "set-source-file-path",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "BLOB_Binary_Folder",
						"type": "DatasetReference",
						"parameters": {
							"folderPath": {
								"value": "@variables('SourceFilePath')",
								"type": "Expression"
							}
						}
					},
					"fieldList": [
						"childItems"
					],
					"storeSettings": {
						"type": "AzureBlobStorageReadSettings",
						"recursive": true,
						"enablePartitionDiscovery": false
					},
					"formatSettings": {
						"type": "BinaryReadSettings"
					}
				}
			},
			{
				"name": "for-each-nc-file",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "filter-nc-files",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "set-instance-pool-id",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('filter-nc-files').output.Value",
						"type": "Expression"
					},
					"batchCount": 10,
					"activities": [
						{
							"name": "preprocess-bom-nc-file",
							"type": "DatabricksNotebook",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebookPath": "/MDP-Framework/Zone/SourceHandler/preprocess-iot-bom-nc",
								"baseParameters": {
									"source-container": {
										"value": "@variables('SourceFilePath')",
										"type": "Expression"
									},
									"file-name": {
										"value": "@item().name",
										"type": "Expression"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LS_AzureDatabricks_InstancePool",
								"type": "LinkedServiceReference",
								"parameters": {
									"kvSecret": "databricks-token",
									"PoolId": {
										"value": "@variables('InstancePoolId')",
										"type": "Expression"
									},
									"newClusterNumOfWorker": "1:4"
								}
							}
						}
					]
				}
			},
			{
				"name": "filter-nc-files",
				"type": "Filter",
				"dependsOn": [
					{
						"activity": "get-container-file-list",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('get-container-file-list').output.childItems",
						"type": "Expression"
					},
					"condition": {
						"value": "@contains(item().name, '.nc')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "get-bearer-token",
				"type": "WebActivity",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"url": {
						"value": "@concat('https://', pipeline().globalParameters.keyVaultName, '.vault.azure.net/secrets/databricks-token?api-version=7.0')",
						"type": "Expression"
					},
					"method": "GET",
					"authentication": {
						"type": "MSI",
						"resource": "https://vault.azure.net"
					}
				}
			},
			{
				"name": "get-databricks-instance-pools",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "get-bearer-token",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"url": "https://australiaeast.azuredatabricks.net/api/2.0/instance-pools/list",
					"method": "GET",
					"headers": {
						"Authorization": {
							"value": "Bearer @{activity('get-bearer-token').output.value}",
							"type": "Expression"
						}
					},
					"body": {
						"autoscale": {
							"min_workers": 2,
							"max_workers": 10
						},
						"cluster_name": "sewer-cctv",
						"spark_version": "10.4.x-cpu-ml-scala2.12",
						"spark_conf": {
							"spark.databricks.delta.preview.enabled": "true"
						},
						"ssh_public_keys": [],
						"autotermination_minutes": 60,
						"init_scripts": [],
						"instance_pool_id": "1024-005500-twain3-pool-jk2lh0go",
						"driver_instance_pool_id": "1024-005500-twain3-pool-jk2lh0go",
						"runtime_engine": "STANDARD"
					}
				}
			},
			{
				"name": "filter-instance-pool",
				"type": "Filter",
				"dependsOn": [
					{
						"activity": "set-instance-pool-name",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "get-databricks-instance-pools",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('get-databricks-instance-pools').output.instance_pools",
						"type": "Expression"
					},
					"condition": {
						"value": "@equals(item().instance_pool_name, variables('InstancePoolName'))",
						"type": "Expression"
					}
				}
			},
			{
				"name": "set-instance-pool-name",
				"type": "SetVariable",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"variableName": "InstancePoolName",
					"value": {
						"value": "@if(\n\tcontains(\n\t\tcoalesce(\n\t\t\tpipeline().parameters.task.ExtendedProperties, ''), \n\t\t\t'OverridePoolName'\n\t), \n\tjson(\n\t\tcoalesce(\n\t\t\tpipeline().parameters.task.ExtendedProperties, \n\t\t\t'{}'\n\t\t)\n\t).OverridePoolName,\n\tjson(pipeline().parameters.task.ExtraConfig)[0].DefaultPoolName\n)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "set-instance-pool-id",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "filter-instance-pool",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "InstancePoolId",
					"value": {
						"value": "@activity('filter-instance-pool').output.value[0].instance_pool_id",
						"type": "Expression"
					}
				}
			}
		],
		"parameters": {
			"task": {
				"type": "object",
				"defaultValue": {
					"BatchID": "2b2759dc",
					"ID": 2280,
					"LowWatermark": null,
					"SourceID": 72001,
					"SystemCode": "BOM715",
					"SourceSchema": "BOM",
					"SourceTableName": "BOM715",
					"SourceQuery": "bom715data-dev",
					"SourceFolderPath": null,
					"SourceFileName": "*.csv",
					"SourceKeyVaultSecret": "daf-sa-blob-sastoken",
					"SourceHandler": "bom-load",
					"LoadType": null,
					"BusinessKeyColumn": null,
					"WatermarkColumn": null,
					"RawHandler": "raw-load",
					"RawPath": "/raw/BOM715/BOM_BOM715/$yyyy$/$MM$/$dd$/$HH$$mm$/*.csv",
					"CleansedHandler": "BOM715",
					"CleansedPath": "/cleansed/BOM715/BOM_BOM715/",
					"DestinationSchema": "BOM",
					"DestinationTableName": "BOM715",
					"DestinationKeyVaultSecret": null,
					"ExtendedProperties": "{ \"DeleteSourceFiles\" : \"True\" }",
					"QueryFilter": null,
					"ExtraConfig": "[{\"DefaultPoolId\":\"1031-235327-tea10-pool-xdy9ga6w\"}]"
				}
			}
		},
		"variables": {
			"OutputFullPath": {
				"type": "String"
			},
			"SourceFilePath": {
				"type": "String"
			},
			"DeleteSourceFiles": {
				"type": "Boolean",
				"defaultValue": false
			},
			"WildcardFileName": {
				"type": "String"
			},
			"InstancePoolName": {
				"type": "String"
			},
			"InstancePoolId": {
				"type": "String"
			}
		},
		"folder": {
			"name": "MDP-Framework/SourceHandler/BOM"
		},
		"annotations": []
	}
}
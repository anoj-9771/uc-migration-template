{
	"name": "scctv-deploy-azure-sql-tables",
	"properties": {
		"activities": [
			{
				"name": "create-sp_create_dbo_kaltura_tables",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "drop-sp_create_dbo_kaltura_tables-if-exists",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "LS_AzureSqlDatabase_Sewercctv",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "NonQuery",
							"text": {
								"value": "CREATE procedure [dbo].[sp_create_dbo_kaltura_tables] as\nBEGIN\n\nIF NOT EXISTS (SELECT * FROM sys.tables t \nJOIN sys.schemas s ON (t.schema_id = s.schema_id) \nWHERE s.name = 'dbo' AND t.name = 'scctv_kaltura_metadata')\nCREATE TABLE dbo.scctv_kaltura_metadata (\n        id bigint,\n        partnerId bigint,\n        metadataProfileId bigint,\n        metadataProfileVersion bigint,\n        metadataObjectType nvarchar(max),\n        objectId nvarchar(max),\n        version bigint,\n        status nvarchar(max),\n        AssessedByName nvarchar(max),\n        AssessedByDate datetime,\n        ParentWorkOrderNumber nvarchar(max),\n        ChildWorkOrderNumbers nvarchar(max),\n        WorkOrderDescription nvarchar(max),\n        AssetNumbers nvarchar(max),\n        TaskCode nvarchar(max),\n        Suburb nvarchar(max),\n        AddressStreet nvarchar(max),\n        Product nvarchar(max),\n        Contractor nvarchar(max),\n        UpstreamMH nvarchar(max),\n        DownstreamMH nvarchar(max),\n        DirectionOfSurvey nvarchar(max),\n        DateOfCompletedInspectionString nvarchar(max),\n        TimeOfCompletedInspectionString nvarchar(max),\n        PackageName nvarchar(max),\n        Cleaned nvarchar(max),\n        SurveyedLength decimal,\n        DiscardDate datetime,\n        Condition nvarchar(max),\n        Serviceability nvarchar(max),\n        Infiltration nvarchar(max),\n        createdAt datetime,\n        updatedAt datetime,\n        processed_timestamp datetime\n        );\n\nIF NOT EXISTS (SELECT * FROM sys.tables t \nJOIN sys.schemas s ON (t.schema_id = s.schema_id) \nWHERE s.name = 'dbo' AND t.name = 'scctv_kaltura_attachments')\nCREATE TABLE dbo.scctv_kaltura_attachments (\n        id nvarchar(max),\n        entryId nvarchar(max),\n        partnerId bigint,\n        version bigint,\n        size nvarchar(max),\n        tags nvarchar(max),\n        fileExt nvarchar(max),\n        createdAt datetime,\n        updatedAt datetime,\n        description nvarchar(max),\n        partnerDescription nvarchar(max),\n        sizeInBytes nvarchar(max),\n        filename nvarchar(max),\n        title nvarchar(max),\n        format nvarchar(max),\n        status nvarchar(max),\n        processed_timestamp datetime\n        );\n\nIF NOT EXISTS (SELECT * FROM sys.tables t \nJOIN sys.schemas s ON (t.schema_id = s.schema_id) \nWHERE s.name = 'dbo' AND t.name = 'scctv_kaltura_flavors')\nCREATE TABLE dbo.scctv_kaltura_flavors (\n        id nvarchar(max),\n        entryId nvarchar(max),\n        partnerId bigint,\n        version bigint,\n        size nvarchar(max),\n        tags nvarchar(max),\n        fileExt nvarchar(max),\n        createdAt datetime,\n        updatedAt datetime,\n        description nvarchar(max),\n        sizeInBytes nvarchar(max),\n        flavorParamsId nvarchar(max),\n        width bigint,\n        height bigint,\n        bitrate bigint,\n        frameRate bigint,\n        isOriginal bit,\n        isWeb bit,\n        containerFormat nvarchar(max),\n        videoCodecId nvarchar(max),\n        status nvarchar(max),\n        isDefault bit,\n        language bigint,\n        processed_timestamp datetime\n        );\n\nIF NOT EXISTS (SELECT * FROM sys.tables t \nJOIN sys.schemas s ON (t.schema_id = s.schema_id) \nWHERE s.name = 'dbo' AND t.name = 'scctv_kaltura_mediaentry')\nCREATE TABLE dbo.scctv_kaltura_mediaentry (\n        id nvarchar(max),\n        name nvarchar(max),\n        description nvarchar(max),\n        partnerId bigint,\n        userId nvarchar(max),\n        creatorId nvarchar(max),\n        tags nvarchar(max),\n        categories nvarchar(max),\n        categoriesIds nvarchar(max),\n        status nvarchar(max),\n        moderationStatus nvarchar(max),\n        moderationCount bigint,\n        type nvarchar(max),\n        createdAt datetime,\n        updatedAt datetime,\n        rank float,\n        totalRank bigint,\n        votes bigint,\n        downloadUrl nvarchar(max),\n        searchText nvarchar(max),\n        licenseType nvarchar(max),\n        version bigint,\n        thumbnailUrl nvarchar(max),\n        replacementStatus nvarchar(max),\n        partnerSortValue bigint,\n        conversionProfileId bigint,\n        rootEntryId nvarchar(max),\n        operationAttributes nvarchar(max),\n        entitledUsersEdit nvarchar(max),\n        entitledUsersPublish nvarchar(max),\n        entitledUsersView nvarchar(max),\n        capabilities nvarchar(max),\n        displayInSearch nvarchar(max),\n        blockAutoTranscript bit,\n        plays bigint,\n        views bigint,\n        lastPlayedAt datetime,\n        width bigint,\n        height bigint,\n        duration bigint,\n        msDuration bigint,\n        mediaType nvarchar(max),\n        conversionQuality nvarchar(max),\n        sourceType nvarchar(max),\n        dataUrl nvarchar(max),\n        flavorParamsIds nvarchar(max),\n        processed_timestamp datetime\n        );\n\nIF NOT EXISTS (SELECT * FROM sys.tables t \nJOIN sys.schemas s ON (t.schema_id = s.schema_id) \nWHERE s.name = 'dbo' AND t.name = 'scctv_group_ai_identified_defects')\nCREATE TABLE dbo.scctv_group_ai_identified_defects (\n        video_id nvarchar(max),\n        defect nvarchar(max),\n        avg_probability FLOAT,\n        score FLOAT,\n        start_timestamp nvarchar(max),\n        end_timestamp nvarchar(max),\n        start_distance_m FLOAT,\n        end_distance_m FLOAT\n        );\n\n\nIF NOT EXISTS (SELECT * FROM sys.tables t \nJOIN sys.schemas s ON (t.schema_id = s.schema_id) \nWHERE s.name = 'dbo' AND t.name = 'scctv_contractor_annotations')\nCREATE TABLE dbo.scctv_contractor_annotations (\n        video_id nvarchar(max),\n        contractor_annotation nvarchar(max),\n        start_timestamp nvarchar(max),\n        end_timestamp nvarchar(max),\n        start_distance_m FLOAT,\n        end_distance_m FLOAT,\n        );\n\n\n\n\nEND\n",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "create-kaltura-dbo-tables",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "create-sp_create_dbo_kaltura_tables",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "dbo.sp_create_dbo_kaltura_tables"
				},
				"linkedServiceName": {
					"referenceName": "LS_AzureSqlDatabase_Sewercctv",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "drop-sp_create_dbo_kaltura_tables-if-exists",
				"type": "Script",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "LS_AzureSqlDatabase_Sewercctv",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'sp_create_dbo_kaltura_tables') AND type in (N'P', N'PC'))\n  DROP PROCEDURE [dbo].[sp_create_dbo_kaltura_tables]",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "create-sp_merge_dbo_to_CCTVPortal_kaltura",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "drop-sp_merge_dbo_to_CCTVPortal_kaltura-if-exists_copy1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "LS_AzureSqlDatabase_Sewercctv",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "NonQuery",
							"text": {
								"value": "CREATE procedure [dbo].[sp_merge_dbo_to_CCTVPortal_kaltura] as\nBEGIN\n\n/** Merge data from dbo staging tables to CCTVPortal tables for Kaltura Media Entry **/ \nMERGE CCTVPortal.VIDEO as tgt\nUSING ( SELECT\n            'Kaltura' as SOURCE,\n            ME.id as SOURCE_ID,\n            case when ME.status  = 'Ready' then 1 else  0 end as ACTIVE,\n            ME.name  as MEDIA_NAME,\n            ME.description as DESCRIPTION,\n            ME.creatorId as CREATOR_ID,\n            ME.createdAt as MEDIA_CREATED_AT,\n            ME.updatedat  as MEDIA_UPDATED_AT, \n            ME.downloadUrl as DOWNLOAD_URL,\n            ME.duration as DURATION,\n            ME.tags as TAGS, \n            ME.categories as CATEGORIES, \n            CURRENT_TIMESTAMP as CREATED_TIMESTAMP, \n            CURRENT_TIMESTAMP as UPDATED_TIMESTAMP  \n        FROM dbo.scctv_kaltura_mediaentry as ME\n        WHERE ME.processed_timestamp = (SELECT MAX(processed_timestamp) FROM dbo.scctv_kaltura_mediaentry)\n       ) as src\nON (tgt.SOURCE_ID = src.SOURCE_ID)\nWHEN MATCHED THEN\n    UPDATE SET SOURCE = src.SOURCE,\n        SOURCE_ID = src.SOURCE_ID,\n        ACTIVE = src.ACTIVE,\n        MEDIA_NAME = src.MEDIA_NAME,\n        DESCRIPTION = src.DESCRIPTION,\n        CREATOR_ID = src.CREATOR_ID,\n        MEDIA_CREATED_AT = src.MEDIA_CREATED_AT,\n        MEDIA_UPDATED_AT = src.MEDIA_UPDATED_AT,\n        DOWNLOAD_URL = src.DOWNLOAD_URL,\n        DURATION = src.DURATION,\n        TAGS = src.TAGS,\n        CATEGORIES = src.CATEGORIES,\n        CREATED_TIMESTAMP = src.CREATED_TIMESTAMP,\n        UPDATED_TIMESTAMP = src.UPDATED_TIMESTAMP\nWHEN NOT MATCHED THEN\n    INSERT (SOURCE,\n        SOURCE_ID,\n        ACTIVE,\n        MEDIA_NAME,\n        DESCRIPTION,\n        CREATOR_ID,\n        MEDIA_CREATED_AT,\n        MEDIA_UPDATED_AT,\n        DOWNLOAD_URL,\n        DURATION,\n        TAGS,\n        CATEGORIES,\n        CREATED_TIMESTAMP,\n        UPDATED_TIMESTAMP\n  )\n  VALUES (src.SOURCE,\n        src.SOURCE_ID,\n        src.ACTIVE,\n        src.MEDIA_NAME,\n        src.DESCRIPTION,\n        src.CREATOR_ID,\n        src.MEDIA_CREATED_AT,\n        src.MEDIA_UPDATED_AT,\n        src.DOWNLOAD_URL,\n        src.DURATION,\n        src.TAGS,\n        src.CATEGORIES,\n        src.CREATED_TIMESTAMP,\n        src.UPDATED_TIMESTAMP\n  );\n\n/** Merge data from dbo staging tables to CCTVPortal tables for Kaltura Metadata **/ \nMERGE CCTVPortal.VIDEO_METADATA as tgt\nUSING ( SELECT \n            V.ID as VIDEO_ID,\n            CASE WHEN ME.status = 'VALID' THEN 1 ELSE 0 END as ACTIVE,\n            ME.ParentWorkOrderNumber as PARENT_WORK_ORDER, \n            ME.ChildWorkOrderNumbers as CHILD_WORK_ORDERS, \n            ME.WorkOrderDescription as WORK_ORDER_DESCRIPTION, \n            ME.AssetNumbers as  ASSET_NUMBERS, \n            ME.TaskCode as TASK_CODE,\n            ME.Suburb as SUBURB,\n            ME.AddressStreet as STREET_ADDRESS,\n            ME.DateOfCompletedInspectionString as INSPECTION_DATE_STR, \n            ME.TimeOfCompletedInspectionString as INSPECTION_TIME_STR, \n            CONVERT(DATE, ME.DateOfCompletedInspectionString, 103) as INSPECTION_DATE, \n            TRY_CAST(ME.TimeOfCompletedInspectionString as TIME(0)) as INSPECTION_TIME,   \n            ME.UpstreamMH as UPSTREAM_MANHOLE,\n            ME.DownstreamMH as DOWNSTREAM_MANHOLE,\n            ME.DirectionOfSurvey as SURVEY_DIRECTION,\n            ME.SurveyedLength as SURVEY_LENGTH,\n            ME.Product as PRODUCT,\n            ME.Contractor AS CONTRACTOR,\n            ME.PackageName AS PACKAGE_NAME,\n            ME.Cleaned AS CLEANED, \n            NULL  AS FACILITY, \n            NULL AS LOCATION,\n            ME.Condition AS CONDITION,\n            ME.Serviceability as SERVICEABILITY, \n            ME.Infiltration as INFILTRATION,\n            ME.AssessedByName as ASSESSED_BY,\n            TRY_CAST(ME.AssessedByDate AS date) as ASSESSED_DATE, \n            CAST(getdate() as datetime2) as   CREATED_TIMESTAMP,\n            CAST(getdate() as datetime2) as UPDATED_TIMESTAMP\n        FROM dbo.scctv_kaltura_metadata AS ME\n        INNER JOIN CCTVPortal.VIDEO AS V \n        ON V.SOURCE = 'Kaltura' AND V.SOURCE_ID = ME.objectId\n        WHERE ME.processed_timestamp = (SELECT MAX(processed_timestamp) FROM dbo.scctv_kaltura_metadata)\n       ) as src\nON (tgt.VIDEO_ID = src.VIDEO_ID)\nWHEN MATCHED THEN\n    UPDATE SET VIDEO_ID = src.VIDEO_ID,\n        ACTIVE = src.ACTIVE,\n        PARENT_WORK_ORDER = src.PARENT_WORK_ORDER,\n        CHILD_WORK_ORDERS = src.CHILD_WORK_ORDERS,\n        WORK_ORDER_DESCRIPTION = src.WORK_ORDER_DESCRIPTION,\n        ASSET_NUMBERS = src.ASSET_NUMBERS,\n        TASK_CODE = src.TASK_CODE,\n        SUBURB = src.SUBURB,\n        STREET_ADDRESS = src.STREET_ADDRESS,\n        INSPECTION_DATE_STR = src.INSPECTION_DATE_STR,\n        INSPECTION_TIME_STR = src.INSPECTION_TIME_STR,\n        INSPECTION_DATE = src.INSPECTION_DATE,\n        INSPECTION_TIME = src.INSPECTION_TIME,\n        UPSTREAM_MANHOLE = src.UPSTREAM_MANHOLE,\n        DOWNSTREAM_MANHOLE = src.DOWNSTREAM_MANHOLE,\n        SURVEY_DIRECTION = src.SURVEY_DIRECTION,\n        SURVEY_LENGTH = src.SURVEY_LENGTH,\n        PRODUCT = src.PRODUCT,\n        CONTRACTOR = src.CONTRACTOR,\n        PACKAGE_NAME = src.PACKAGE_NAME,\n        CLEANED = src.CLEANED,\n        FACILITY = src.FACILITY,\n        LOCATION = src.LOCATION,\n        CONDITION = src.CONDITION,\n        SERVICEABILITY = src.SERVICEABILITY,\n        INFILTRATION = src.INFILTRATION,\n        ASSESSED_BY = src.ASSESSED_BY,\n        ASSESSED_DATE = src.ASSESSED_DATE,\n        CREATED_TIMESTAMP = src.CREATED_TIMESTAMP,\n        UPDATED_TIMESTAMP = src.UPDATED_TIMESTAMP\nWHEN NOT MATCHED THEN\n    INSERT (VIDEO_ID,\n        ACTIVE,\n        PARENT_WORK_ORDER,\n        CHILD_WORK_ORDERS,\n        WORK_ORDER_DESCRIPTION,\n        ASSET_NUMBERS,\n        TASK_CODE,\n        SUBURB,\n        STREET_ADDRESS,\n        INSPECTION_DATE_STR,\n        INSPECTION_TIME_STR,\n        INSPECTION_DATE,\n        INSPECTION_TIME,\n        UPSTREAM_MANHOLE,\n        DOWNSTREAM_MANHOLE,\n        SURVEY_DIRECTION,\n        SURVEY_LENGTH,\n        PRODUCT,\n        CONTRACTOR,\n        PACKAGE_NAME,\n        CLEANED,\n        FACILITY,\n        LOCATION,\n        CONDITION,\n        SERVICEABILITY,\n        INFILTRATION,\n        ASSESSED_BY,\n        ASSESSED_DATE,\n        CREATED_TIMESTAMP,\n        UPDATED_TIMESTAMP\n  )\n  VALUES (src.VIDEO_ID,\n        src.ACTIVE,\n        src.PARENT_WORK_ORDER,\n        src.CHILD_WORK_ORDERS,\n        src.WORK_ORDER_DESCRIPTION,\n        src.ASSET_NUMBERS,\n        src.TASK_CODE,\n        src.SUBURB,\n        src.STREET_ADDRESS,\n        src.INSPECTION_DATE_STR,\n        src.INSPECTION_TIME_STR,\n        src.INSPECTION_DATE,\n        src.INSPECTION_TIME,\n        src.UPSTREAM_MANHOLE,\n        src.DOWNSTREAM_MANHOLE,\n        src.SURVEY_DIRECTION,\n        src.SURVEY_LENGTH,\n        src.PRODUCT,\n        src.CONTRACTOR,\n        src.PACKAGE_NAME,\n        src.CLEANED,\n        src.FACILITY,\n        src.LOCATION,\n        src.CONDITION,\n        src.SERVICEABILITY,\n        src.INFILTRATION,\n        src.ASSESSED_BY,\n        src.ASSESSED_DATE,\n        src.CREATED_TIMESTAMP,\n        src.UPDATED_TIMESTAMP\n  );\n\n/** Merge data from dbo staging tables to CCTVPortal tables for Kaltura Attachments **/ \nMERGE CCTVPortal.VIDEO_ATTACHMENT as tgt\nUSING ( SELECT\n            V.ID AS VIDEO_ID,\n            A.id AS ATTACHMENT_ID,\n            CASE WHEN A.status = 'Ready' then 1 else 0 end as ACTIVE,\n            A.filename AS FILENAME,\n            A.title AS TITLE,\n            A.fileExt AS FILE_EXT\n        FROM CCTVPortal.VIDEO AS V\n        INNER JOIN dbo.scctv_kaltura_attachments AS A\n        ON V.SOURCE_ID = A.entryId\n        WHERE A.processed_timestamp = (SELECT MAX(processed_timestamp) FROM dbo.scctv_kaltura_attachments)\n       ) as src\nON (tgt.ATTACHMENT_ID = src.ATTACHMENT_ID)\nWHEN MATCHED THEN\n    UPDATE SET VIDEO_ID = src.VIDEO_ID,\n        ATTACHMENT_ID = src.ATTACHMENT_ID,\n        ACTIVE = src.ACTIVE,\n        FILENAME = src.FILENAME,\n        TITLE = src.TITLE,\n        FILE_EXT = src.FILE_EXT\nWHEN NOT MATCHED THEN\n    INSERT (VIDEO_ID,\n        ATTACHMENT_ID,\n        ACTIVE,\n        FILENAME,\n        TITLE,\n        FILE_EXT\n  )\n  VALUES (src.VIDEO_ID,\n    src.ATTACHMENT_ID,\n    src.ACTIVE,\n    src.FILENAME,\n    src.TITLE,\n    src.FILE_EXT\n  );\n\n\n\n\nEND",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "drop-sp_merge_dbo_to_CCTVPortal_kaltura-if-exists_copy1",
				"type": "Script",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "LS_AzureSqlDatabase_Sewercctv",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'sp_merge_dbo_to_CCTVPortal_kaltura') AND type in (N'P', N'PC'))\n  DROP PROCEDURE [dbo].[sp_merge_dbo_to_CCTVPortal_kaltura]",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "create-sp_create_tmp_dbo_kaltura_tables",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "drop-sp_create_tmp_dbo_kaltura_tables-if-exists_copy2",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "LS_AzureSqlDatabase_Sewercctv",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "NonQuery",
							"text": {
								"value": "CREATE procedure [dbo].[sp_create_tmp_dbo_kaltura_tables] as\nBEGIN\n\nIF NOT EXISTS (SELECT * FROM sys.tables t \nJOIN sys.schemas s ON (t.schema_id = s.schema_id) \nWHERE s.name = 'dbo' AND t.name = 'tmp_datalake_kaltura_metadata')\nCREATE TABLE dbo.scctv_kaltura_metadata (\n        id bigint,\n        partnerId bigint,\n        metadataProfileId bigint,\n        metadataProfileVersion bigint,\n        metadataObjectType nvarchar(max),\n        objectId nvarchar(max),\n        version bigint,\n        status nvarchar(max),\n        AssessedByName nvarchar(max),\n        AssessedByDate datetime2,\n        ParentWorkOrderNumber nvarchar(max),\n        ChildWorkOrderNumbers nvarchar(max),\n        WorkOrderDescription nvarchar(max),\n        AssetNumbers nvarchar(max),\n        TaskCode nvarchar(max),\n        Suburb nvarchar(max),\n        AddressStreet nvarchar(max),\n        Product nvarchar(max),\n        Contractor nvarchar(max),\n        UpstreamMH nvarchar(max),\n        DownstreamMH nvarchar(max),\n        DirectionOfSurvey nvarchar(max),\n        DateOfCompletedInspectionString nvarchar(max),\n        TimeOfCompletedInspectionString nvarchar(max),\n        PackageName nvarchar(max),\n        Cleaned nvarchar(max),\n        SurveyedLength decimal,\n        DiscardDate datetime2,\n        Condition nvarchar(max),\n        Serviceability nvarchar(max),\n        Infiltration nvarchar(max),\n        createdAt datetime2,\n        updatedAt datetime2,\n        processed_timestamp datetime2\n        );\n\nIF NOT EXISTS (SELECT * FROM sys.tables t \nJOIN sys.schemas s ON (t.schema_id = s.schema_id) \nWHERE s.name = 'dbo' AND t.name = 'tmp_datalake_kaltura_attachments')\nCREATE TABLE dbo.scctv_kaltura_attachments (\n        id nvarchar(max),\n        entryId nvarchar(max),\n        partnerId bigint,\n        version bigint,\n        size nvarchar(max),\n        tags nvarchar(max),\n        fileExt nvarchar(max),\n        createdAt datetime2,\n        updatedAt datetime2,\n        description nvarchar(max),\n        partnerDescription nvarchar(max),\n        sizeInBytes nvarchar(max),\n        filename nvarchar(max),\n        title nvarchar(max),\n        format nvarchar(max),\n        status nvarchar(max),\n        processed_timestamp datetime2\n        );\n\nIF NOT EXISTS (SELECT * FROM sys.tables t \nJOIN sys.schemas s ON (t.schema_id = s.schema_id) \nWHERE s.name = 'dbo' AND t.name = 'tmp_datalake_kaltura_flavors')\nCREATE TABLE dbo.scctv_kaltura_flavors (\n        id nvarchar(max),\n        entryId nvarchar(max),\n        partnerId bigint,\n        version bigint,\n        size nvarchar(max),\n        tags nvarchar(max),\n        fileExt nvarchar(max),\n        createdAt datetime2,\n        updatedAt datetime2,\n        description nvarchar(max),\n        sizeInBytes nvarchar(max),\n        flavorParamsId nvarchar(max),\n        width bigint,\n        height bigint,\n        bitrate bigint,\n        frameRate bigint,\n        isOriginal bit,\n        isWeb bit,\n        containerFormat nvarchar(max),\n        videoCodecId nvarchar(max),\n        status nvarchar(max),\n        isDefault bit,\n        language bigint,\n        processed_timestamp datetime2\n        );\n\nIF NOT EXISTS (SELECT * FROM sys.tables t \nJOIN sys.schemas s ON (t.schema_id = s.schema_id) \nWHERE s.name = 'dbo' AND t.name = 'tmp_datalake_kaltura_mediaentry')\nCREATE TABLE dbo.scctv_kaltura_mediaentry (\n        id nvarchar(max),\n        name nvarchar(max),\n        description nvarchar(max),\n        partnerId bigint,\n        userId nvarchar(max),\n        creatorId nvarchar(max),\n        tags nvarchar(max),\n        categories nvarchar(max),\n        categoriesIds nvarchar(max),\n        status nvarchar(max),\n        moderationStatus nvarchar(max),\n        moderationCount bigint,\n        type nvarchar(max),\n        createdAt datetime2,\n        updatedAt datetime2,\n        rank float,\n        totalRank bigint,\n        votes bigint,\n        downloadUrl nvarchar(max),\n        searchText nvarchar(max),\n        licenseType nvarchar(max),\n        version bigint,\n        thumbnailUrl nvarchar(max),\n        replacementStatus nvarchar(max),\n        partnerSortValue bigint,\n        conversionProfileId bigint,\n        rootEntryId nvarchar(max),\n        operationAttributes nvarchar(max),\n        entitledUsersEdit nvarchar(max),\n        entitledUsersPublish nvarchar(max),\n        entitledUsersView nvarchar(max),\n        capabilities nvarchar(max),\n        displayInSearch nvarchar(max),\n        blockAutoTranscript bit,\n        plays bigint,\n        views bigint,\n        lastPlayedAt datetime2,\n        width bigint,\n        height bigint,\n        duration bigint,\n        msDuration bigint,\n        mediaType nvarchar(max),\n        conversionQuality nvarchar(max),\n        sourceType nvarchar(max),\n        dataUrl nvarchar(max),\n        flavorParamsIds nvarchar(max),\n        processed_timestamp datetime2\n        );\n\n\n\n\nEND",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "drop-sp_create_tmp_dbo_kaltura_tables-if-exists_copy2",
				"type": "Script",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "LS_AzureSqlDatabase_Sewercctv",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'sp_create_tmp_dbo_kaltura_tables') AND type in (N'P', N'PC'))\n  DROP PROCEDURE [dbo].[sp_create_tmp_dbo_kaltura_tables]",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "create-sp_merge_datalakeview_to_dbo_kaltura",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "drop-sp_merge_datalakeview_to_dbo_kaltura-if-exists",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "LS_AzureSqlDatabase_Sewercctv",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "NonQuery",
							"text": {
								"value": "CREATE procedure [dbo].[sp_merge_datalakeview_to_dbo_kaltura] as\nBEGIN\n\n/** Merge data from datalake to dbo staging tables for Kaltura Flavors **/ \nMERGE dbo.scctv_kaltura_flavors as tgt\nUSING dbo.tmp_datalake_kaltura_flavors as src\nON (tgt.id = src.id)\n\nWHEN MATCHED THEN\n    UPDATE SET id = src.id,\n        entryId = src.entryId,\n        partnerId = src.partnerId,\n        version = src.version,\n        size = src.size,\n        tags = src.tags,\n        fileExt = src.fileExt,\n        createdAt = src.createdAt,\n        updatedAt = src.updatedAt,\n        description = src.description,\n        sizeInBytes = src.sizeInBytes,\n        flavorParamsId = src.flavorParamsId,\n        width  = src.width,\n        height = src.height,\n        bitrate = src.bitrate,\n        frameRate = src.frameRate,\n        isOriginal = src.isOriginal,\n        isWeb = src.isWeb,\n        containerFormat = src.containerFormat,\n        videoCodecId = src.videoCodecId,\n        status = src.status,\n        isDefault = src.isDefault,\n        language = src.language,\n        processed_timestamp = src.processed_timestamp\nWHEN NOT MATCHED THEN\n    INSERT (\n    id,\n    entryId,\n    partnerId,\n    version,\n    size,\n    tags,\n    fileExt,\n    createdAt,\n    updatedAt,\n    description,\n    sizeInBytes,\n    flavorParamsId,\n    width,\n    height,\n    bitrate,\n    frameRate,\n    isOriginal,\n    isWeb,\n    containerFormat,\n    videoCodecId,\n    status,\n    isDefault,\n    language,\n    processed_timestamp\n  )\n  VALUES (\n    src.id,\n    src.entryId,\n    src.partnerId,\n    src.version,\n    src.size,\n    src.tags,\n    src.fileExt,\n    src.createdAt,\n    src.updatedAt,\n    src.description,\n    src.sizeInBytes,\n    src.flavorParamsId,\n    src.width,\n    src.height,\n    src.bitrate,\n    src.frameRate,\n    src.isOriginal,\n    src.isWeb,\n    src.containerFormat,\n    src.videoCodecId,\n    src.status,\n    src.isDefault,\n    src.language,\n    src.processed_timestamp\n  );\n\n/** Merge data from datalake to dbo staging tables for Kaltura Attachments **/ \nMERGE dbo.scctv_kaltura_attachments as tgt\nUSING dbo.tmp_datalake_kaltura_attachments as src\nON (tgt.id = src.id)\n\nWHEN MATCHED THEN\n    UPDATE SET id = src.id,\n        entryId = src.entryId,\n        partnerId = src.partnerId,\n        version = src.version,\n        size = src.size,\n        tags = src.tags,\n        fileExt = src.fileExt,\n        createdAt = src.createdAt,\n        updatedAt = src.updatedAt,\n        description = src.description,\n        partnerDescription = src.partnerDescription,\n        sizeInBytes = src.sizeInBytes,\n        filename = src.filename,\n        title = src.title,\n        format = src.format,\n        status = src.status,\n        processed_timestamp = src.processed_timestamp\nWHEN NOT MATCHED THEN\n    INSERT (\n    id,\n    entryId,\n    partnerId,\n    version,\n    size,\n    tags,\n    fileExt,\n    createdAt,\n    updatedAt,\n    description,\n    partnerDescription,\n    sizeInBytes,\n    filename,\n    title,\n    format,\n    status,\n    processed_timestamp\n  )\n  VALUES (\n    src.id,\n    src.entryId,\n    src.partnerId,\n    src.version,\n    src.size,\n    src.tags,\n    src.fileExt,\n    src.createdAt,\n    src.updatedAt,\n    src.description,\n    src.partnerDescription,\n    src.sizeInBytes,\n    src.filename,\n    src.title,\n    src.format,\n    src.status,\n    src.processed_timestamp\n  );\n\n/** Merge data from datalake to dbo staging tables for Kaltura Metadata **/ \nMERGE dbo.scctv_kaltura_metadata as tgt\nUSING dbo.tmp_datalake_kaltura_metadata as src\nON (tgt.id = src.id)\n\nWHEN MATCHED THEN\n    UPDATE SET id = src.id,\n        partnerId = src.partnerId,\n        metadataProfileId = src.metadataProfileId,\n        metadataProfileVersion = src.metadataProfileVersion,\n        metadataObjectType = src.metadataObjectType,\n        objectId = src.objectId,\n        version = src.version,\n        status = src.status,\n        AssessedByName = src.AssessedByName,\n        AssessedByDate = src.AssessedByDate,\n        ParentWorkOrderNumber = src.ParentWorkOrderNumber,\n        ChildWorkOrderNumbers = src.ChildWorkOrderNumbers,\n        WorkOrderDescription = src.WorkOrderDescription,\n        AssetNumbers = src.AssetNumbers,\n        TaskCode = src.TaskCode,\n        Suburb = src.Suburb,\n        AddressStreet = src.AddressStreet,\n        Product = src.Product,\n        Contractor = src.Contractor,\n        UpstreamMH = src.UpstreamMH,\n        DownstreamMH = src.DownstreamMH,\n        DirectionOfSurvey = src.DirectionOfSurvey,\n        DateOfCompletedInspectionString = src.DateOfCompletedInspectionString,\n        TimeOfCompletedInspectionString = src.TimeOfCompletedInspectionString,\n        PackageName = src.PackageName,\n        Cleaned = src.Cleaned,\n        SurveyedLength = src.SurveyedLength,\n        DiscardDate = src.DiscardDate,\n        Condition = src.Condition,\n        Serviceability = src.Serviceability,\n        Infiltration = src.Infiltration,\n        createdAt = src.createdAt,\n        updatedAt = src.updatedAt,\n        processed_timestamp = src.processed_timestamp\nWHEN NOT MATCHED THEN\n    INSERT (\n    id,\n    partnerId,\n    metadataProfileId,\n    metadataProfileVersion,\n    metadataObjectType,\n    objectId,\n    version,\n    status,\n    AssessedByName,\n    AssessedByDate,\n    ParentWorkOrderNumber,\n    ChildWorkOrderNumbers,\n    WorkOrderDescription,\n    AssetNumbers,\n    TaskCode,\n    Suburb,\n    AddressStreet,\n    Product,\n    Contractor,\n    UpstreamMH,\n    DownstreamMH,\n    DirectionOfSurvey,\n    DateOfCompletedInspectionString,\n    TimeOfCompletedInspectionString,\n    PackageName,\n    Cleaned,\n    SurveyedLength,\n    DiscardDate,\n    Condition,\n    Serviceability,\n    Infiltration,\n    createdAt,\n    updatedAt,\n    processed_timestamp\n  )\n  VALUES (\n    src.id,\n    src.partnerId,\n    src.metadataProfileId,\n    src.metadataProfileVersion,\n    src.metadataObjectType,\n    src.objectId,\n    src.version,\n    src.status,\n    src.AssessedByName,\n    src.AssessedByDate,\n    src.ParentWorkOrderNumber,\n    src.ChildWorkOrderNumbers,\n    src.WorkOrderDescription,\n    src.AssetNumbers,\n    src.TaskCode,\n    src.Suburb,\n    src.AddressStreet,\n    src.Product,\n    src.Contractor,\n    src.UpstreamMH,\n    src.DownstreamMH,\n    src.DirectionOfSurvey,\n    src.DateOfCompletedInspectionString,\n    src.TimeOfCompletedInspectionString,\n    src.PackageName,\n    src.Cleaned,\n    src.SurveyedLength,\n    src.DiscardDate,\n    src.Condition,\n    src.Serviceability,\n    src.Infiltration,\n    src.createdAt,\n    src.updatedAt,\n    src.processed_timestamp\n  );\n\n/** Merge data from datalake to dbo staging tables for Kaltura mediaEntry **/ \nMERGE dbo.scctv_kaltura_mediaentry as tgt\nUSING dbo.tmp_datalake_kaltura_media_entry as src\nON (tgt.id = src.id)\n\nWHEN MATCHED THEN\n    UPDATE SET id = src.id,\n        name = src.name,\n        description = src.description,\n        partnerId = src.partnerId,\n        userId = src.userId,\n        creatorId = src.creatorId,\n        tags = src.tags,\n        categories = src.categories,\n        categoriesIds = src.categoriesIds,\n        status = src.status,\n        moderationStatus = src.moderationStatus,\n        moderationCount = src.moderationCount,\n        type = src.type,\n        createdAt = src.createdAt,\n        updatedAt = src.updatedAt,\n        rank = src.rank,\n        totalRank = src.totalRank,\n        votes = src.votes,\n        downloadUrl = src.downloadUrl,\n        searchText = src.searchText,\n        licenseType = src.licenseType,\n        version = src.version,\n        thumbnailUrl = src.thumbnailUrl,\n        replacementStatus = src.replacementStatus,\n        partnerSortValue = src.partnerSortValue,\n        conversionProfileId = src.conversionProfileId,\n        rootEntryId = src.rootEntryId,\n        operationAttributes = src.operationAttributes,\n        entitledUsersEdit = src.entitledUsersEdit,\n        entitledUsersPublish = src.entitledUsersPublish,\n        entitledUsersView = src.entitledUsersView,\n        capabilities = src.capabilities,\n        displayInSearch = src.displayInSearch,\n        blockAutoTranscript = src.blockAutoTranscript,\n        plays = src.plays,\n        views = src.views,\n        lastPlayedAt = src.lastPlayedAt,\n        width = src.width,\n        height = src.height,\n        duration = src.duration,\n        msDuration = src.msDuration,\n        mediaType = src.mediaType,\n        conversionQuality = src.conversionQuality,\n        sourceType = src.sourceType,\n        dataUrl = src.dataUrl,\n        flavorParamsIds = src.flavorParamsIds,\n        processed_timestamp = src.processed_timestamp\nWHEN NOT MATCHED THEN\n    INSERT (\n    id,\n    name,\n    description,\n    partnerId,\n    userId,\n    creatorId,\n    tags,\n    categories,\n    categoriesIds,\n    status,\n    moderationStatus,\n    moderationCount,\n    type,\n    createdAt,\n    updatedAt,\n    rank,\n    totalRank,\n    votes,\n    downloadUrl,\n    searchText,\n    licenseType,\n    version,\n    thumbnailUrl,\n    replacementStatus,\n    partnerSortValue,\n    conversionProfileId,\n    rootEntryId,\n    operationAttributes,\n    entitledUsersEdit,\n    entitledUsersPublish,\n    entitledUsersView,\n    capabilities,\n    displayInSearch,\n    blockAutoTranscript,\n    plays,\n    views,\n    lastPlayedAt,\n    width,\n    height,\n    duration,\n    msDuration,\n    mediaType,\n    conversionQuality,\n    sourceType,\n    dataUrl,\n    flavorParamsIds,\n    processed_timestamp\n  )\n  VALUES (\n    src.id,\n    src.name,\n    src.description,\n    src.partnerId,\n    src.userId,\n    src.creatorId,\n    src.tags,\n    src.categories,\n    src.categoriesIds,\n    src.status,\n    src.moderationStatus,\n    src.moderationCount,\n    src.type,\n    src.createdAt,\n    src.updatedAt,\n    src.rank,\n    src.totalRank,\n    src.votes,\n    src.downloadUrl,\n    src.searchText,\n    src.licenseType,\n    src.version,\n    src.thumbnailUrl,\n    src.replacementStatus,\n    src.partnerSortValue,\n    src.conversionProfileId,\n    src.rootEntryId,\n    src.operationAttributes,\n    src.entitledUsersEdit,\n    src.entitledUsersPublish,\n    src.entitledUsersView,\n    src.capabilities,\n    src.displayInSearch,\n    src.blockAutoTranscript,\n    src.plays,\n    src.views,\n    src.lastPlayedAt,\n    src.width,\n    src.height,\n    src.duration,\n    src.msDuration,\n    src.mediaType,\n    src.conversionQuality,\n    src.sourceType,\n    src.dataUrl,\n    src.flavorParamsIds,\n    src.processed_timestamp\n  );\n\n\n\n\nEND",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "drop-sp_merge_datalakeview_to_dbo_kaltura-if-exists",
				"type": "Script",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "LS_AzureSqlDatabase_Sewercctv",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'sp_merge_datalakeview_to_dbo_kaltura') AND type in (N'P', N'PC'))\n  DROP PROCEDURE [dbo].[sp_merge_datalakeview_to_dbo_kaltura]",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			}
		],
		"folder": {
			"name": "AI-ML/Sewer CCTV"
		},
		"annotations": []
	}
}
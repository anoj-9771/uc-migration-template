{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-swcnonprod01-daf-dev-01"
		},
		"BATCH_DAILY_HYDRA_properties_01-Main_parameters_TriggerName": {
			"type": "string",
			"defaultValue": "BATCH_DAILY_HYDRA"
		},
		"BATCH_DAILY_HYDRA_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/e59a4313-66c3-4db6-842d-6154c5e08205/resourceGroups/rg-swcnonprod01-daf-dev-01/providers/Microsoft.Storage/storageAccounts/sadafdev01"
		},
		"BATCH_DAILY_SAPCRM_properties_01-Main_parameters_TriggerName": {
			"type": "string",
			"defaultValue": "BATCH_DAILY_SAPCRM"
		},
		"BATCH_DAILY_SAPCRM_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/e59a4313-66c3-4db6-842d-6154c5e08205/resourceGroups/rg-swcnonprod01-daf-dev-01/providers/Microsoft.Storage/storageAccounts/sadafdev01"
		},
		"BATCH_DAILY_SAPISU_properties_01-Main_parameters_TriggerName": {
			"type": "string",
			"defaultValue": "BATCH_DAILY_SAPISU"
		},
		"BATCH_DAILY_SAPISU_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/e59a4313-66c3-4db6-842d-6154c5e08205/resourceGroups/rg-swcnonprod01-daf-dev-01/providers/Microsoft.Storage/storageAccounts/sadafdev01"
		},
		"DLY1300_properties_01-Main_parameters_TriggerName": {
			"type": "string",
			"defaultValue": "DLY1300"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/03-Execute-Project-Tasks')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Load Tasks",
						"description": "",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set RunDate",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set RunTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[CTL].[getExecutionTasks]",
								"storedProcedureParameters": {
									"ProjectId": {
										"type": "Int64",
										"value": {
											"value": "@pipeline().parameters.ProjectId",
											"type": "Expression"
										}
									},
									"StageId": {
										"type": "Int64",
										"value": {
											"value": "@pipeline().parameters.StageId",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabase_Ctrldb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Execute Each Task",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Generate Batch Log",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Load Tasks').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Generate Task Log",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[CTL].[CreateTaskLog]",
											"storedProcedureParameters": {
												"BatchLogId": {
													"type": "Int64",
													"value": {
														"value": "@activity('Generate Batch Log').output.firstrow.BatchLogId",
														"type": "Expression"
													}
												},
												"TaskId": {
													"type": "Int64",
													"value": {
														"value": "@item().TaskId",
														"type": "Expression"
													}
												}
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "AzureSqlDatabase_Ctrldb",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Source-to-Raw-Blob      Stage1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Generate Task Log",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@and(equals(item().SourceType,'BLOB Storage (json)'), equals(item().ControlStageId,1))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "EP-Blob-to-Raw",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "04-Blob-A-Source Load_JSON",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"TaskDetails": {
															"value": "@item()",
															"type": "Expression"
														},
														"BatchLogId": {
															"value": "@activity('Generate Batch Log').output.firstrow.BatchLogId",
															"type": "Expression"
														},
														"TaskExecutionLogId": {
															"value": "@activity('Generate Task Log').output.firstrow.TaskLogId",
															"type": "Expression"
														},
														"ProjectRunID": {
															"value": "@pipeline().parameters.ProjectRunID",
															"type": "Expression"
														},
														"RunDate": {
															"value": "@variables('RunDate')",
															"type": "Expression"
														},
														"RunTime": {
															"value": "@variables('RunTime')",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "Raw-to-Cleansed Stage2",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Generate Task Log",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().ControlStageId,2)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "EP-Raw-to-Cleansed",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "05-DL-Load-Raw-to-Cleansed",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"TaskDetails": {
															"value": "@item()",
															"type": "Expression"
														},
														"BatchLogId": {
															"value": "@activity('Generate Batch Log').output.firstrow.BatchLogId",
															"type": "Expression"
														},
														"TaskExecutionLogId": {
															"value": "@activity('Generate Task Log').output.firstrow.TaskLogId",
															"type": "Expression"
														},
														"ProjectRunID": {
															"value": "@pipeline().parameters.ProjectRunID",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "Cleansed-to-Curated Stage3",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Generate Task Log",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().ControlStageId,3)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "EP-Cleansed-to-Curated",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "05-DL-Load-Cleansed-to-Curated",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"TaskDetails": {
															"value": "@item()",
															"type": "Expression"
														},
														"BatchLogId": {
															"value": "@activity('Generate Batch Log').output.firstrow.BatchLogId",
															"type": "Expression"
														},
														"TaskExecutionLogId": {
															"value": "@activity('Generate Task Log').output.firstrow.TaskLogId",
															"type": "Expression"
														},
														"ProjectRunID": {
															"value": "@pipeline().parameters.ProjectRunID",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "Source-to-Raw-Blob _FlatFile_Copy",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Generate Task Log",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@and(equals(item().SourceType,'Flat File'), equals(item().ControlStageId,1))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "EP-Lake-to-Raw",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "04-LakeLanding-FlatFile-A-Source-Copy",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"TaskDetails": {
															"value": "@item()",
															"type": "Expression"
														},
														"BatchLogId": {
															"value": "@activity('Generate Batch Log').output.firstrow.BatchLogId",
															"type": "Expression"
														},
														"TaskExecutionLogId": {
															"value": "@activity('Generate Task Log').output.firstrow.TaskLogId",
															"type": "Expression"
														},
														"ProjectRunID": {
															"value": "@pipeline().parameters.ProjectRunID",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "Source-to-Raw-SQL Stage1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Generate Task Log",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@and(equals(item().SourceType,'SQL Server'), equals(item().ControlStageId,1))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "EP-SqlSource-to-Raw-Load",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "04-SQLServer-A-Source Load",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"BatchLogId": {
															"value": "@activity('Generate Batch Log').output.firstrow.BatchLogId",
															"type": "Expression"
														},
														"TaskDetails": {
															"value": "@item()",
															"type": "Expression"
														},
														"TaskExecutionLogId": {
															"value": "@activity('Generate Task Log').output.firstrow.TaskLogId",
															"type": "Expression"
														},
														"ProjectRunID": {
															"value": "@pipeline().parameters.ProjectRunID",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "SRC-RAW-Blob-CSV      Stage1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Generate Task Log",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@and(equals(item().SourceType,'BLOB Storage (csv)'), equals(item().ControlStageId,1))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "EP-SRC-RAW-BLOB-CSV",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "04-Blob-A-Source Load_CSV",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"TaskDetails": {
															"value": "@item()",
															"type": "Expression"
														},
														"BatchLogId": {
															"value": "@activity('Generate Batch Log').output.firstrow.BatchLogId",
															"type": "Expression"
														},
														"TaskExecutionLogId": {
															"value": "@activity('Generate Task Log').output.firstrow.TaskLogId",
															"type": "Expression"
														},
														"ProjectRunID": {
															"value": "@pipeline().parameters.ProjectRunID",
															"type": "Expression"
														},
														"RunDate": {
															"value": "@variables('RunDate')",
															"type": "Expression"
														},
														"RunTime": {
															"value": "@variables('RunTime')",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Batch Log Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Execute Each Task",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CTL].[UpdateBatchLog]",
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@activity('Generate Batch Log').output.firstrow.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"Status": {
									"value": "Complete",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {
								"kvSecret": "daf-sql-controldb-connectionstring"
							}
						}
					},
					{
						"name": "Batch Log Failure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Execute Each Task",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CTL].[UpdateBatchLog]",
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@activity('Generate Batch Log').output.firstrow.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": "Check Task Execution Log for errors",
									"type": "String"
								},
								"Status": {
									"value": "Failure",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {
								"kvSecret": "daf-sql-controldb-connectionstring"
							}
						}
					},
					{
						"name": "Generate Batch Log",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Load Tasks",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[CTL].[CreateBatchLog]",
								"storedProcedureParameters": {
									"ProjectID": {
										"type": "Int64",
										"value": {
											"value": "@pipeline().parameters.ProjectId",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabase_Ctrldb",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set RunDate",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunDate",
							"value": {
								"value": "@formatDateTime(convertFromUtc(utcnow(),'AUS Eastern Standard Time'),'yyyyMMdd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set RunTime",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunTime",
							"value": {
								"value": "@formatDateTime(convertFromUtc(utcnow(),'AUS Eastern Standard Time'),'yyyyMMdd_HH:mm:ss')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"StageId": {
						"type": "int"
					},
					"ProjectId": {
						"type": "int"
					},
					"ProjectRunID": {
						"type": "string"
					}
				},
				"variables": {
					"RunDate": {
						"type": "String"
					},
					"RunTime": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-30T02:11:41Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/02-Execute-Project-Stages')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Stages",
						"description": "",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[CTL].[GetExecutionStages]",
								"storedProcedureParameters": {
									"ProjectId": {
										"type": "Int64",
										"value": {
											"value": "@pipeline().parameters.ProjectId",
											"type": "Expression"
										}
									},
									"TriggerName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TriggerName",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabase_Ctrldb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Execute Stages",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Stages",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Stages').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Task Load Pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "03-Execute-Project-Tasks",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"StageId": {
												"value": "@item().ControlStageId",
												"type": "Expression"
											},
											"ProjectId": {
												"value": "@pipeline().parameters.ProjectId",
												"type": "Expression"
											},
											"ProjectRunID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ProjectId": {
						"type": "int"
					},
					"TriggerName": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-21T01:45:17Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/03-Execute-Project-Tasks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/01-Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is the main pipeline.",
				"activities": [
					{
						"name": "Get Projects to Execute",
						"description": "",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.08:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[CTL].[getProjects]",
								"storedProcedureParameters": {
									"TriggerName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TriggerName",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabase_Ctrldb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Loop Projects",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Projects to Execute",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Projects to Execute').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Projects",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "02-Execute-Project-Stages",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ProjectId": {
												"value": "@item().ProjectId",
												"type": "Expression"
											},
											"TriggerName": {
												"value": "@pipeline().parameters.TriggerName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TriggerName": {
						"type": "string",
						"defaultValue": "OnDemand"
					}
				},
				"variables": {
					"ProjectName": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-18T07:33:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/02-Execute-Project-Stages')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BATCH_DAILY_HYDRA')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Triggers Main pipeline to kick off Hydra daily loads on the blob-creation event of 'trigger_batch_daily_hydra.json' in 'triggers' container. This pipeline invocation runs multiple HYDRA data load Projects.",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "01-Main",
							"type": "PipelineReference"
						},
						"parameters": {
							"TriggerName": "[parameters('BATCH_DAILY_HYDRA_properties_01-Main_parameters_TriggerName')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/triggers/blobs/trigger_batch_daily_hydra.json",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('BATCH_DAILY_HYDRA_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/01-Main')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BATCH_DAILY_SAPCRM')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Triggers Main pipeline to kick off SAP CRM daily loads on the blob-creation event of 'trigger_batch_daily_sapcrm.json' in 'triggers' container. This pipeline invocation runs multiple SAPCRM data load Projects.",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "01-Main",
							"type": "PipelineReference"
						},
						"parameters": {
							"TriggerName": "[parameters('BATCH_DAILY_SAPCRM_properties_01-Main_parameters_TriggerName')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/triggers/blobs/trigger_batch_daily_sapcrm.json",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('BATCH_DAILY_SAPCRM_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/01-Main')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BATCH_DAILY_SAPISU')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Triggers Main pipeline to kick off SAP ISU daily loads on the blob-creation event of 'trigger_batch_daily_sapisu.json' in 'triggers' container. This pipeline invocation runs multiple SAPISU data load Projects.",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "01-Main",
							"type": "PipelineReference"
						},
						"parameters": {
							"TriggerName": "[parameters('BATCH_DAILY_SAPISU_properties_01-Main_parameters_TriggerName')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/triggers/blobs/trigger_batch_daily_sapisu.json",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('BATCH_DAILY_SAPISU_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/01-Main')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DLY1300')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "01-Main",
							"type": "PipelineReference"
						},
						"parameters": {
							"TriggerName": "[parameters('DLY1300_properties_01-Main_parameters_TriggerName')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-12-01T05:10:00",
						"timeZone": "AUS Eastern Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								13
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/01-Main')]"
			]
		}
	]
}
{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-swcnonprod01-daf-dev-01"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/SRC_BLOB_CSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"BlobContainer": {
						"type": "string"
					},
					"BlobName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Source - Blob"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().BlobName",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().BlobContainer",
							"type": "Expression"
						}
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SRC_BLOB_CSV_NO_QUOTE_CHAR')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Quote Character is set to default(No quote character)",
				"linkedServiceName": {
					"referenceName": "LS_AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"BlobContainer": {
						"type": "string"
					},
					"BlobName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Source - Blob"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().BlobName",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().BlobContainer",
							"type": "Expression"
						}
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SRC_BLOB_JSON')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Source - Blob"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "bods"
					}
				},
				"schema": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SRC_BLOB_JSON_copy1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"BlobName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Source - Blob"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().BlobName",
							"type": "Expression"
						},
						"container": "bods"
					}
				},
				"schema": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SRC_BLOB_JSON_v2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"BlobContainer": {
						"type": "string"
					},
					"BlobName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Source - Blob"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().BlobName",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().BlobContainer",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SRC_RAW_LANDING_ADLS_CSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureDatalake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"BlobPath": {
						"type": "string"
					},
					"BlobName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Data Lake"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().BlobName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat('landing/',dataset().BlobPath)",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/04-Blob-A-Pre-Process_NC_File')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set-ClusterType",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ClusterType",
							"value": {
								"value": "@toLower(last(split(pipeline().parameters.TaskDetails.Processor,'|')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If-ClusterType",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set-ClusterType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('ClusterType'), 'interactive')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Notebook-preprocess-iot-bom-nc",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "0.02:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": {
											"value": "@variables('NoteBookURL')",
											"type": "Expression"
										},
										"baseParameters": {
											"file_object": {
												"value": "@pipeline().parameters.SourceFileName",
												"type": "Expression"
											},
											"source_param": {
												"value": "@string(pipeline().parameters.TaskDetails)",
												"type": "Expression"
											},
											"source_container": {
												"value": "@pipeline().parameters.SourceContainer",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureDatabricks_JobCluster",
										"type": "LinkedServiceReference",
										"parameters": {
											"kvSecret": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
												"type": "Expression"
											},
											"DataBricksClusterType": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[2]",
												"type": "Expression"
											},
											"DataBricksClusterVersion": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[3]",
												"type": "Expression"
											},
											"DataBricksWorkerNodes": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[4]",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Notebook-preprocess-iot-bom-nc Interactive",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "0.02:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": {
											"value": "@variables('NoteBookURL')",
											"type": "Expression"
										},
										"baseParameters": {
											"file_object": {
												"value": "@pipeline().parameters.SourceFileName",
												"type": "Expression"
											},
											"source_param": {
												"value": "@string(pipeline().parameters.TaskDetails)",
												"type": "Expression"
											},
											"source_container": {
												"value": "@pipeline().parameters.SourceContainer",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureDatabricks_DefinedCluster",
										"type": "LinkedServiceReference",
										"parameters": {
											"kvSecret": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
												"type": "Expression"
											},
											"clusterId": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[1]",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Copy Blob File to ArchiveContainer",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "If-ClusterType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SRC_BLOB_BINARY",
								"type": "DatasetReference",
								"parameters": {
									"BlobContainer": {
										"value": "@pipeline().parameters.SourceContainer",
										"type": "Expression"
									},
									"BlobName": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ARCHIVE_BLOB_BINARY",
								"type": "DatasetReference",
								"parameters": {
									"BlobContainer": {
										"value": "@concat(pipeline().parameters.ProjectName,'/',pipeline().parameters.RunDate,'/',pipeline().parameters.RunTime)",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Delete File from LandingBlob",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Blob File to ArchiveContainer",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SRC_BLOB_BINARY",
								"type": "DatasetReference",
								"parameters": {
									"BlobContainer": {
										"value": "@pipeline().parameters.SourceContainer",
										"type": "Expression"
									},
									"BlobName": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									}
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "LS_AzureDatalake",
									"type": "LinkedServiceReference"
								},
								"path": "assurance"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"BatchLogID": {
						"type": "int",
						"defaultValue": 1
					},
					"TaskExecutionLogId": {
						"type": "int",
						"defaultValue": 1
					},
					"TaskDetails": {
						"type": "object"
					},
					"SourceContainer": {
						"type": "string",
						"defaultValue": "test"
					},
					"ProjectRunID": {
						"type": "string"
					},
					"SourceFileName": {
						"type": "string",
						"defaultValue": "0UC_DEVICEH_ATTR_20211025142337.json"
					},
					"ProjectName": {
						"type": "string"
					},
					"RunDate": {
						"type": "string"
					},
					"RunTime": {
						"type": "string"
					}
				},
				"variables": {
					"TargetTableRecordCount": {
						"type": "String"
					},
					"ClusterType": {
						"type": "String",
						"defaultValue": "interactive"
					},
					"NoteBookURL": {
						"type": "String",
						"defaultValue": "/build/raw/preprocess-iot-bom-nc"
					},
					"DataFileRecordCount": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Pre-Process"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-30T03:14:35Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/04-Blob-A-Source Load_JSON')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Clone of 05-DL-Load-Raw-to-Trusted",
				"activities": [
					{
						"name": "Get Metadata",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set-Source-Container",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Source-Filename",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set ProjectName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SRC_BLOB_JSON_v2",
								"type": "DatasetReference",
								"parameters": {
									"BlobContainer": "@variables('SourceContainer')",
									"BlobName": "@concat(variables('SourceFileName'),'_*')"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "Loop-All-Files",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SET-FileName to Child Item",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileName",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Handle Manifest Files",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "Set Manifest File or Not",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@variables('Manifest')",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "DataFile",
												"activities": [
													{
														"name": "Copy-Blob-to-DataLake-Raw",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "JsonSource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true,
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "JsonReadSettings"
																}
															},
															"sink": {
																"type": "JsonSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "JsonWriteSettings"
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "SRC_BLOB_JSON_v2",
																"type": "DatasetReference",
																"parameters": {
																	"BlobContainer": {
																		"value": "@variables('SourceContainer')",
																		"type": "Expression"
																	},
																	"BlobName": {
																		"value": "@variables('FileName')",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "RAW_ADLS_JSON_v2",
																"type": "DatasetReference",
																"parameters": {
																	"BlobPath": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
																		"type": "Expression"
																	},
																	"BlobName": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Execute-DP-Load-Raw-to-Delta-Table",
														"type": "ExecutePipeline",
														"dependsOn": [
															{
																"activity": "SP-Upsert-Manifest-Record-Data",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "04-DL-Load-Raw-to-Delta-Table",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"BatchLogID": {
																	"value": "@pipeline().parameters.BatchLogId",
																	"type": "Expression"
																},
																"TaskExecutionLogId": {
																	"value": "@pipeline().parameters.TaskExecutionLogId",
																	"type": "Expression"
																},
																"TaskDetails": {
																	"value": "@pipeline().parameters.TaskDetails",
																	"type": "Expression"
																},
																"TargetBLOBFolder": {
																	"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
																	"type": "Expression"
																},
																"TargetBLOBName": {
																	"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
																	"type": "Expression"
																},
																"ProjectRunID": {
																	"value": "@pipeline().parameters.ProjectRunID",
																	"type": "Expression"
																},
																"SourceFileName": {
																	"value": "@variables('FileName')",
																	"type": "Expression"
																},
																"SourceFileDateTimeStamp": {
																	"value": "@variables('FileDateTimeStamp')",
																	"type": "Expression"
																}
															}
														}
													},
													{
														"name": "Copy Blob File to ArchiveContainer",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "Execute-DP-Load-Raw-to-Delta-Table",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "JsonSource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true,
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "JsonReadSettings"
																}
															},
															"sink": {
																"type": "JsonSink",
																"storeSettings": {
																	"type": "AzureBlobStorageWriteSettings"
																},
																"formatSettings": {
																	"type": "JsonWriteSettings"
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "SRC_BLOB_JSON_v2",
																"type": "DatasetReference",
																"parameters": {
																	"BlobContainer": {
																		"value": "@variables('SourceContainer')",
																		"type": "Expression"
																	},
																	"BlobName": {
																		"value": "@variables('FileName')",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "ARCHIVE_BLOB_JSON",
																"type": "DatasetReference",
																"parameters": {
																	"BlobContainer": {
																		"value": "@concat(variables('ProjectName'),'/',pipeline().parameters.RunDate,'/',pipeline().parameters.RunTime)",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Delete File from LandingBlob",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Copy Blob File to ArchiveContainer",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "SRC_BLOB_JSON_v2",
																"type": "DatasetReference",
																"parameters": {
																	"BlobContainer": {
																		"value": "@variables('SourceContainer')",
																		"type": "Expression"
																	},
																	"BlobName": {
																		"value": "@variables('FileName')",
																		"type": "Expression"
																	}
																}
															},
															"logStorageSettings": {
																"linkedServiceName": {
																	"referenceName": "LS_AzureDatalake",
																	"type": "LinkedServiceReference"
																},
																"path": "assurance"
															},
															"enableLogging": true,
															"storeSettings": {
																"type": "AzureBlobStorageReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "SP-Upsert-Manifest-Record-Data",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "Copy-Blob-to-DataLake-Raw",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[CTL].[UpsertManifestRecord]",
															"storedProcedureParameters": {
																"BatchExecutionLogID": {
																	"value": {
																		"value": "@pipeline().parameters.BatchLogId",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"Container": {
																	"value": "raw",
																	"type": "String"
																},
																"DeltaColumn": {
																	"value": null,
																	"type": "String"
																},
																"EndCounter": {
																	"value": "0",
																	"type": "String"
																},
																"FileName": {
																	"value": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"FolderName": {
																	"value": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"PipelineRunID": {
																	"value": {
																		"value": "@pipeline().RunId",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"Records": {
																	"value": "1",
																	"type": "Int64"
																},
																"RecordsDeltaTable": {
																	"value": null,
																	"type": "Int64"
																},
																"SourceObject": {
																	"value": {
																		"value": "@pipeline().parameters.TaskDetails.SourceName",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"StartCounter": {
																	"value": "0",
																	"type": "String"
																},
																"TaskExecutionLogID": {
																	"value": {
																		"value": "@pipeline().parameters.TaskExecutionLogId",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"SourceFileName": {
																	"value": {
																		"value": "@variables('FileName')",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"IsManifest": {
																	"value": "false",
																	"type": "Boolean"
																},
																"SourceFileDateStamp": {
																	"value": {
																		"value": "@variables('FileDateTimeStamp')",
																		"type": "Expression"
																	},
																	"type": "String"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "LS-AzureSqlDatabase_Ctrldb",
															"type": "LinkedServiceReference"
														}
													}
												]
											},
											{
												"value": "ManifestFile",
												"activities": [
													{
														"name": "Copy Manifest to Raw Zone",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "JsonSource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true,
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "JsonReadSettings"
																}
															},
															"sink": {
																"type": "JsonSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "JsonWriteSettings"
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "SRC_BLOB_JSON_v2",
																"type": "DatasetReference",
																"parameters": {
																	"BlobContainer": "@variables('SourceContainer')",
																	"BlobName": "@variables('FileName')"
																}
															}
														],
														"outputs": [
															{
																"referenceName": "RAW_ADLS_JSON_v2",
																"type": "DatasetReference",
																"parameters": {
																	"BlobPath": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
																		"type": "Expression"
																	},
																	"BlobName": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Archive Manifest File",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "SP-Update-Manifest-Value",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "JsonSource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true,
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "JsonReadSettings"
																}
															},
															"sink": {
																"type": "JsonSink",
																"storeSettings": {
																	"type": "AzureBlobStorageWriteSettings"
																},
																"formatSettings": {
																	"type": "JsonWriteSettings"
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "SRC_BLOB_JSON_v2",
																"type": "DatasetReference",
																"parameters": {
																	"BlobContainer": "@variables('SourceContainer')",
																	"BlobName": "@variables('FileName')"
																}
															}
														],
														"outputs": [
															{
																"referenceName": "ARCHIVE_BLOB_JSON",
																"type": "DatasetReference",
																"parameters": {
																	"BlobContainer": {
																		"value": "@concat(variables('ProjectName'),'/',pipeline().parameters.RunDate,'/',pipeline().parameters.RunTime)",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Delete File From Landing",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Archive Manifest File",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "SRC_BLOB_JSON_v2",
																"type": "DatasetReference",
																"parameters": {
																	"BlobContainer": "@variables('SourceContainer')",
																	"BlobName": "@variables('FileName')"
																}
															},
															"logStorageSettings": {
																"linkedServiceName": {
																	"referenceName": "LS_AzureDatalake",
																	"type": "LinkedServiceReference"
																},
																"path": "assurance"
															},
															"enableLogging": true,
															"storeSettings": {
																"type": "AzureBlobStorageReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "SP-Upsert-Manifest-Record",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "Copy Manifest to Raw Zone",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[CTL].[UpsertManifestRecord]",
															"storedProcedureParameters": {
																"BatchExecutionLogID": {
																	"value": {
																		"value": "@pipeline().parameters.BatchLogId",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"Container": {
																	"value": "raw",
																	"type": "String"
																},
																"DeltaColumn": {
																	"value": null,
																	"type": "String"
																},
																"EndCounter": {
																	"value": "0",
																	"type": "String"
																},
																"FileName": {
																	"value": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"FolderName": {
																	"value": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"PipelineRunID": {
																	"value": {
																		"value": "@pipeline().RunId",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"Records": {
																	"value": "1",
																	"type": "Int64"
																},
																"RecordsDeltaTable": {
																	"value": null,
																	"type": "Int64"
																},
																"SourceFileName": {
																	"value": {
																		"value": "@variables('FileName')",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"SourceObject": {
																	"value": {
																		"value": "@pipeline().parameters.TaskDetails.SourceName",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"StartCounter": {
																	"value": "0",
																	"type": "String"
																},
																"TaskExecutionLogID": {
																	"value": {
																		"value": "@pipeline().parameters.TaskExecutionLogId",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"IsManifest": {
																	"value": "true",
																	"type": "Boolean"
																},
																"SourceFileDateStamp": {
																	"value": {
																		"value": "@variables('FileDateTimeStamp')",
																		"type": "Expression"
																	},
																	"type": "String"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "LS-AzureSqlDatabase_Ctrldb",
															"type": "LinkedServiceReference"
														}
													},
													{
														"name": "Notebook-Read-Manifest-Value",
														"type": "DatabricksNotebook",
														"dependsOn": [
															{
																"activity": "SP-Upsert-Manifest-Record",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"notebookPath": {
																"value": "@variables('NoteBookURL')",
																"type": "Expression"
															},
															"baseParameters": {
																"file_object": {
																	"value": "@concat(activity('Get Full File Name').output.firstrow.StorageFolder,activity('Get Full File Name').output.firstrow.StorageFile)",
																	"type": "Expression"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "LS-AzureDatabricks_DefinedCluster",
															"type": "LinkedServiceReference",
															"parameters": {
																"kvSecret": {
																	"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
																	"type": "Expression"
																},
																"clusterId": {
																	"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[1]",
																	"type": "Expression"
																}
															}
														}
													},
													{
														"name": "SP-Update-Manifest-Value",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "Notebook-Read-Manifest-Value",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[CTL].[UpdateManifestValue]",
															"storedProcedureParameters": {
																"BatchExecutionLogID": {
																	"value": {
																		"value": "@pipeline().parameters.BatchLogId",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"M_DeltaRecordCount": {
																	"value": {
																		"value": "@string(activity('Notebook-Read-Manifest-Value').output.runOutput.DELTA_RECORD_COUNT)",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"SourceFileDateStamp": {
																	"value": {
																		"value": "@variables('FileDateTimeStamp')",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"TaskExecutionLogID": {
																	"value": {
																		"value": "@pipeline().parameters.TaskExecutionLogId",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"M_TotalNoRows": {
																	"value": {
																		"value": "@string(activity('Notebook-Read-Manifest-Value').output.runOutput.TOTAL_NO_OF_ROWS)",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"M_Message": {
																	"value": {
																		"value": "@string(activity('Notebook-Read-Manifest-Value').output.runOutput.message)",
																		"type": "Expression"
																	},
																	"type": "String"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "LS-AzureSqlDatabase_Ctrldb",
															"type": "LinkedServiceReference"
														}
													}
												]
											}
										]
									}
								},
								{
									"name": "Set Manifest File or Not",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set FileDateTimeStamp",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "Manifest",
										"value": {
											"value": "@if(contains(variables('FileName'),'MANIFEST'),'ManifestFile','DataFile')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Get Full File Name",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[CTL].[GetStorageFileName]",
											"storedProcedureParameters": {
												"DeltaExtract": {
													"type": "Boolean",
													"value": {
														"value": "@pipeline().parameters.TaskDetails.DeltaExtract",
														"type": "Expression"
													}
												},
												"FileName": {
													"type": "String",
													"value": {
														"value": "@concat(pipeline().parameters.TaskDetails.SourceLocation, if(contains(variables('FileName'),'MANIFEST'),'_MANIFEST',''))",
														"type": "Expression"
													}
												},
												"FolderName": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.TaskDetails.TargetLocation",
														"type": "Expression"
													}
												},
												"Grain": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.TaskDetails.ObjectGrain",
														"type": "Expression"
													}
												},
												"Compressed": {
													"type": "Boolean",
													"value": {
														"value": "true",
														"type": "Expression"
													}
												},
												"TargetType": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.TaskDetails.TargetType",
														"type": "Expression"
													}
												}
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "AzureSqlDatabase_Ctrldb",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "Set FileDateTimeStamp",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get Full File Name",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "SET-FileName to Child Item",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileDateTimeStamp",
										"value": {
											"value": "@replace(last(split(variables('FileName'),'_')),'.json','')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Set-Source-Container",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceContainer",
							"value": {
								"value": "@toLower(pipeline().parameters.TaskDetails.SourceGroup)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Source-Filename",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceFileName",
							"value": {
								"value": "@last(split(pipeline().parameters.TaskDetails.SourceLocation,'/'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Log Failure DL Raw",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Loop-All-Files",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[CTL].[UpdateTaskLog]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": {
										"value": "@concat(pipeline().parameters.TaskDetails.SourceLocation, ' failed to load to raw zone')",
										"type": "Expression"
									},
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": null
								},
								"Status": {
									"value": "Failure",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Log Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Loop-All-Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[CTL].[UpdateTaskLog]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.LastLoadedFile",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "Success",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set ProjectName",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ProjectName",
							"value": {
								"value": "@pipeline().parameters.TaskDetails.SourceGroup",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TaskDetails": {
						"type": "object"
					},
					"BatchLogId": {
						"type": "int"
					},
					"TaskExecutionLogId": {
						"type": "int"
					},
					"ProjectRunID": {
						"type": "string"
					},
					"TargetBLOBFolder": {
						"type": "string"
					},
					"TargetBLOBName": {
						"type": "string"
					},
					"StartCounter": {
						"type": "string"
					},
					"EndCounter": {
						"type": "string"
					},
					"ValidationDetails": {
						"type": "string"
					},
					"RunDate": {
						"type": "string"
					},
					"RunTime": {
						"type": "string"
					}
				},
				"variables": {
					"SourceContainer": {
						"type": "String"
					},
					"SourceFileName": {
						"type": "String"
					},
					"OutputFileName": {
						"type": "String"
					},
					"DeltaSQL": {
						"type": "String"
					},
					"FileName": {
						"type": "String"
					},
					"DateStamp": {
						"type": "String"
					},
					"Manifest": {
						"type": "String"
					},
					"ProjectName": {
						"type": "String"
					},
					"FileDateTimeStamp": {
						"type": "String"
					},
					"NoteBookURL": {
						"type": "String",
						"defaultValue": "/build/raw/read-manifest-value"
					}
				},
				"folder": {
					"name": "Blob"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-30T08:46:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SRC_BLOB_JSON_v2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/04-Blob-A-Source Load_Old')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Clone of 05-DL-Load-Raw-to-Trusted",
				"activities": [
					{
						"name": "Get Metadata",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set-Source-Container",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Source-Filename",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set ProjectName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SRC_BLOB_JSON_copy1",
								"type": "DatasetReference",
								"parameters": {
									"BlobName": {
										"value": "@concat(variables('SourceFileName'),'*')",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "Loop-All-Files",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SET-FileName to Child Item",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileName",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Handle Manifest Files",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "Set Manifest File or Not",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@variables('Manifest')",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "DataFile",
												"activities": [
													{
														"name": "Copy-Blob-to-DataLake-Raw",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "JsonSource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true,
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "JsonReadSettings"
																}
															},
															"sink": {
																"type": "JsonSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "JsonWriteSettings"
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "SRC_BLOB_JSON_copy1",
																"type": "DatasetReference",
																"parameters": {
																	"BlobName": {
																		"value": "@variables('FileName')",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "RAW_ADLS_JSON_v2",
																"type": "DatasetReference",
																"parameters": {
																	"BlobPath": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
																		"type": "Expression"
																	},
																	"BlobName": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Execute-DP-Load-Raw-to-Delta-Table",
														"type": "ExecutePipeline",
														"dependsOn": [
															{
																"activity": "SP-Upsert-Manifest-Record-Data",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "04-DL-Load-Raw-to-Delta-Table",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"BatchLogID": {
																	"value": "@pipeline().parameters.BatchLogId",
																	"type": "Expression"
																},
																"TaskExecutionLogId": {
																	"value": "@pipeline().parameters.TaskExecutionLogId",
																	"type": "Expression"
																},
																"TaskDetails": {
																	"value": "@pipeline().parameters.TaskDetails",
																	"type": "Expression"
																},
																"TargetBLOBFolder": {
																	"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
																	"type": "Expression"
																},
																"TargetBLOBName": {
																	"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
																	"type": "Expression"
																},
																"ProjectRunID": {
																	"value": "@pipeline().parameters.ProjectRunID",
																	"type": "Expression"
																},
																"SourceFileName": {
																	"value": "@variables('FileName')",
																	"type": "Expression"
																},
																"SourceFileDateTimeStamp": {
																	"value": "@variables('FileDateTimeStamp')",
																	"type": "Expression"
																}
															}
														}
													},
													{
														"name": "Copy Blob File to ArchiveContainer",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "Execute-DP-Load-Raw-to-Delta-Table",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "JsonSource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true,
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "JsonReadSettings"
																}
															},
															"sink": {
																"type": "JsonSink",
																"storeSettings": {
																	"type": "AzureBlobStorageWriteSettings"
																},
																"formatSettings": {
																	"type": "JsonWriteSettings"
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "SRC_BLOB_JSON_copy1",
																"type": "DatasetReference",
																"parameters": {
																	"BlobName": {
																		"value": "@variables('FileName')",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "ARCHIVE_BLOB_JSON",
																"type": "DatasetReference",
																"parameters": {
																	"BlobContainer": {
																		"value": "@concat(variables('ProjectName'),'/',pipeline().parameters.RunDate,'/',pipeline().parameters.RunTime)",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Delete File from LandingBlob",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Copy Blob File to ArchiveContainer",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "SRC_BLOB_JSON_copy1",
																"type": "DatasetReference",
																"parameters": {
																	"BlobName": {
																		"value": "@variables('FileName')",
																		"type": "Expression"
																	}
																}
															},
															"logStorageSettings": {
																"linkedServiceName": {
																	"referenceName": "LS_AzureDatalake",
																	"type": "LinkedServiceReference"
																},
																"path": "assurance"
															},
															"enableLogging": true,
															"storeSettings": {
																"type": "AzureBlobStorageReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "SP-Upsert-Manifest-Record-Data",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "Copy-Blob-to-DataLake-Raw",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[CTL].[UpsertManifestRecord]",
															"storedProcedureParameters": {
																"BatchExecutionLogID": {
																	"value": {
																		"value": "@pipeline().parameters.BatchLogId",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"Container": {
																	"value": "raw",
																	"type": "String"
																},
																"DeltaColumn": {
																	"value": null,
																	"type": "String"
																},
																"EndCounter": {
																	"value": "0",
																	"type": "String"
																},
																"FileName": {
																	"value": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"FolderName": {
																	"value": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"PipelineRunID": {
																	"value": {
																		"value": "@pipeline().RunId",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"Records": {
																	"value": "1",
																	"type": "Int64"
																},
																"RecordsDeltaTable": {
																	"value": null,
																	"type": "Int64"
																},
																"SourceObject": {
																	"value": {
																		"value": "@pipeline().parameters.TaskDetails.SourceName",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"StartCounter": {
																	"value": "0",
																	"type": "String"
																},
																"TaskExecutionLogID": {
																	"value": {
																		"value": "@pipeline().parameters.TaskExecutionLogId",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"SourceFileName": {
																	"value": {
																		"value": "@variables('FileName')",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"IsManifest": {
																	"value": "false",
																	"type": "Boolean"
																},
																"SourceFileDateStamp": {
																	"value": {
																		"value": "@variables('FileDateTimeStamp')",
																		"type": "Expression"
																	},
																	"type": "String"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "LS-AzureSqlDatabase_Ctrldb",
															"type": "LinkedServiceReference",
															"parameters": {}
														}
													}
												]
											},
											{
												"value": "ManifestFile",
												"activities": [
													{
														"name": "Copy Manifest to Raw Zone",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "JsonSource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true,
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "JsonReadSettings"
																}
															},
															"sink": {
																"type": "JsonSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "JsonWriteSettings"
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "SRC_BLOB_JSON_copy1",
																"type": "DatasetReference",
																"parameters": {
																	"BlobName": {
																		"value": "@variables('FileName')",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "RAW_ADLS_JSON_v2",
																"type": "DatasetReference",
																"parameters": {
																	"BlobPath": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
																		"type": "Expression"
																	},
																	"BlobName": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Archive Manifest File",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "SP-Update-Manifest-Value",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "JsonSource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true,
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "JsonReadSettings"
																}
															},
															"sink": {
																"type": "JsonSink",
																"storeSettings": {
																	"type": "AzureBlobStorageWriteSettings"
																},
																"formatSettings": {
																	"type": "JsonWriteSettings"
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "SRC_BLOB_JSON_copy1",
																"type": "DatasetReference",
																"parameters": {
																	"BlobName": {
																		"value": "@variables('FileName')",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "ARCHIVE_BLOB_JSON",
																"type": "DatasetReference",
																"parameters": {
																	"BlobContainer": {
																		"value": "@concat(variables('ProjectName'),'/',pipeline().parameters.RunDate,'/',pipeline().parameters.RunTime)",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Delete File From Landing",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Archive Manifest File",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "SRC_BLOB_JSON_copy1",
																"type": "DatasetReference",
																"parameters": {
																	"BlobName": {
																		"value": "@variables('FileName')",
																		"type": "Expression"
																	}
																}
															},
															"logStorageSettings": {
																"linkedServiceName": {
																	"referenceName": "LS_AzureDatalake",
																	"type": "LinkedServiceReference"
																},
																"path": "assurance"
															},
															"enableLogging": true,
															"storeSettings": {
																"type": "AzureBlobStorageReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "SP-Upsert-Manifest-Record",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "Copy Manifest to Raw Zone",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[CTL].[UpsertManifestRecord]",
															"storedProcedureParameters": {
																"BatchExecutionLogID": {
																	"value": {
																		"value": "@pipeline().parameters.BatchLogId",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"Container": {
																	"value": "raw",
																	"type": "String"
																},
																"DeltaColumn": {
																	"value": null,
																	"type": "String"
																},
																"EndCounter": {
																	"value": "0",
																	"type": "String"
																},
																"FileName": {
																	"value": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"FolderName": {
																	"value": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"PipelineRunID": {
																	"value": {
																		"value": "@pipeline().RunId",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"Records": {
																	"value": "1",
																	"type": "Int64"
																},
																"RecordsDeltaTable": {
																	"value": null,
																	"type": "Int64"
																},
																"SourceFileName": {
																	"value": {
																		"value": "@variables('FileName')",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"SourceObject": {
																	"value": {
																		"value": "@pipeline().parameters.TaskDetails.SourceName",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"StartCounter": {
																	"value": "0",
																	"type": "String"
																},
																"TaskExecutionLogID": {
																	"value": {
																		"value": "@pipeline().parameters.TaskExecutionLogId",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"IsManifest": {
																	"value": "true",
																	"type": "Boolean"
																},
																"SourceFileDateStamp": {
																	"value": {
																		"value": "@variables('FileDateTimeStamp')",
																		"type": "Expression"
																	},
																	"type": "String"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "LS-AzureSqlDatabase_Ctrldb",
															"type": "LinkedServiceReference",
															"parameters": {}
														}
													},
													{
														"name": "Notebook-Read-Manifest-Value",
														"type": "DatabricksNotebook",
														"dependsOn": [
															{
																"activity": "SP-Upsert-Manifest-Record",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"notebookPath": {
																"value": "@variables('NoteBookURL')",
																"type": "Expression"
															},
															"baseParameters": {
																"file_object": {
																	"value": "@concat(activity('Get Full File Name').output.firstrow.StorageFolder,activity('Get Full File Name').output.firstrow.StorageFile)",
																	"type": "Expression"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "LS-AzureDatabricks_DefinedCluster",
															"type": "LinkedServiceReference",
															"parameters": {
																"kvSecret": {
																	"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
																	"type": "Expression"
																},
																"clusterId": {
																	"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[1]",
																	"type": "Expression"
																}
															}
														}
													},
													{
														"name": "SP-Update-Manifest-Value",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "Notebook-Read-Manifest-Value",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[CTL].[UpdateManifestValue]",
															"storedProcedureParameters": {
																"BatchExecutionLogID": {
																	"value": {
																		"value": "@pipeline().parameters.BatchLogId",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"M_DeltaRecordCount": {
																	"value": {
																		"value": "@string(activity('Notebook-Read-Manifest-Value').output.runOutput.DELTA_RECORD_COUNT)",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"SourceFileDateStamp": {
																	"value": {
																		"value": "@variables('FileDateTimeStamp')",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"TaskExecutionLogID": {
																	"value": {
																		"value": "@pipeline().parameters.TaskExecutionLogId",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"M_TotalNoRows": {
																	"value": {
																		"value": "@string(activity('Notebook-Read-Manifest-Value').output.runOutput.TOTAL_NO_OF_ROWS)",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"M_Message": {
																	"value": {
																		"value": "@string(activity('Notebook-Read-Manifest-Value').output.runOutput.message)",
																		"type": "Expression"
																	},
																	"type": "String"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "LS-AzureSqlDatabase_Ctrldb",
															"type": "LinkedServiceReference",
															"parameters": {}
														}
													}
												]
											}
										]
									}
								},
								{
									"name": "Set Manifest File or Not",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set FileDateTimeStamp",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "Manifest",
										"value": {
											"value": "@if(contains(variables('FileName'),'MANIFEST'),'ManifestFile','DataFile')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Get Full File Name",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[CTL].[GetStorageFileName]",
											"storedProcedureParameters": {
												"DeltaExtract": {
													"type": "Boolean",
													"value": {
														"value": "@pipeline().parameters.TaskDetails.DeltaExtract",
														"type": "Expression"
													}
												},
												"FileName": {
													"type": "String",
													"value": {
														"value": "@concat(pipeline().parameters.TaskDetails.SourceLocation, if(contains(variables('FileName'),'MANIFEST'),'_MANIFEST',''))",
														"type": "Expression"
													}
												},
												"FolderName": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.TaskDetails.TargetLocation",
														"type": "Expression"
													}
												},
												"Grain": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.TaskDetails.ObjectGrain",
														"type": "Expression"
													}
												},
												"Compressed": {
													"type": "Boolean",
													"value": {
														"value": "true",
														"type": "Expression"
													}
												},
												"TargetType": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.TaskDetails.TargetType",
														"type": "Expression"
													}
												}
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "AzureSqlDatabase_Ctrldb",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "Set FileDateTimeStamp",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get Full File Name",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "SET-FileName to Child Item",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileDateTimeStamp",
										"value": {
											"value": "@replace(last(split(variables('FileName'),'_')),'.json','')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Set-Source-Container",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceContainer",
							"value": {
								"value": "@toLower(first(split(pipeline().parameters.TaskDetails.SourceLocation,'/')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Source-Filename",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceFileName",
							"value": {
								"value": "@last(split(pipeline().parameters.TaskDetails.SourceLocation,'/'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Log Failure DL Raw",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Loop-All-Files",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[CTL].[UpdateTaskLog]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": {
										"value": "@concat(pipeline().parameters.TaskDetails.SourceLocation, ' failed to load to raw zone')",
										"type": "Expression"
									},
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": null
								},
								"Status": {
									"value": "Failure",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {}
						}
					},
					{
						"name": "Log Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Loop-All-Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[CTL].[UpdateTaskLog]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.LastLoadedFile",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "Success",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {}
						}
					},
					{
						"name": "Set ProjectName",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ProjectName",
							"value": {
								"value": "@pipeline().parameters.TaskDetails.SourceGroup",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TaskDetails": {
						"type": "object",
						"defaultValue": "2"
					},
					"BatchLogId": {
						"type": "int"
					},
					"TaskExecutionLogId": {
						"type": "int"
					},
					"ProjectRunID": {
						"type": "string"
					},
					"TargetBLOBFolder": {
						"type": "string"
					},
					"TargetBLOBName": {
						"type": "string"
					},
					"StartCounter": {
						"type": "string"
					},
					"EndCounter": {
						"type": "string"
					},
					"ValidationDetails": {
						"type": "string"
					},
					"RunDate": {
						"type": "string"
					},
					"RunTime": {
						"type": "string"
					}
				},
				"variables": {
					"SourceContainer": {
						"type": "String"
					},
					"SourceFileName": {
						"type": "String"
					},
					"OutputFileName": {
						"type": "String"
					},
					"DeltaSQL": {
						"type": "String"
					},
					"FileName": {
						"type": "String"
					},
					"DateStamp": {
						"type": "String"
					},
					"Manifest": {
						"type": "String"
					},
					"ProjectName": {
						"type": "String"
					},
					"FileDateTimeStamp": {
						"type": "String"
					},
					"NoteBookURL": {
						"type": "String",
						"defaultValue": "/build/raw/read-manifest-value"
					}
				},
				"folder": {
					"name": "z_Archive"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-30T08:46:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SRC_BLOB_JSON_copy1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/04-Blob-Json-A-Source-Copy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Clone of 05-DL-Load-Raw-to-Trusted",
				"activities": [
					{
						"name": "Log Failure DL Raw",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy-Blob-to-DataLake-Raw",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[CTL].[UpdateTaskLog]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": "Error Occurred during Blob Source Load",
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": null
								},
								"Status": {
									"value": "Failure",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {}
						}
					},
					{
						"name": "Log Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy-Blob-to-DataLake-Raw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[CTL].[UpdateTaskLog]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.LastLoadedFile",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "Success",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {}
						}
					},
					{
						"name": "Set-Source-Container",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceContainer",
							"value": {
								"value": "@toLower(first(split(pipeline().parameters.TaskDetails.SourceLocation,'/')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Source-Filename",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceFileName",
							"value": {
								"value": "@last(split(pipeline().parameters.TaskDetails.SourceLocation,'/'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy-Blob-to-DataLake-Raw",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Manifest file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": {
										"value": "@concat(first(split(variables('SourceFileName'),'.')),'_*')",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SRC_BLOB_JSON",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RAW_ADLS_JSON_v2",
								"type": "DatasetReference",
								"parameters": {
									"BlobPath": {
										"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
										"type": "Expression"
									},
									"BlobName": {
										"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Get Full File Name",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[CTL].[GetStorageFileName]",
								"storedProcedureParameters": {
									"DeltaExtract": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.DeltaExtract",
											"type": "Expression"
										}
									},
									"FileName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.SourceLocation",
											"type": "Expression"
										}
									},
									"FolderName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.TargetLocation",
											"type": "Expression"
										}
									},
									"Grain": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.ObjectGrain",
											"type": "Expression"
										}
									},
									"Compressed": {
										"type": "Boolean",
										"value": {
											"value": "true",
											"type": "Expression"
										}
									},
									"TargetType": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.TargetType",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabase_Ctrldb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Copy Manifest File to Archive",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set-Source-Container",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Source-Filename",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get Full File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": {
										"value": "@concat(first(split(variables('SourceFileName'),'.')),'_MANIFEST_*')",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SRC_BLOB_JSON",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ARCHIVE_BLOB_JSON",
								"type": "DatasetReference",
								"parameters": {
									"BlobContainer": {
										"value": "@concat('archive/', activity('Get Full File Name').output.firstrow.StorageFolder)",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Delete Manifest file",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Manifest File to Archive",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SRC_BLOB_JSON",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "LS_AzureDatalake",
									"type": "LinkedServiceReference"
								},
								"path": "assurance"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"wildcardFileName": {
									"value": "@{concat(first(split(variables('SourceFileName'),'.')),'_MANIFEST_*')}",
									"type": "Expression"
								},
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "If File Was Copied",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Log Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Copy-Blob-to-DataLake-Raw').output.filesWritten, 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute-DP-Load-Raw-to-Delta-Table",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "SP-Create-Manifest",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "04-DL-Load-Raw-to-Delta-Table",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"BatchLogID": {
												"value": "@pipeline().parameters.BatchLogId",
												"type": "Expression"
											},
											"TaskExecutionLogId": {
												"value": "@pipeline().parameters.TaskExecutionLogId",
												"type": "Expression"
											},
											"TaskDetails": {
												"value": "@pipeline().parameters.TaskDetails",
												"type": "Expression"
											},
											"TargetBLOBFolder": {
												"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
												"type": "Expression"
											},
											"TargetBLOBName": {
												"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
												"type": "Expression"
											},
											"ProjectRunID": {
												"value": "@pipeline().parameters.ProjectRunID",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Copy Blob File to ArchiveContainer",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Execute-DP-Load-Raw-to-Delta-Table",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFileName": {
													"value": "@concat(first(split(variables('SourceFileName'),'.')),'_*')",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "SRC_BLOB_JSON",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ARCHIVE_BLOB_JSON",
											"type": "DatasetReference",
											"parameters": {
												"BlobContainer": {
													"value": "@concat('archive/', activity('Get Full File Name').output.firstrow.StorageFolder)",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete File from LandingBlob",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy Blob File to ArchiveContainer",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "SRC_BLOB_JSON",
											"type": "DatasetReference",
											"parameters": {}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "LS_AzureDatalake",
												"type": "LinkedServiceReference"
											},
											"path": "assurance"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"wildcardFileName": {
												"value": "@{concat(first(split(variables('SourceFileName'),'.')),'_*')}",
												"type": "Expression"
											},
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "SP-Create-Manifest",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[CreateManifestRecord]",
										"storedProcedureParameters": {
											"BatchExecutionLogID": {
												"value": {
													"value": "@pipeline().parameters.BatchLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Container": {
												"value": "raw",
												"type": "String"
											},
											"EndCounter": {
												"value": "0",
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
													"type": "Expression"
												},
												"type": "String"
											},
											"FolderName": {
												"value": {
													"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
													"type": "Expression"
												},
												"type": "String"
											},
											"Records": {
												"value": {
													"value": "@activity('Copy-Blob-to-DataLake-Raw').output.Fileswritten",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"SourceObject": {
												"value": {
													"value": "@pipeline().parameters.TaskDetails.SourceName",
													"type": "Expression"
												},
												"type": "String"
											},
											"StartCounter": {
												"value": "0",
												"type": "String"
											},
											"TaskExecutionLogID": {
												"value": {
													"value": "@pipeline().parameters.TaskExecutionLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"DeltaColumn": {
												"value": {
													"value": "@pipeline().parameters.TaskDetails.WatermarkColumn",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineRunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference",
										"parameters": {}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TaskDetails": {
						"type": "object"
					},
					"BatchLogId": {
						"type": "int"
					},
					"TaskExecutionLogId": {
						"type": "int"
					},
					"ProjectRunID": {
						"type": "string"
					},
					"TargetBLOBFolder": {
						"type": "string"
					},
					"TargetBLOBName": {
						"type": "string"
					},
					"StartCounter": {
						"type": "string"
					},
					"EndCounter": {
						"type": "string"
					},
					"ValidationDetails": {
						"type": "string"
					}
				},
				"variables": {
					"SourceContainer": {
						"type": "String"
					},
					"SourceFileName": {
						"type": "String"
					},
					"OutputFileName": {
						"type": "String"
					},
					"DeltaSQL": {
						"type": "String"
					}
				},
				"folder": {
					"name": "z_Archive"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-30T08:46:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SRC_BLOB_JSON')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/04-LakeLanding-FlatFile-A-Source-Copy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set-Source-Container",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceContainer",
							"value": {
								"value": "@toLower(pipeline().parameters.TaskDetails.SourceGroup)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Source-Filename",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceFileName",
							"value": {
								"value": "@concat(last(split(pipeline().parameters.TaskDetails.SourceLocation,'/')),'.csv')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Full File Name",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[CTL].[GetStorageFileName]",
								"storedProcedureParameters": {
									"DeltaExtract": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.DeltaExtract",
											"type": "Expression"
										}
									},
									"FileName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.SourceLocation",
											"type": "Expression"
										}
									},
									"FolderName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.TargetLocation",
											"type": "Expression"
										}
									},
									"Grain": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.ObjectGrain",
											"type": "Expression"
										}
									},
									"Compressed": {
										"type": "Boolean",
										"value": {
											"value": "true",
											"type": "Expression"
										}
									},
									"TargetType": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.TargetType",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabase_Ctrldb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Get Metadata",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set-Source-Container",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Source-Filename",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get Full File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SRC_BLOB_CSV_NO_QUOTE_CHAR",
								"type": "DatasetReference",
								"parameters": {
									"BlobContainer": {
										"value": "@variables('SourceContainer')",
										"type": "Expression"
									},
									"BlobName": {
										"value": "@variables('SourceFileName')",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "If File Exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Get Metadata').output.exists",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Log Failure DL Raw - File Not Exist",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "[[CTL].[UpdateTaskLog]",
											"type": "Expression"
										},
										"storedProcedureParameters": {
											"BatchLogId": {
												"value": {
													"value": "@pipeline().parameters.BatchLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"ErrorMessage": {
												"value": "Error Occurred during Blob Source Load",
												"type": "String"
											},
											"ExecutionLogId": {
												"value": {
													"value": "@pipeline().parameters.TaskExecutionLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Output": {
												"value": null
											},
											"Status": {
												"value": "Failure",
												"type": "String"
											},
											"TaskId": {
												"value": {
													"value": "@pipeline().parameters.TaskDetails.TaskId",
													"type": "Expression"
												},
												"type": "Int64"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Log Failure DL Raw",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy File to Raw Zone",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "[[CTL].[UpdateTaskLog]",
											"type": "Expression"
										},
										"storedProcedureParameters": {
											"BatchLogId": {
												"value": {
													"value": "@pipeline().parameters.BatchLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"ErrorMessage": {
												"value": "Error Occurred during Blob Source Load",
												"type": "String"
											},
											"ExecutionLogId": {
												"value": {
													"value": "@pipeline().parameters.TaskExecutionLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Output": {
												"value": null
											},
											"Status": {
												"value": "Failure",
												"type": "String"
											},
											"TaskId": {
												"value": {
													"value": "@pipeline().parameters.TaskDetails.TaskId",
													"type": "Expression"
												},
												"type": "Int64"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Log Success",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy File to Raw Zone",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "[[CTL].[UpdateTaskLog]",
											"type": "Expression"
										},
										"storedProcedureParameters": {
											"BatchLogId": {
												"value": {
													"value": "@pipeline().parameters.BatchLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"ErrorMessage": {
												"value": null,
												"type": "String"
											},
											"ExecutionLogId": {
												"value": {
													"value": "@pipeline().parameters.TaskExecutionLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Output": {
												"value": {
													"value": "@pipeline().parameters.TaskDetails.LastLoadedFile",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": "Success",
												"type": "String"
											},
											"TaskId": {
												"value": {
													"value": "@pipeline().parameters.TaskDetails.TaskId",
													"type": "Expression"
												},
												"type": "Int64"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Copy File to Raw Zone",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "SRC_BLOB_CSV_NO_QUOTE_CHAR",
											"type": "DatasetReference",
											"parameters": {
												"BlobContainer": {
													"value": "@variables('SourceContainer')",
													"type": "Expression"
												},
												"BlobName": {
													"value": "@variables('SourceFileName')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DST_RAW_ADLS_CSV",
											"type": "DatasetReference",
											"parameters": {
												"BlobPath": {
													"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
													"type": "Expression"
												},
												"BlobName": {
													"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Execute-DP-Load-Raw-to-Delta-Table",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "SP-Record-Manifest",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "04-DL-Load-Raw-to-Delta-Table",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"BatchLogID": {
												"value": "@pipeline().parameters.BatchLogId",
												"type": "Expression"
											},
											"TaskExecutionLogId": {
												"value": "@pipeline().parameters.TaskExecutionLogId",
												"type": "Expression"
											},
											"TaskDetails": {
												"value": "@pipeline().parameters.TaskDetails",
												"type": "Expression"
											},
											"TargetBLOBFolder": {
												"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
												"type": "Expression"
											},
											"TargetBLOBName": {
												"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
												"type": "Expression"
											},
											"ProjectRunID": {
												"value": "@pipeline().parameters.ProjectRunID",
												"type": "Expression"
											},
											"SourceFileName": {
												"value": "@variables('SourceFileName')",
												"type": "Expression"
											},
											"SourceFileDateTimeStamp": "1"
										}
									}
								},
								{
									"name": "Delete file from source",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy File to Archive",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "SRC_BLOB_CSV_NO_QUOTE_CHAR",
											"type": "DatasetReference",
											"parameters": {
												"BlobContainer": "@variables('SourceContainer')",
												"BlobName": "@variables('SourceFileName')"
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "LS_AzureDatalake",
												"type": "LinkedServiceReference"
											},
											"path": "assurance"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Copy File to Archive",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Execute-DP-Load-Raw-to-Delta-Table",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "SRC_BLOB_CSV_NO_QUOTE_CHAR",
											"type": "DatasetReference",
											"parameters": {
												"BlobContainer": {
													"value": "@variables('SourceContainer')",
													"type": "Expression"
												},
												"BlobName": {
													"value": "@variables('SourceFileName')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ARCHIVE_BLOB_CSV",
											"type": "DatasetReference",
											"parameters": {
												"BlobContainer": {
													"value": "@concat(variables('SourceContainer'),'/',pipeline().parameters.RunDate,'/',pipeline().parameters.RunTime)",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "SP-Record-Manifest",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Log Success",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[CreateManifestRecord]",
										"storedProcedureParameters": {
											"BatchExecutionLogID": {
												"value": {
													"value": "@pipeline().parameters.BatchLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Container": {
												"value": "raw",
												"type": "String"
											},
											"EndCounter": {
												"value": "0",
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
													"type": "Expression"
												},
												"type": "String"
											},
											"FolderName": {
												"value": {
													"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
													"type": "Expression"
												},
												"type": "String"
											},
											"Records": {
												"value": {
													"value": "@string(activity('Copy File to Raw Zone').output.dataWritten)",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"SourceObject": {
												"value": {
													"value": "@pipeline().parameters.TaskDetails.SourceName",
													"type": "Expression"
												},
												"type": "String"
											},
											"StartCounter": {
												"value": "0",
												"type": "String"
											},
											"TaskExecutionLogID": {
												"value": {
													"value": "@pipeline().parameters.TaskExecutionLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"DeltaColumn": {
												"value": null,
												"type": "String"
											},
											"PipelineRunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceFileName": {
												"value": {
													"value": "@variables('SourceFileName')",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceFileDateStamp": {
												"value": "1",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TaskDetails": {
						"type": "object"
					},
					"BatchLogId": {
						"type": "int"
					},
					"TaskExecutionLogId": {
						"type": "int"
					},
					"ProjectRunID": {
						"type": "string"
					},
					"TargetBLOBFolder": {
						"type": "string"
					},
					"TargetBLOBName": {
						"type": "string"
					},
					"RunDate": {
						"type": "string"
					},
					"RunTime": {
						"type": "string"
					}
				},
				"variables": {
					"SourceContainer": {
						"type": "String"
					},
					"SourceFileName": {
						"type": "String"
					},
					"OutputFileName": {
						"type": "String"
					},
					"DeltaSQL": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Blob"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-30T08:46:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SRC_BLOB_CSV_NO_QUOTE_CHAR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/04-Oracle-Generate-Source-Schema')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Generate Schema",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set-Owner",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Table",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-File",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": {
									"value": "@replace(replace(variables('SQL'), '<<TABLE>>', variables('Table')), '<<OWNER>>', variables('Owner'))",
									"type": "Expression"
								},
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SRC_Oracle",
								"type": "DatasetReference",
								"parameters": {
									"kvSecret": {
										"value": "@pipeline().parameters.TaskDetails.SourceServer",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RAW_ADLS_Schema",
								"type": "DatasetReference",
								"parameters": {
									"BlobPath": {
										"value": "@variables('Folder')",
										"type": "Expression"
									},
									"BlobName": {
										"value": "@variables('File')",
										"type": "Expression"
									},
									"Compression": "none",
									"ColumnDelim": ",",
									"HeaderRow": false
								}
							}
						]
					},
					{
						"name": "Generate Schema Original",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Generate Schema",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": {
									"value": "@replace(replace(variables('SQL-Original'), '<<TABLE>>', variables('Table')), '<<OWNER>>', variables('Owner'))",
									"type": "Expression"
								},
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SRC_Oracle",
								"type": "DatasetReference",
								"parameters": {
									"kvSecret": {
										"value": "@pipeline().parameters.TaskDetails.SourceServer",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RAW_ADLS_Schema",
								"type": "DatasetReference",
								"parameters": {
									"BlobPath": {
										"value": "@concat(variables('Folder'), '/original/')",
										"type": "Expression"
									},
									"BlobName": {
										"value": "@concat(variables('File'), '.csv')",
										"type": "Expression"
									},
									"Compression": "none",
									"ColumnDelim": ",",
									"HeaderRow": true
								}
							}
						]
					},
					{
						"name": "If-Empty-Delete",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Generate Schema Original",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Generate Schema').output.rowsCopied, 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete-Empty-File",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "BINARY_ADLS",
											"type": "DatasetReference",
											"parameters": {
												"File": {
													"value": "@variables('File')",
													"type": "Expression"
												},
												"Container": "raw",
												"Folder": {
													"value": "@variables('Folder')",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "LS_AzureBlobStorage",
												"type": "LinkedServiceReference"
											},
											"path": "log"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true
										}
									}
								}
							]
						}
					},
					{
						"name": "Set-Folder",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Folder",
							"value": {
								"value": "@toLower(concat(pipeline().parameters.TaskDetails.SourceGroup, '//', 'schema'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-File",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "File",
							"value": {
								"value": "@toLower(concat(pipeline().parameters.TaskDetails.SourceName, '.', 'schema'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Table",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Table",
							"value": {
								"value": "@split(pipeline().parameters.TaskDetails.SourceLocation,'.')[1]",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Owner",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Owner",
							"value": {
								"value": "@split(pipeline().parameters.TaskDetails.SourceLocation,'.')[0]",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TaskDetails": {
						"type": "object"
					}
				},
				"variables": {
					"Owner": {
						"type": "String"
					},
					"Table": {
						"type": "String"
					},
					"SQL": {
						"type": "String",
						"defaultValue": "SELECT column_name,         CASE           WHEN data_type = 'NUMBER' AND data_scale = 0 THEN 'double'           WHEN data_type = 'NUMBER' AND data_scale > 0 THEN 'double'           WHEN data_type = 'DATE' THEN 'timestamp'           ELSE 'string'         END                              AS fieldtype,         CASE           WHEN data_type = 'DATE' THEN 'DATETIME2'           ELSE data_type         END                              AS data_type,         Nvl(data_precision, data_length) PRECISION,         data_scale                       scale,         table_name                       table_name,         owner                            table_schema  FROM   all_tab_cols  WHERE  table_name = '<<TABLE>>'         AND owner = '<<OWNER>>'         AND hidden_column = 'NO'  \t   "
					},
					"SQL-Original": {
						"type": "String",
						"defaultValue": "SELECT * FROM all_tab_cols WHERE table_name = '<<TABLE>>' \tAND owner = '<<OWNER>>'"
					},
					"Folder": {
						"type": "String"
					},
					"File": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Oracle"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/04-SQLServer-Generate-Source-Schema')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Generate Schema",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set-Schema",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Table",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-File",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "@replace(replace(variables('SQL'), '<<TABLE>>', variables('Table')), '<<SCHEMA>>', variables('Schema'))",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SRC_SQLSERVER",
								"type": "DatasetReference",
								"parameters": {
									"kvSecret": {
										"value": "@pipeline().parameters.TaskDetails.SourceServer",
										"type": "Expression"
									},
									"tableName": "erch",
									"schemaName": "dbo"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RAW_ADLS_Schema",
								"type": "DatasetReference",
								"parameters": {
									"BlobPath": {
										"value": "@variables('Folder')",
										"type": "Expression"
									},
									"BlobName": {
										"value": "@variables('File')",
										"type": "Expression"
									},
									"Compression": "none",
									"ColumnDelim": ",",
									"HeaderRow": false
								}
							}
						]
					},
					{
						"name": "Generate Schema Original",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Generate Schema",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "@replace(replace(variables('SQL-Original'), '<<TABLE>>', variables('Table')), '<<SCHEMA>>', variables('Schema'))",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SRC_SQLSERVER",
								"type": "DatasetReference",
								"parameters": {
									"kvSecret": {
										"value": "@pipeline().parameters.TaskDetails.SourceServer",
										"type": "Expression"
									},
									"tableName": "erch",
									"schemaName": "dbo"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RAW_ADLS_Schema",
								"type": "DatasetReference",
								"parameters": {
									"BlobPath": {
										"value": "@concat(variables('Folder'), '/original/')",
										"type": "Expression"
									},
									"BlobName": {
										"value": "@concat(variables('File'), '.csv')",
										"type": "Expression"
									},
									"Compression": "none",
									"ColumnDelim": ",",
									"HeaderRow": true
								}
							}
						]
					},
					{
						"name": "If-Empty-Delete",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Generate Schema Original",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Generate Schema').output.rowsCopied, 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete-Empty-File",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "BINARY_ADLS",
											"type": "DatasetReference",
											"parameters": {
												"File": {
													"value": "@variables('File')",
													"type": "Expression"
												},
												"Container": "raw",
												"Folder": {
													"value": "@variables('Folder')",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "LS_AzureDatalake",
												"type": "LinkedServiceReference"
											},
											"path": "log"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true
										}
									}
								}
							]
						}
					},
					{
						"name": "Set-Folder",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Folder",
							"value": {
								"value": "@toLower(concat(pipeline().parameters.TaskDetails.SourceGroup, '//', 'schema'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-File",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "File",
							"value": {
								"value": "@toLower(concat(pipeline().parameters.TaskDetails.SourceName, '.', 'schema'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Table",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Table",
							"value": {
								"value": "@split(pipeline().parameters.TaskDetails.SourceLocation,'.')[1]",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Schema",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Schema",
							"value": {
								"value": "@split(pipeline().parameters.TaskDetails.SourceLocation,'.')[0]",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TaskDetails": {
						"type": "object"
					}
				},
				"variables": {
					"Schema": {
						"type": "String"
					},
					"Table": {
						"type": "String"
					},
					"SQL": {
						"type": "String",
						"defaultValue": "SELECT column_name,     CASE \t\tWHEN data_type = 'bit' THEN 'boolean' \t\tWHEN data_type = 'bigint' THEN 'long' \t\tWHEN data_type IN ( 'int', 'smallint' ) THEN 'integer' \t\tWHEN data_type IN ( 'float', 'double', 'money', 'smallmoney' ) THEN 'double' \t\tWHEN data_type IN ( 'numeric' ) THEN 'decimal'  \t\tWHEN data_type IN ( 'nvarchar', 'varchar', 'char', 'nchar' ) THEN 'string' \t\tWHEN data_type IN ( 'date', 'datetime', 'datetime2', 'smalldatetime') THEN 'timestamp' \t\tELSE 'string'          \tEND AS fieldtype,     data_type,     COALESCE(datetime_precision, numeric_precision, character_maximum_length) precision,     numeric_scale scale, \ttable_name, \ttable_schema FROM information_schema.columns   WHERE table_name = '<<TABLE>>'          AND table_schema = '<<SCHEMA>>'  ORDER BY ORDINAL_POSITION"
					},
					"SQL-Original": {
						"type": "String",
						"defaultValue": "SELECT * FROM information_schema.columns WHERE table_name = '<<TABLE>>' AND table_schema = '<<SCHEMA>>'"
					},
					"Folder": {
						"type": "String"
					},
					"File": {
						"type": "String"
					}
				},
				"folder": {
					"name": "SQL Server"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/04-SQLServer-Generate-Source-Schema_Bak')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Generate Schema",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set-Schema",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Table",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-File",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "@replace(replace(variables('SQL'), '<<TABLE>>', variables('Table')), '<<SCHEMA>>', variables('Schema'))",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SRC_SQLSERVER",
								"type": "DatasetReference",
								"parameters": {
									"kvSecret": {
										"value": "@pipeline().parameters.TaskDetails.SourceServer",
										"type": "Expression"
									},
									"tableName": "erch",
									"schemaName": "dbo"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RAW_ADLS_Schema",
								"type": "DatasetReference",
								"parameters": {
									"BlobPath": {
										"value": "@variables('Folder')",
										"type": "Expression"
									},
									"BlobName": {
										"value": "@variables('File')",
										"type": "Expression"
									},
									"Compression": "none",
									"ColumnDelim": ",",
									"HeaderRow": false
								}
							}
						]
					},
					{
						"name": "Generate Schema Original",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Generate Schema",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "@replace(replace(variables('SQL-Original'), '<<TABLE>>', variables('Table')), '<<SCHEMA>>', variables('Schema'))",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SRC_SQLSERVER",
								"type": "DatasetReference",
								"parameters": {
									"kvSecret": {
										"value": "@pipeline().parameters.TaskDetails.SourceServer",
										"type": "Expression"
									},
									"tableName": "erch",
									"schemaName": "dbo"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RAW_ADLS_Schema",
								"type": "DatasetReference",
								"parameters": {
									"BlobPath": {
										"value": "@concat(variables('Folder'), '/original/')",
										"type": "Expression"
									},
									"BlobName": {
										"value": "@concat(variables('File'), '.csv')",
										"type": "Expression"
									},
									"Compression": "none",
									"ColumnDelim": ",",
									"HeaderRow": true
								}
							}
						]
					},
					{
						"name": "If-Empty-Delete",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Generate Schema Original",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Generate Schema').output.rowsCopied, 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete-Empty-File",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "BINARY_ADLS",
											"type": "DatasetReference",
											"parameters": {
												"File": {
													"value": "@variables('File')",
													"type": "Expression"
												},
												"Container": "raw",
												"Folder": {
													"value": "@variables('Folder')",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "LS_AzureDatalake",
												"type": "LinkedServiceReference"
											},
											"path": "log"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true
										}
									}
								}
							]
						}
					},
					{
						"name": "Set-Folder",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Folder",
							"value": {
								"value": "@toLower(concat(pipeline().parameters.TaskDetails.SourceGroup, '//', 'schema'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-File",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "File",
							"value": {
								"value": "@toLower(concat(pipeline().parameters.TaskDetails.SourceName, '.', 'schema'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Table",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Table",
							"value": {
								"value": "@split(pipeline().parameters.TaskDetails.SourceLocation,'.')[1]",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Schema",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Schema",
							"value": {
								"value": "@split(pipeline().parameters.TaskDetails.SourceLocation,'.')[0]",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TaskDetails": {
						"type": "object"
					}
				},
				"variables": {
					"Schema": {
						"type": "String"
					},
					"Table": {
						"type": "String"
					},
					"SQL": {
						"type": "String",
						"defaultValue": "SELECT column_name,     CASE \t\tWHEN data_type = 'bit' THEN 'boolean' \t\tWHEN data_type = 'bigint' THEN 'long' \t\tWHEN data_type IN ( 'int', 'smallint' ) THEN 'integer' \t\tWHEN data_type IN ( 'float', 'double', 'money', 'smallmoney' ) THEN 'double' \t\tWHEN data_type IN ( 'numeric' ) THEN 'decimal'  \t\tWHEN data_type IN ( 'nvarchar', 'varchar', 'char', 'nchar' ) THEN 'string' \t\tWHEN data_type IN ( 'date', 'datetime', 'datetime2', 'smalldatetime') THEN 'timestamp' \t\tELSE 'string'          \tEND AS fieldtype,     data_type,     COALESCE(datetime_precision, numeric_precision, character_maximum_length) precision,     numeric_scale scale, \ttable_name, \ttable_schema FROM information_schema.columns   WHERE table_name = '<<TABLE>>'          AND table_schema = '<<SCHEMA>>'  ORDER BY ORDINAL_POSITION"
					},
					"SQL-Original": {
						"type": "String",
						"defaultValue": "SELECT * FROM information_schema.columns WHERE table_name = '<<TABLE>>' AND table_schema = '<<SCHEMA>>'"
					},
					"Folder": {
						"type": "String"
					},
					"File": {
						"type": "String"
					}
				},
				"folder": {
					"name": "z_Archive"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/05-DL-Load-Raw-to-Cleansed')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LU-Manifest",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[CTL].[GetManifestCleansed]",
								"storedProcedureParameters": {
									"SourceObject": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.SourceName",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabase_Ctrldb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Loop Manifest",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LU-Manifest",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LU-Manifest').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SP-Update-Manifest-DL-Cleansed",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "SwitchCluster",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[UpdateManifestDLCleansed]",
										"storedProcedureParameters": {
											"BatchExecutionLogID": {
												"value": {
													"value": "@item().BatchExecutionLogID",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"SourceObject": {
												"value": {
													"value": "@item().SourceObject",
													"type": "Expression"
												},
												"type": "String"
											},
											"StartCounter": {
												"value": {
													"value": "@item().StartCounter",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineRunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Set-ClusterType",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "ClusterType",
										"value": {
											"value": "@toLower(last(split(pipeline().parameters.TaskDetails.Processor,'|')))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SwitchCluster",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "Set-ClusterType",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@variables('ClusterType')",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "clusterpool",
												"activities": [
													{
														"name": "Set-ReturnValue-Pool",
														"type": "SetVariable",
														"dependsOn": [
															{
																"activity": "Load-To-Cleansed-Zone-ClusterPool",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"variableName": "ReturnValue",
															"value": {
																"value": "@string(activity('Load-To-Cleansed-Zone-ClusterPool').output.runOutput)",
																"type": "Expression"
															}
														}
													},
													{
														"name": "Load-To-Cleansed-Zone-ClusterPool",
														"type": "DatabricksNotebook",
														"dependsOn": [],
														"policy": {
															"timeout": "0.02:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"notebookPath": {
																"value": "@pipeline().parameters.TaskDetails.Command",
																"type": "Expression"
															},
															"baseParameters": {
																"source_object": {
																	"value": "@pipeline().parameters.TaskDetails.SourceName",
																	"type": "Expression"
																},
																"start_counter": {
																	"value": "@item().StartCounter",
																	"type": "Expression"
																},
																"end_counter": {
																	"value": "@item().EndCounter",
																	"type": "Expression"
																},
																"delta_column": {
																	"value": "@item().DeltaColumn",
																	"type": "Expression"
																},
																"source_param": {
																	"value": "@string(pipeline().parameters.TaskDetails)",
																	"type": "Expression"
																}
															},
															"libraries": [
																{
																	"maven": {
																		"coordinates": "com.microsoft.azure:azure-sqldb-spark:1.0.2"
																	}
																}
															]
														},
														"linkedServiceName": {
															"referenceName": "LS_AzureDatabricks_InstancePool",
															"type": "LinkedServiceReference",
															"parameters": {
																"kvSecret": {
																	"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
																	"type": "Expression"
																},
																"PoolId": {
																	"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[1]",
																	"type": "Expression"
																},
																"DatabricksVersion": {
																	"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[3]",
																	"type": "Expression"
																}
															}
														}
													}
												]
											},
											{
												"value": "jobcluster",
												"activities": [
													{
														"name": "Set-ReturnValue-JobCluster",
														"type": "SetVariable",
														"dependsOn": [
															{
																"activity": "Load-To-Cleansed-Zone-JobCluster",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"variableName": "ReturnValue",
															"value": {
																"value": "@string(activity('Load-To-Cleansed-Zone-JobCluster').output.runOutput)",
																"type": "Expression"
															}
														}
													},
													{
														"name": "Load-To-Cleansed-Zone-JobCluster",
														"type": "DatabricksNotebook",
														"dependsOn": [],
														"policy": {
															"timeout": "0.02:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"notebookPath": {
																"value": "@pipeline().parameters.TaskDetails.Command",
																"type": "Expression"
															},
															"baseParameters": {
																"source_object": {
																	"value": "@pipeline().parameters.TaskDetails.SourceName",
																	"type": "Expression"
																},
																"start_counter": {
																	"value": "@item().StartCounter",
																	"type": "Expression"
																},
																"end_counter": {
																	"value": "@item().EndCounter",
																	"type": "Expression"
																},
																"delta_column": {
																	"value": "@item().DeltaColumn",
																	"type": "Expression"
																},
																"source_param": {
																	"value": "@string(pipeline().parameters.TaskDetails)",
																	"type": "Expression"
																}
															},
															"libraries": [
																{
																	"maven": {
																		"coordinates": "com.microsoft.azure:azure-sqldb-spark:1.0.2"
																	}
																}
															]
														},
														"linkedServiceName": {
															"referenceName": "LS-AzureDatabricks_JobCluster",
															"type": "LinkedServiceReference",
															"parameters": {
																"kvSecret": {
																	"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
																	"type": "Expression"
																},
																"DataBricksClusterType": {
																	"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[2]",
																	"type": "Expression"
																},
																"DataBricksClusterVersion": {
																	"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[3]",
																	"type": "Expression"
																},
																"DataBricksWorkerNodes": {
																	"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[4]",
																	"type": "Expression"
																}
															}
														}
													}
												]
											},
											{
												"value": "interactive",
												"activities": [
													{
														"name": "Set-Return-Interactive",
														"type": "SetVariable",
														"dependsOn": [
															{
																"activity": "Load-To-Cleansed-Zone-Interactive",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"variableName": "ReturnValue",
															"value": {
																"value": "@string(activity('Load-To-Cleansed-Zone-Interactive').output.runOutput)",
																"type": "Expression"
															}
														}
													},
													{
														"name": "Load-To-Cleansed-Zone-Interactive",
														"type": "DatabricksNotebook",
														"dependsOn": [],
														"policy": {
															"timeout": "0.02:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"notebookPath": {
																"value": "@pipeline().parameters.TaskDetails.Command",
																"type": "Expression"
															},
															"baseParameters": {
																"source_object": {
																	"value": "@pipeline().parameters.TaskDetails.SourceName",
																	"type": "Expression"
																},
																"start_counter": {
																	"value": "@item().StartCounter",
																	"type": "Expression"
																},
																"end_counter": {
																	"value": "@item().EndCounter",
																	"type": "Expression"
																},
																"delta_column": {
																	"value": "@pipeline().parameters.TaskDetails.WatermarkColumn",
																	"type": "Expression"
																},
																"source_param": {
																	"value": "@string(pipeline().parameters.TaskDetails)",
																	"type": "Expression"
																}
															},
															"libraries": [
																{
																	"maven": {
																		"coordinates": "com.microsoft.azure:azure-sqldb-spark:1.0.2"
																	}
																}
															]
														},
														"linkedServiceName": {
															"referenceName": "LS-AzureDatabricks_DefinedCluster",
															"type": "LinkedServiceReference",
															"parameters": {
																"kvSecret": {
																	"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
																	"type": "Expression"
																},
																"clusterId": {
																	"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[1]",
																	"type": "Expression"
																}
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Log Failure DL Cleansed",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Loop Manifest",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[CTL].[UpdateTaskLog]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": "Error Occurred during Trusted Zone load",
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": null
								},
								"Status": {
									"value": "Failure",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Log Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "If Tech Reconciliation Required",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[CTL].[UpdateTaskLog]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.LastLoadedFile",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "Success",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "If Tech Reconciliation Required",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Loop Manifest",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(and(equals(pipeline().parameters.TaskDetails.SourceType,'BLOB Storage (json)'),equals(pipeline().parameters.TaskDetails.ControlStageId,2)),greater(activity('LU-Manifest').output.count,0))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute-Technical-Reconciliation",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Technical-Reconciliation",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"TaskDetails": {
												"value": "@pipeline().parameters.TaskDetails",
												"type": "Expression"
											},
											"BatchLogId": {
												"value": "@pipeline().parameters.BatchLogId",
												"type": "Expression"
											},
											"TaskExecutionLogId": {
												"value": "@pipeline().parameters.TaskExecutionLogId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Log Failure Tech Rec",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Execute-Technical-Reconciliation",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[UpdateTaskLog]",
										"storedProcedureParameters": {
											"BatchLogId": {
												"value": {
													"value": "@pipeline().parameters.BatchLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"TaskId": {
												"value": {
													"value": "@pipeline().parameters.TaskDetails.TaskId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"ExecutionLogId": {
												"value": {
													"value": "@pipeline().parameters.TaskExecutionLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Status": {
												"value": "Failure",
												"type": "String"
											},
											"ErrorMessage": {
												"value": "Error Occurred during Cleansed Zone load technical reconciliation",
												"type": "String"
											},
											"Output": {
												"value": null
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TaskDetails": {
						"type": "object"
					},
					"BatchLogId": {
						"type": "int"
					},
					"TaskExecutionLogId": {
						"type": "int"
					},
					"ProjectRunID": {
						"type": "string"
					}
				},
				"variables": {
					"ReturnValue": {
						"type": "String"
					},
					"ClusterType": {
						"type": "String"
					},
					"SourceContainer": {
						"type": "String",
						"defaultValue": "raw"
					},
					"SourceDirectory": {
						"type": "String"
					},
					"SourceFileName": {
						"type": "String"
					},
					"TargetContainer": {
						"type": "String",
						"defaultValue": "cleansed"
					},
					"TargetDirectory": {
						"type": "String"
					},
					"TargetFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Data Lake"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-21T11:04:49Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Business-Reconciliation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Business Recon Queries",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[CTL].[GetBusinessRecCurated]",
								"storedProcedureParameters": {
									"BusinessReconGroup": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.BusinessReconGroup",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabase_Ctrldb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Business Rec",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Business Recon Queries",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Business Recon Queries').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy-DeltaLake-RecordMeasure",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set Bus Rec Query",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureDatabricksDeltaLakeSource",
											"query": {
												"value": "@variables('TargetQuery')",
												"type": "Expression"
											},
											"exportSettings": {
												"type": "AzureDatabricksDeltaLakeExportCommand"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": "truncate table ctl.BusinessRecStage",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "LS_AzureDatalake",
												"type": "LinkedServiceReference"
											},
											"path": "raw/landing/isu_data",
											"enableCompression": false
										},
										"parallelCopies": 32,
										"dataIntegrationUnits": 8
									},
									"inputs": [
										{
											"referenceName": "DS_CURATED_ADLS_DELTALAKE",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "curated.dimdate"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSqlDatabase_Ctrl_db_businessrecstage",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Set Bus Rec Query",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "TargetQuery",
										"value": {
											"value": "@item().TargetQuery",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup_copy_rec",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Copy-DeltaLake-RecordMeasure",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "AzureSqlDatabase_Ctrl_db_businessrecstage",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "SP-Update-Business-Rec-Curated",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Lookup_copy_rec",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[UpdateBusinessRecCurated]",
										"storedProcedureParameters": {
											"TargetMeasureValue": {
												"value": {
													"value": "@activity('Lookup_copy_rec').output.firstRow.TargetMeasure",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"BusinessRecId": {
												"value": {
													"value": "@item().BusinessRecId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"UpdatedBatchExecutionId": {
												"value": {
													"value": "@pipeline().parameters.BatchLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"UpdatedTaskExecutionLogId": {
												"value": {
													"value": "@pipeline().parameters.TaskExecutionLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"CuratedPipelineRunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"UpdatedDateTime": {
												"value": {
													"value": "@convertFromUtc(getFutureTime(0,'Day'),'AUS Eastern Standard Time')",
													"type": "Expression"
												},
												"type": "Datetime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Delete-Trigger-File",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "ForEach Business Rec",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "RAW_ADLS_JSON_v2_NOCOMP",
								"type": "DatasetReference",
								"parameters": {
									"BlobPath": "triggers",
									"BlobName": "trigger_batch_daily_sapslt.json"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"BatchLogId": {
						"type": "int",
						"defaultValue": 1
					},
					"TaskExecutionLogId": {
						"type": "int",
						"defaultValue": 2
					},
					"ProjectRunId": {
						"type": "string"
					},
					"WatermarkValue": {
						"type": "string"
					},
					"BusinessReconGroup": {
						"type": "string",
						"defaultValue": "Water Consumption Reconciliation"
					},
					"MeasureName": {
						"type": "string",
						"defaultValue": "Billing Document Count"
					}
				},
				"variables": {
					"TargetQuery": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Validation"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/JsonFileSplitTest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy-Blob-Raw-Json-Test",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SRC_BLOB_JSON_copy1",
								"type": "DatasetReference",
								"parameters": {
									"BlobName": "0COMP_CODE_TEXT_20210826164331.json"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RAW_ADLS_JSON_v2",
								"type": "DatasetReference",
								"parameters": {
									"BlobPath": "sapisu/0comp_code_text/json/year=2021/month=08/day=26/",
									"BlobName": "0COMP_CODE_TEXT_2021-08-26_164331_987.json"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "z_Archive/Test"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SRC_BLOB_JSON_copy1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/recon-record-validation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If-Check",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "LU-Source",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('LU-Source').output.firstRow.IsAuditTable,false)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "SP-Update-Validation",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[RecordDataValidation]",
										"storedProcedureParameters": {
											"HighWatermark": {
												"value": {
													"value": "@json(string(pipeline().parameters.ValidationDetails)).ReturnValue",
													"type": "Expression"
												},
												"type": "String"
											},
											"MaxValue": {
												"value": {
													"value": "@json(string(pipeline().parameters.ValidationDetails)).MaximumValue",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"MinValue": {
												"value": {
													"value": "@json(string(pipeline().parameters.ValidationDetails)).MinimumValue",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"RecordCount": {
												"value": {
													"value": "@json(string(pipeline().parameters.ValidationDetails)).RecordCount",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"TotalValue": {
												"value": {
													"value": "@json(string(pipeline().parameters.ValidationDetails)).TotalValue",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"ValidationType": {
												"value": {
													"value": "@json(string(pipeline().parameters.ValidationDetails)).ValidationType",
													"type": "Expression"
												},
												"type": "String"
											},
											"ProjectRunID": {
												"value": {
													"value": "@pipeline().parameters.ProjectRunID",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceID": {
												"value": {
													"value": "@pipeline().parameters.SourceID",
													"type": "Expression"
												},
												"type": "Int64"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference",
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "LU-Source",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT * FROM CTL.vw_ControlConfiguration WHERE SourceID = ', string(pipeline().parameters.SourceID))",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabase_Ctrldb",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ProjectRunID": {
						"type": "string",
						"defaultValue": "0b6110e9-8d68-4a0a-8ee8-0182a03289ef"
					},
					"ValidationDetails": {
						"type": "object",
						"defaultValue": {
							"SOURCECOLUMN": "COALESCE (UPDATED_DATE, CREATED_DATE)",
							"RETURNVALUE": "2020-11-08 17:58:04",
							"RECORDCOUNT": 52254,
							"TOTALVALUE": 3361637939,
							"MAXVALUE": 133557,
							"MINVALUE": 2,
							"VALIDATIONTYPE": "SOURCE"
						}
					},
					"SourceID": {
						"type": "int"
					}
				},
				"folder": {
					"name": "Validation"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/util-datalake-move-file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get File Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BINARY_ADLS",
								"type": "DatasetReference",
								"parameters": {
									"File": {
										"value": "@pipeline().parameters.SourceFile",
										"type": "Expression"
									},
									"Container": {
										"value": "@pipeline().parameters.SourceContainer",
										"type": "Expression"
									},
									"Folder": {
										"value": "@pipeline().parameters.SourceFolder",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "If-File-Exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get File Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Get File Metadata').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Move File",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"deleteFilesAfterCompletion": {
													"value": "@pipeline().parameters.DeleteFile",
													"type": "Expression"
												}
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "BINARY_ADLS",
											"type": "DatasetReference",
											"parameters": {
												"File": {
													"value": "@pipeline().parameters.SourceFile",
													"type": "Expression"
												},
												"Container": {
													"value": "@pipeline().parameters.SourceContainer",
													"type": "Expression"
												},
												"Folder": {
													"value": "@pipeline().parameters.SourceFolder",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "BINARY_ADLS",
											"type": "DatasetReference",
											"parameters": {
												"File": {
													"value": "@pipeline().parameters.TargetFile",
													"type": "Expression"
												},
												"Container": {
													"value": "@pipeline().parameters.TargetContainer",
													"type": "Expression"
												},
												"Folder": {
													"value": "@pipeline().parameters.TargetFolder",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "If-DeleteFile",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "If-File-Exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.DeleteFile",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete-File",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "BINARY_ADLS",
											"type": "DatasetReference",
											"parameters": {
												"File": {
													"value": "@pipeline().parameters.SourceFile",
													"type": "Expression"
												},
												"Container": {
													"value": "@pipeline().parameters.SourceContainer",
													"type": "Expression"
												},
												"Folder": {
													"value": "@pipeline().parameters.SourceFolder",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFolder": {
						"type": "string"
					},
					"SourceFile": {
						"type": "string"
					},
					"SourceContainer": {
						"type": "string"
					},
					"TargetContainer": {
						"type": "string"
					},
					"DeleteFile": {
						"type": "bool",
						"defaultValue": true
					},
					"TargetFolder": {
						"type": "string"
					},
					"TargetFile": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Utility"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/04-Blob-A-Source Load_CSV')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Clone of 05-DL-Load-Raw-to-Trusted",
				"activities": [
					{
						"name": "Get Metadata",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set-Source-Container",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Source-Filename",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set ProjectName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SRC_BLOB_CSV",
								"type": "DatasetReference",
								"parameters": {
									"BlobContainer": {
										"value": "@variables('SourceContainer')",
										"type": "Expression"
									},
									"BlobName": "@concat('*',variables('SourceFileName'),'*.nc')"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Loop-All-Files",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SET-FileName to Child Item",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileName",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Handle Manifest Files",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "Set Manifest File or Not",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@variables('Manifest')",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "DataFile",
												"activities": [
													{
														"name": "Copy-Blob-to-DataLake-Raw",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "Execute-DP-Blob-A-Pre-Process_NC_File",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true,
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings"
																}
															},
															"sink": {
																"type": "DelimitedTextSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "DelimitedTextWriteSettings",
																	"quoteAllText": true,
																	"fileExtension": ".txt"
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "SRC_BLOB_CSV",
																"type": "DatasetReference",
																"parameters": {
																	"BlobContainer": {
																		"value": "@variables('SourceContainer')",
																		"type": "Expression"
																	},
																	"BlobName": {
																		"value": "@concat(variables('FileName'),'.csv')",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "RAW_ADLS_CSV",
																"type": "DatasetReference",
																"parameters": {
																	"BlobPath": "@activity('Get Full File Name').output.firstrow.StorageFolder",
																	"BlobName": "@activity('Get Full File Name').output.firstrow.StorageFile"
																}
															}
														]
													},
													{
														"name": "Execute-DP-Load-Raw-to-Delta-Table",
														"type": "ExecutePipeline",
														"dependsOn": [
															{
																"activity": "SP-Upsert-Manifest-Record-Data",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "04-DL-Load-Raw-to-Delta-Table",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"BatchLogID": {
																	"value": "@pipeline().parameters.BatchLogId",
																	"type": "Expression"
																},
																"TaskExecutionLogId": {
																	"value": "@pipeline().parameters.TaskExecutionLogId",
																	"type": "Expression"
																},
																"TaskDetails": {
																	"value": "@pipeline().parameters.TaskDetails",
																	"type": "Expression"
																},
																"TargetBLOBFolder": {
																	"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
																	"type": "Expression"
																},
																"TargetBLOBName": {
																	"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
																	"type": "Expression"
																},
																"ProjectRunID": {
																	"value": "@pipeline().parameters.ProjectRunID",
																	"type": "Expression"
																},
																"SourceFileName": {
																	"value": "@concat(variables('FileName'),'.csv')",
																	"type": "Expression"
																},
																"SourceFileDateTimeStamp": {
																	"value": "@variables('FileDateTimeStamp')",
																	"type": "Expression"
																}
															}
														}
													},
													{
														"name": "Copy Blob File to ArchiveContainer",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "Execute-DP-Load-Raw-to-Delta-Table",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true,
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings"
																}
															},
															"sink": {
																"type": "DelimitedTextSink",
																"storeSettings": {
																	"type": "AzureBlobStorageWriteSettings"
																},
																"formatSettings": {
																	"type": "DelimitedTextWriteSettings",
																	"quoteAllText": true,
																	"fileExtension": ".txt"
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "SRC_BLOB_CSV",
																"type": "DatasetReference",
																"parameters": {
																	"BlobContainer": {
																		"value": "@variables('SourceContainer')",
																		"type": "Expression"
																	},
																	"BlobName": {
																		"value": "@concat(variables('FileName'),'.csv')",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "ARCHIVE_BLOB_CSV",
																"type": "DatasetReference",
																"parameters": {
																	"BlobContainer": {
																		"value": "@concat(variables('ProjectName'),'/',pipeline().parameters.RunDate,'/',pipeline().parameters.RunTime)",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Delete File from LandingBlob",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Copy Blob File to ArchiveContainer",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "SRC_BLOB_CSV",
																"type": "DatasetReference",
																"parameters": {
																	"BlobContainer": {
																		"value": "@variables('SourceContainer')",
																		"type": "Expression"
																	},
																	"BlobName": {
																		"value": "@concat(variables('FileName'),'.csv')",
																		"type": "Expression"
																	}
																}
															},
															"logStorageSettings": {
																"linkedServiceName": {
																	"referenceName": "LS_AzureDatalake",
																	"type": "LinkedServiceReference"
																},
																"path": "assurance"
															},
															"enableLogging": true,
															"storeSettings": {
																"type": "AzureBlobStorageReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "SP-Upsert-Manifest-Record-Data",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "Copy-Blob-to-DataLake-Raw",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[CTL].[UpsertManifestRecord]",
															"storedProcedureParameters": {
																"BatchExecutionLogID": {
																	"value": {
																		"value": "@pipeline().parameters.BatchLogId",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"Container": {
																	"value": "raw",
																	"type": "String"
																},
																"DeltaColumn": {
																	"value": null,
																	"type": "String"
																},
																"EndCounter": {
																	"value": "0",
																	"type": "String"
																},
																"FileName": {
																	"value": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"FolderName": {
																	"value": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"PipelineRunID": {
																	"value": {
																		"value": "@pipeline().RunId",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"Records": {
																	"value": "1",
																	"type": "Int64"
																},
																"RecordsDeltaTable": {
																	"value": null,
																	"type": "Int64"
																},
																"SourceObject": {
																	"value": {
																		"value": "@pipeline().parameters.TaskDetails.SourceName",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"StartCounter": {
																	"value": "0",
																	"type": "String"
																},
																"TaskExecutionLogID": {
																	"value": {
																		"value": "@pipeline().parameters.TaskExecutionLogId",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"SourceFileName": {
																	"value": {
																		"value": "@variables('FileName')",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"IsManifest": {
																	"value": "false",
																	"type": "Boolean"
																},
																"SourceFileDateStamp": {
																	"value": {
																		"value": "@variables('FileDateTimeStamp')",
																		"type": "Expression"
																	},
																	"type": "String"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "LS-AzureSqlDatabase_Ctrldb",
															"type": "LinkedServiceReference",
															"parameters": {}
														}
													},
													{
														"name": "Execute-DP-Blob-A-Pre-Process_NC_File",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "04-Blob-A-Pre-Process_NC_File",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"BatchLogID": {
																	"value": "@pipeline().parameters.BatchLogId",
																	"type": "Expression"
																},
																"TaskExecutionLogId": {
																	"value": "@pipeline().parameters.TaskExecutionLogId",
																	"type": "Expression"
																},
																"TaskDetails": {
																	"value": "@pipeline().parameters.TaskDetails",
																	"type": "Expression"
																},
																"SourceContainer": {
																	"value": "@variables('SourceContainer')",
																	"type": "Expression"
																},
																"ProjectRunID": {
																	"value": "@pipeline().parameters.ProjectRunID",
																	"type": "Expression"
																},
																"SourceFileName": {
																	"value": "@variables('FileName')",
																	"type": "Expression"
																},
																"ProjectName": {
																	"value": "@variables('ProjectName')",
																	"type": "Expression"
																},
																"RunDate": {
																	"value": "@pipeline().parameters.RunDate",
																	"type": "Expression"
																},
																"RunTime": {
																	"value": "@pipeline().parameters.RunTime",
																	"type": "Expression"
																}
															}
														}
													}
												]
											},
											{
												"value": "ManifestFile",
												"activities": [
													{
														"name": "Copy Manifest to Raw Zone",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "JsonSource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true,
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "JsonReadSettings"
																}
															},
															"sink": {
																"type": "JsonSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "JsonWriteSettings"
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "SRC_BLOB_JSON_copy1",
																"type": "DatasetReference",
																"parameters": {
																	"BlobName": {
																		"value": "@variables('FileName')",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "RAW_ADLS_JSON_v2",
																"type": "DatasetReference",
																"parameters": {
																	"BlobPath": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
																		"type": "Expression"
																	},
																	"BlobName": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Archive Manifest File",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "SP-Update-Manifest-Value",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "JsonSource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true,
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "JsonReadSettings"
																}
															},
															"sink": {
																"type": "JsonSink",
																"storeSettings": {
																	"type": "AzureBlobStorageWriteSettings"
																},
																"formatSettings": {
																	"type": "JsonWriteSettings"
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "SRC_BLOB_JSON_copy1",
																"type": "DatasetReference",
																"parameters": {
																	"BlobName": {
																		"value": "@variables('FileName')",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "ARCHIVE_BLOB_JSON",
																"type": "DatasetReference",
																"parameters": {
																	"BlobContainer": {
																		"value": "@concat(variables('ProjectName'),'/',pipeline().parameters.RunDate,'/',pipeline().parameters.RunTime)",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Delete File From Landing",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Archive Manifest File",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "SRC_BLOB_JSON_copy1",
																"type": "DatasetReference",
																"parameters": {
																	"BlobName": {
																		"value": "@variables('FileName')",
																		"type": "Expression"
																	}
																}
															},
															"logStorageSettings": {
																"linkedServiceName": {
																	"referenceName": "LS_AzureDatalake",
																	"type": "LinkedServiceReference"
																},
																"path": "assurance"
															},
															"enableLogging": true,
															"storeSettings": {
																"type": "AzureBlobStorageReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "SP-Upsert-Manifest-Record",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "Copy Manifest to Raw Zone",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[CTL].[UpsertManifestRecord]",
															"storedProcedureParameters": {
																"BatchExecutionLogID": {
																	"value": {
																		"value": "@pipeline().parameters.BatchLogId",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"Container": {
																	"value": "raw",
																	"type": "String"
																},
																"DeltaColumn": {
																	"value": null,
																	"type": "String"
																},
																"EndCounter": {
																	"value": "0",
																	"type": "String"
																},
																"FileName": {
																	"value": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"FolderName": {
																	"value": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"PipelineRunID": {
																	"value": {
																		"value": "@pipeline().RunId",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"Records": {
																	"value": "1",
																	"type": "Int64"
																},
																"RecordsDeltaTable": {
																	"value": null,
																	"type": "Int64"
																},
																"SourceFileName": {
																	"value": {
																		"value": "@variables('FileName')",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"SourceObject": {
																	"value": {
																		"value": "@pipeline().parameters.TaskDetails.SourceName",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"StartCounter": {
																	"value": "0",
																	"type": "String"
																},
																"TaskExecutionLogID": {
																	"value": {
																		"value": "@pipeline().parameters.TaskExecutionLogId",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"IsManifest": {
																	"value": "true",
																	"type": "Boolean"
																},
																"SourceFileDateStamp": {
																	"value": {
																		"value": "@variables('FileDateTimeStamp')",
																		"type": "Expression"
																	},
																	"type": "String"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "LS-AzureSqlDatabase_Ctrldb",
															"type": "LinkedServiceReference",
															"parameters": {}
														}
													},
													{
														"name": "Notebook-Read-Manifest-Value",
														"type": "DatabricksNotebook",
														"dependsOn": [
															{
																"activity": "SP-Upsert-Manifest-Record",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"notebookPath": {
																"value": "@variables('NoteBookURL')",
																"type": "Expression"
															},
															"baseParameters": {
																"file_object": {
																	"value": "@concat(activity('Get Full File Name').output.firstrow.StorageFolder,activity('Get Full File Name').output.firstrow.StorageFile)",
																	"type": "Expression"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "LS-AzureDatabricks_DefinedCluster",
															"type": "LinkedServiceReference",
															"parameters": {
																"kvSecret": {
																	"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
																	"type": "Expression"
																},
																"clusterId": {
																	"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[1]",
																	"type": "Expression"
																}
															}
														}
													},
													{
														"name": "SP-Update-Manifest-Value",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "Notebook-Read-Manifest-Value",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[CTL].[UpdateManifestValue]",
															"storedProcedureParameters": {
																"BatchExecutionLogID": {
																	"value": {
																		"value": "@pipeline().parameters.BatchLogId",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"M_DeltaRecordCount": {
																	"value": {
																		"value": "@string(activity('Notebook-Read-Manifest-Value').output.runOutput.DELTA_RECORD_COUNT)",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"SourceFileDateStamp": {
																	"value": {
																		"value": "@variables('FileDateTimeStamp')",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"TaskExecutionLogID": {
																	"value": {
																		"value": "@pipeline().parameters.TaskExecutionLogId",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"M_TotalNoRows": {
																	"value": {
																		"value": "@string(activity('Notebook-Read-Manifest-Value').output.runOutput.TOTAL_NO_OF_ROWS)",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"M_Message": {
																	"value": {
																		"value": "@string(activity('Notebook-Read-Manifest-Value').output.runOutput.message)",
																		"type": "Expression"
																	},
																	"type": "String"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "LS-AzureSqlDatabase_Ctrldb",
															"type": "LinkedServiceReference",
															"parameters": {}
														}
													}
												]
											}
										]
									}
								},
								{
									"name": "Set Manifest File or Not",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set FileDateTimeStamp",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "Manifest",
										"value": {
											"value": "@if(contains(variables('FileName'),'MANIFEST'),'ManifestFile','DataFile')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Get Full File Name",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[CTL].[GetStorageFileName]",
											"storedProcedureParameters": {
												"DeltaExtract": {
													"type": "Boolean",
													"value": {
														"value": "@pipeline().parameters.TaskDetails.DeltaExtract",
														"type": "Expression"
													}
												},
												"FileName": {
													"type": "String",
													"value": {
														"value": "@concat(pipeline().parameters.TaskDetails.SourceLocation, if(contains(variables('FileName'),'MANIFEST'),'_MANIFEST',''))",
														"type": "Expression"
													}
												},
												"FolderName": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.TaskDetails.TargetLocation",
														"type": "Expression"
													}
												},
												"Grain": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.TaskDetails.ObjectGrain",
														"type": "Expression"
													}
												},
												"Compressed": {
													"type": "Boolean",
													"value": {
														"value": "true",
														"type": "Expression"
													}
												},
												"TargetType": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.TaskDetails.TargetType",
														"type": "Expression"
													}
												}
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "AzureSqlDatabase_Ctrldb",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "Set FileDateTimeStamp",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get Full File Name",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "SET-FileName to Child Item",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileDateTimeStamp",
										"value": {
											"value": "@replace(last(split(variables('FileName'),'_')),'.json','')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Set-Source-Container",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceContainer",
							"value": {
								"value": "@toLower(first(split(pipeline().parameters.TaskDetails.SourceGroup,'/')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Source-Filename",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceFileName",
							"value": {
								"value": "@last(split(pipeline().parameters.TaskDetails.SourceLocation,'/'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Log Failure DL Raw",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Loop-All-Files",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[CTL].[UpdateTaskLog]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": {
										"value": "@concat(pipeline().parameters.TaskDetails.SourceLocation, ' failed to load to raw zone')",
										"type": "Expression"
									},
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": null
								},
								"Status": {
									"value": "Failure",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {}
						}
					},
					{
						"name": "Log Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Loop-All-Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[CTL].[UpdateTaskLog]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.LastLoadedFile",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "Success",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {}
						}
					},
					{
						"name": "Set ProjectName",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ProjectName",
							"value": {
								"value": "@pipeline().parameters.TaskDetails.SourceGroup",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TaskDetails": {
						"type": "object"
					},
					"BatchLogId": {
						"type": "int"
					},
					"TaskExecutionLogId": {
						"type": "int"
					},
					"ProjectRunID": {
						"type": "string"
					},
					"TargetBLOBFolder": {
						"type": "string"
					},
					"TargetBLOBName": {
						"type": "string"
					},
					"StartCounter": {
						"type": "string"
					},
					"EndCounter": {
						"type": "string"
					},
					"ValidationDetails": {
						"type": "string"
					},
					"RunDate": {
						"type": "string"
					},
					"RunTime": {
						"type": "string"
					}
				},
				"variables": {
					"SourceContainer": {
						"type": "String"
					},
					"SourceFileName": {
						"type": "String"
					},
					"OutputFileName": {
						"type": "String"
					},
					"DeltaSQL": {
						"type": "String"
					},
					"FileName": {
						"type": "String"
					},
					"DateStamp": {
						"type": "String"
					},
					"Manifest": {
						"type": "String"
					},
					"ProjectName": {
						"type": "String"
					},
					"FileDateTimeStamp": {
						"type": "String"
					},
					"NoteBookURL": {
						"type": "String",
						"defaultValue": "/build/raw/read-manifest-value"
					}
				},
				"folder": {
					"name": "Blob"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-30T08:46:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SRC_BLOB_CSV')]",
				"[concat(variables('factoryId'), '/pipelines/04-Blob-A-Pre-Process_NC_File')]",
				"[concat(variables('factoryId'), '/datasets/SRC_BLOB_JSON_copy1')]"
			]
		}
	]
}
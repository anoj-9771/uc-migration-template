{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-swcnonprod01-daf-dev-01"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/03-Execute-Project-Tasks')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Load Tasks",
						"description": "",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[CTL].[getExecutionTasks]",
								"storedProcedureParameters": {
									"ProjectId": {
										"type": "Int64",
										"value": {
											"value": "@pipeline().parameters.ProjectId",
											"type": "Expression"
										}
									},
									"StageId": {
										"type": "Int64",
										"value": {
											"value": "@pipeline().parameters.StageId",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabase_Ctrldb",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Execute Each Task",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Generate Batch Log",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Load Tasks').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Generate Task Log",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[CTL].[CreateTaskLog]",
											"storedProcedureParameters": {
												"BatchLogId": {
													"type": "Int64",
													"value": {
														"value": "@activity('Generate Batch Log').output.firstrow.BatchLogId",
														"type": "Expression"
													}
												},
												"TaskId": {
													"type": "Int64",
													"value": {
														"value": "@item().TaskId",
														"type": "Expression"
													}
												}
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "AzureSqlDatabase_Ctrldb",
											"type": "DatasetReference"
										}
									}
								},
								{
									"name": "ProcessNotebook-Raw-to-Trusted",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Generate Task Log",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().ControlStageId,4)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "EP-Raw-to-Trusted Databricks",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "05-DL-Load-Raw-to-Trusted",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"TaskDetails": {
															"value": "@item()",
															"type": "Expression"
														},
														"BatchLogId": {
															"value": "@activity('Generate Batch Log').output.firstrow.BatchLogId\n",
															"type": "Expression"
														},
														"TaskExecutionLogId": {
															"value": "@activity('Generate Task Log').output.firstrow.TaskLogId\n",
															"type": "Expression"
														},
														"ProjectRunID": {
															"value": "@pipeline().parameters.ProjectRunID",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "ProcessNotebook-Trusted-to-Curated",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Generate Task Log",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().ControlStageId,6)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "EP-Trusted-to-Curated-Databricks",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "05-DL-Load-Trusted-to-Curated",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"TaskDetails": {
															"value": "@item()",
															"type": "Expression"
														},
														"BatchLogId": {
															"value": "@activity('Generate Batch Log').output.firstrow.BatchLogId",
															"type": "Expression"
														},
														"TaskExecutionLogId": {
															"value": "@activity('Generate Task Log').output.firstrow.TaskLogId",
															"type": "Expression"
														},
														"ProjectRunID": {
															"value": "@pipeline().parameters.ProjectRunID",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "Blob-to-Raw      Stage1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Generate Task Log",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@and(equals(item().SourceType,'BLOB Storage (json)'), equals(item().ControlStageId,1))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "EP-Blob-to-Raw",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "04-Blob-A-Source-Copy_copy1",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"TaskDetails": {
															"value": "@item()",
															"type": "Expression"
														},
														"BatchLogId": {
															"value": "@activity('Generate Batch Log').output.firstrow.BatchLogId",
															"type": "Expression"
														},
														"TaskExecutionLogId": {
															"value": "@activity('Generate Task Log').output.firstrow.TaskLogId",
															"type": "Expression"
														},
														"ProjectRunID": {
															"value": "@pipeline().parameters.ProjectRunID",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "Raw-to-Trusted  Stage2",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Generate Task Log",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().ControlStageId,2)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "EP-Raw-to-Trusted",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "05-DL-Copy-Raw-to-Trusted",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"TaskDetails": {
															"value": "@item()",
															"type": "Expression"
														},
														"BatchLogId": {
															"value": "@activity('Generate Batch Log').output.firstrow.BatchLogId",
															"type": "Expression"
														},
														"TaskExecutionLogId": {
															"value": "@activity('Generate Task Log').output.firstrow.TaskLogId",
															"type": "Expression"
														},
														"ProjectRunID": {
															"value": "@pipeline().parameters.ProjectRunID",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "Trusted-to-Curated Stage3",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Generate Task Log",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().ControlStageId,3)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "EP-Trusted-to-Curated",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "05-DL-Copy-Trusted-to-Curated",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"TaskDetails": {
															"value": "@item()",
															"type": "Expression"
														},
														"BatchLogId": {
															"value": "@activity('Generate Batch Log').output.firstrow.BatchLogId",
															"type": "Expression"
														},
														"TaskExecutionLogId": {
															"value": "@activity('Generate Task Log').output.firstrow.TaskLogId",
															"type": "Expression"
														},
														"ProjectRunID": {
															"value": "@pipeline().parameters.ProjectRunID",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "ProcessNotebook",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Generate Task Log",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().ControlStageId,5)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "EP-Raw-to-Trusted Databricks_copy1",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "05-DL-Load-Raw-to-Trusted",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"TaskDetails": {
															"value": "@item()",
															"type": "Expression"
														},
														"BatchLogId": {
															"value": "@activity('Generate Batch Log').output.firstrow.BatchLogId\n",
															"type": "Expression"
														},
														"TaskExecutionLogId": {
															"value": "@activity('Generate Task Log').output.firstrow.TaskLogId\n",
															"type": "Expression"
														},
														"ProjectRunID": {
															"value": "@pipeline().parameters.ProjectRunID",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Batch Log Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Execute Each Task",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CTL].[UpdateBatchLog]",
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@activity('Generate Batch Log').output.firstrow.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"Status": {
									"value": "Complete",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {
								"kvSecret": "sql-db-controldb-connectionstring"
							}
						}
					},
					{
						"name": "Batch Log Failure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Execute Each Task",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CTL].[UpdateBatchLog]",
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@activity('Generate Batch Log').output.firstrow.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": "Check Task Execution Log for errors",
									"type": "String"
								},
								"Status": {
									"value": "Failure",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {
								"kvSecret": "sql-db-controldb-connectionstring"
							}
						}
					},
					{
						"name": "Generate Batch Log",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Load Tasks",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[CTL].[CreateBatchLog]",
								"storedProcedureParameters": {
									"ProjectID": {
										"type": "Int64",
										"value": {
											"value": "@pipeline().parameters.ProjectId",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabase_Ctrldb",
								"type": "DatasetReference"
							}
						}
					}
				],
				"parameters": {
					"StageId": {
						"type": "int"
					},
					"ProjectId": {
						"type": "int"
					},
					"ProjectRunID": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-30T02:11:41Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/04-Blob-A-Source-Copy_OLD')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Clone of 05-DL-Load-Raw-to-Trusted",
				"activities": [
					{
						"name": "Log Failure DL Raw",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy-Blob-to-DataLake-Raw",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[CTL].[UpdateTaskLog]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": "Error Occurred during Blob Source Load",
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": null
								},
								"Status": {
									"value": "Failure",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {
								"kvSecret": "AzureSqlDatabase-ControlDB"
							}
						}
					},
					{
						"name": "Log Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy-Blob-to-DataLake-Raw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[CTL].[UpdateTaskLog]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.LastLoadedFile",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "Success",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {
								"kvSecret": "AzureSqlDatabase-ControlDB"
							}
						}
					},
					{
						"name": "Set-ClusterType",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ClusterType",
							"value": {
								"value": "@toLower(last(split(pipeline().parameters.TaskDetails.Processor,'|')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Source-Container",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceContainer",
							"value": {
								"value": "@toLower(first(split(pipeline().parameters.TaskDetails.SourceLocation,'/')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Source-Filename",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceFileName",
							"value": {
								"value": "@last(split(pipeline().parameters.TaskDetails.SourceLocation,'/'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Target-Directory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "TargetDirectory",
							"value": {
								"value": "@toLower(first(split(pipeline().parameters.TaskDetails.TargetLocation,'/')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Target-Filename",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "TargetFileName",
							"value": {
								"value": "@last(split(pipeline().parameters.TaskDetails.TargetLocation,'/'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Target-Container",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "TargetContainer",
							"value": "raw"
						}
					},
					{
						"name": "Copy-Blob-to-DataLake-Raw",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set-ClusterType",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Source-Container",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Source-Filename",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Target-Directory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Target-Filename",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Target-Container",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SRC_BLOB_JSON",
								"type": "DatasetReference",
								"parameters": {
									"BlobContainer": {
										"value": "@variables('SourceContainer')",
										"type": "Expression"
									},
									"BlobFileName": {
										"value": "@variables('SourceFileName')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLS_JSON",
								"type": "DatasetReference",
								"parameters": {
									"LakeContainer": {
										"value": "@variables('TargetContainer')",
										"type": "Expression"
									},
									"LakeDirectory": {
										"value": "@variables('TargetDirectory')",
										"type": "Expression"
									},
									"LakeFileName": {
										"value": "@variables('TargetFileName')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Execute-DP-Load-Raw-to-Delta-Table",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Log Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "04-DL-Load-Raw-to-Delta-Table",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"BatchLogID": {
									"value": "@pipeline().parameters.BatchLogId",
									"type": "Expression"
								},
								"TaskExecutionLogId": {
									"value": "@pipeline().parameters.TaskExecutionLogId",
									"type": "Expression"
								},
								"TaskDetails": {
									"value": "@pipeline().parameters.TaskDetails",
									"type": "Expression"
								},
								"TargetContainer": {
									"value": "@variables('TargetContainer')",
									"type": "Expression"
								},
								"TargetDirectory": {
									"value": "@variables('TargetDirectory')",
									"type": "Expression"
								},
								"TargetFileName": {
									"value": "@variables('TargetFileName')",
									"type": "Expression"
								},
								"ProjectRunID": {
									"value": "@pipeline().parameters.ProjectRunID",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"TaskDetails": {
						"type": "object"
					},
					"BatchLogId": {
						"type": "int"
					},
					"TaskExecutionLogId": {
						"type": "int"
					},
					"ProjectRunID": {
						"type": "string"
					}
				},
				"variables": {
					"ReturnValue": {
						"type": "String"
					},
					"ClusterType": {
						"type": "String"
					},
					"SourceContainer": {
						"type": "String"
					},
					"SourceFileName": {
						"type": "String"
					},
					"TargetDirectory": {
						"type": "String"
					},
					"TargetFileName": {
						"type": "String"
					},
					"TargetContainer": {
						"type": "String"
					}
				},
				"folder": {
					"name": "z_Archive"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-30T04:08:30Z"
			},
			"dependsOn": []
		}
	]
}
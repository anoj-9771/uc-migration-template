{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-swcnonprod01-daf-dev-01"
		},
		"LS-AzureKeyVault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://kv-daf-dev-01.vault.azure.net/"
		},
		"LS-AzureSqlDatabase_Ctrldb_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "@linkedService().kvSecret"
		},
		"LS_AzureBlobStorage_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "https://saswcnonprod01landingdev.blob.core.windows.net"
		},
		"LS_AzureBlobStorage_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "8351bb5c-749d-4ee4-b1c4-71a3971acbe9"
		},
		"LS_AzureBlobStorage_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "acff96db-8630-433b-bbb1-35a3813fa036"
		},
		"LS_AzureDatalake_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://sadafdev01.dfs.core.windows.net"
		},
		"LS_Oracle_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "@linkedService().kvSecret"
		},
		"DLY1300_properties_01-Main_parameters_TriggerName": {
			"type": "string",
			"defaultValue": "DLY1300"
		},
		"Emrvisaf_properties_01-Main_parameters_TriggerName": {
			"type": "string",
			"defaultValue": "Emrvisaf"
		},
		"pe-saswcnonprod01landingdev_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/e59a4313-66c3-4db6-842d-6154c5e08205/resourceGroups/rg-swcnonprod01-daf-dev-01/providers/Microsoft.Storage/storageAccounts/saswcnonprod01landingdev"
		},
		"pe-saswcnonprod01landingdev_properties_groupId": {
			"type": "string",
			"defaultValue": "blob"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/01-Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is the main pipeline.",
				"activities": [
					{
						"name": "Get Projects to Execute",
						"description": "",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[CTL].[getProjects]",
								"storedProcedureParameters": {
									"TriggerName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TriggerName",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabase_Ctrldb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Loop Projects",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Projects to Execute",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Projects to Execute').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Execute Projects",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "02-Execute-Project-Stages",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ProjectId": {
												"value": "@item().ProjectId",
												"type": "Expression"
											},
											"TriggerName": {
												"value": "@pipeline().parameters.TriggerName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"TriggerName": {
						"type": "string",
						"defaultValue": "OnDemand"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-18T07:33:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/pipelines/02-Execute-Project-Stages')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/02-Execute-Project-Stages')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Stages",
						"description": "",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[CTL].[GetExecutionStages]",
								"storedProcedureParameters": {
									"ProjectId": {
										"type": "Int64",
										"value": {
											"value": "@pipeline().parameters.ProjectId",
											"type": "Expression"
										}
									},
									"TriggerName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TriggerName",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabase_Ctrldb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Execute Stages",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Stages",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Stages').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Task Load Pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "03-Execute-Project-Tasks",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"StageId": {
												"value": "@item().ControlStageId",
												"type": "Expression"
											},
											"ProjectId": {
												"value": "@pipeline().parameters.ProjectId",
												"type": "Expression"
											},
											"ProjectRunID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"ProjectId": {
						"type": "int"
					},
					"TriggerName": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-21T01:45:17Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/pipelines/03-Execute-Project-Tasks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/03-Execute-Project-Tasks')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Load Tasks",
						"description": "",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[CTL].[getExecutionTasks]",
								"storedProcedureParameters": {
									"ProjectId": {
										"type": "Int64",
										"value": {
											"value": "@pipeline().parameters.ProjectId",
											"type": "Expression"
										}
									},
									"StageId": {
										"type": "Int64",
										"value": {
											"value": "@pipeline().parameters.StageId",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabase_Ctrldb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Execute Each Task",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Generate Batch Log",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Load Tasks').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Generate Task Log",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[CTL].[CreateTaskLog]",
											"storedProcedureParameters": {
												"BatchLogId": {
													"type": "Int64",
													"value": {
														"value": "@activity('Generate Batch Log').output.firstrow.BatchLogId",
														"type": "Expression"
													}
												},
												"TaskId": {
													"type": "Int64",
													"value": {
														"value": "@item().TaskId",
														"type": "Expression"
													}
												}
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "AzureSqlDatabase_Ctrldb",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Source-to-Raw-Blob      Stage1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Generate Task Log",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@and(equals(item().SourceType,'BLOB Storage (json)'), equals(item().ControlStageId,1))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "EP-Blob-to-Raw",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "04-Blob-Json-A-Source-Copy",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"TaskDetails": {
															"value": "@item()",
															"type": "Expression"
														},
														"BatchLogId": {
															"value": "@activity('Generate Batch Log').output.firstrow.BatchLogId",
															"type": "Expression"
														},
														"TaskExecutionLogId": {
															"value": "@activity('Generate Task Log').output.firstrow.TaskLogId",
															"type": "Expression"
														},
														"ProjectRunID": {
															"value": "@pipeline().parameters.ProjectRunID",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "Raw-to-Cleansed Stage2",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Generate Task Log",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().ControlStageId,2)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "EP-Raw-to-Cleansed",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "05-DL-Load-Raw-to-Cleansed",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"TaskDetails": {
															"value": "@item()",
															"type": "Expression"
														},
														"BatchLogId": {
															"value": "@activity('Generate Batch Log').output.firstrow.BatchLogId",
															"type": "Expression"
														},
														"TaskExecutionLogId": {
															"value": "@activity('Generate Task Log').output.firstrow.TaskLogId",
															"type": "Expression"
														},
														"ProjectRunID": {
															"value": "@pipeline().parameters.ProjectRunID",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "Cleansed-to-Curated Stage3",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Generate Task Log",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().ControlStageId,3)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "EP-Trusted-to-Curated",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "05-DL-Copy-Trusted-to-Curated",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"TaskDetails": {
															"value": "@item()",
															"type": "Expression"
														},
														"BatchLogId": {
															"value": "@activity('Generate Batch Log').output.firstrow.BatchLogId",
															"type": "Expression"
														},
														"TaskExecutionLogId": {
															"value": "@activity('Generate Task Log').output.firstrow.TaskLogId",
															"type": "Expression"
														},
														"ProjectRunID": {
															"value": "@pipeline().parameters.ProjectRunID",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Batch Log Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Execute Each Task",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CTL].[UpdateBatchLog]",
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@activity('Generate Batch Log').output.firstrow.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"Status": {
									"value": "Complete",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {
								"kvSecret": "sql-db-controldb-connectionstring"
							}
						}
					},
					{
						"name": "Batch Log Failure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Execute Each Task",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CTL].[UpdateBatchLog]",
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@activity('Generate Batch Log').output.firstrow.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": "Check Task Execution Log for errors",
									"type": "String"
								},
								"Status": {
									"value": "Failure",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {
								"kvSecret": "sql-db-controldb-connectionstring"
							}
						}
					},
					{
						"name": "Generate Batch Log",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Load Tasks",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[CTL].[CreateBatchLog]",
								"storedProcedureParameters": {
									"ProjectID": {
										"type": "Int64",
										"value": {
											"value": "@pipeline().parameters.ProjectId",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabase_Ctrldb",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"StageId": {
						"type": "int"
					},
					"ProjectId": {
						"type": "int"
					},
					"ProjectRunID": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-30T02:11:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/pipelines/04-Blob-Json-A-Source-Copy')]",
				"[concat(variables('factoryId'), '/pipelines/05-DL-Load-Raw-to-Cleansed')]",
				"[concat(variables('factoryId'), '/pipelines/05-DL-Copy-Trusted-to-Curated')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/04-Blob-Json-A-Source-Copy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Clone of 05-DL-Load-Raw-to-Trusted",
				"activities": [
					{
						"name": "Log Failure DL Raw",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy-Blob-to-DataLake-Raw",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[CTL].[UpdateTaskLog]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": "Error Occurred during Blob Source Load",
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": null
								},
								"Status": {
									"value": "Failure",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {
								"kvSecret": "sql-db-controldb-connectionstring"
							}
						}
					},
					{
						"name": "Log Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy-Blob-to-DataLake-Raw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[CTL].[UpdateTaskLog]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.LastLoadedFile",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "Success",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {
								"kvSecret": "sql-db-controldb-connectionstring"
							}
						}
					},
					{
						"name": "Set-Source-Container",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceContainer",
							"value": {
								"value": "@toLower(first(split(pipeline().parameters.TaskDetails.SourceLocation,'/')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Source-Filename",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceFileName",
							"value": {
								"value": "@last(split(pipeline().parameters.TaskDetails.SourceLocation,'/'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy-Blob-to-DataLake-Raw",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Manifest file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": {
										"value": "@concat(first(split(variables('SourceFileName'),'.')),'_*')",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SRC_BLOB_JSON",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RAW_ADLS_JSON_v2",
								"type": "DatasetReference",
								"parameters": {
									"BlobPath": {
										"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
										"type": "Expression"
									},
									"BlobName": {
										"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Get Full File Name",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[CTL].[GetStorageFileName]",
								"storedProcedureParameters": {
									"DeltaExtract": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.DeltaExtract",
											"type": "Expression"
										}
									},
									"FileName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.SourceLocation",
											"type": "Expression"
										}
									},
									"FolderName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.TargetLocation",
											"type": "Expression"
										}
									},
									"Grain": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.ObjectGrain",
											"type": "Expression"
										}
									},
									"Compressed": {
										"type": "Boolean",
										"value": {
											"value": "true",
											"type": "Expression"
										}
									},
									"TargetType": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.TargetType",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabase_Ctrldb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Copy Manifest File to Archive",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set-Source-Container",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Source-Filename",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get Full File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": {
										"value": "@concat(first(split(variables('SourceFileName'),'.')),'_MANIFEST_*')",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SRC_BLOB_JSON",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ARCHIVE_BLOB_JSON",
								"type": "DatasetReference",
								"parameters": {
									"BlobContainer": {
										"value": "@concat('archive/', activity('Get Full File Name').output.firstrow.StorageFolder)",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Delete Manifest file",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Manifest File to Archive",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SRC_BLOB_JSON",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "LS_AzureDatalake",
									"type": "LinkedServiceReference"
								},
								"path": "assurance"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"wildcardFileName": {
									"value": "@{concat(first(split(variables('SourceFileName'),'.')),'_MANIFEST_*')}",
									"type": "Expression"
								},
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "If File Was Copied",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Log Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Copy-Blob-to-DataLake-Raw').output.filesWritten, 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute-DP-Load-Raw-to-Delta-Table",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "04-DL-Load-Raw-to-Delta-Table",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"BatchLogID": {
												"value": "@pipeline().parameters.BatchLogId",
												"type": "Expression"
											},
											"TaskExecutionLogId": {
												"value": "@pipeline().parameters.TaskExecutionLogId",
												"type": "Expression"
											},
											"TaskDetails": {
												"value": "@pipeline().parameters.TaskDetails",
												"type": "Expression"
											},
											"TargetBLOBFolder": {
												"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
												"type": "Expression"
											},
											"TargetBLOBName": {
												"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
												"type": "Expression"
											},
											"ProjectRunID": {
												"value": "@pipeline().parameters.ProjectRunID",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Copy Blob File to ArchiveContainer",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Execute-DP-Load-Raw-to-Delta-Table",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFileName": {
													"value": "@concat(first(split(variables('SourceFileName'),'.')),'_*')",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "SRC_BLOB_JSON",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ARCHIVE_BLOB_JSON",
											"type": "DatasetReference",
											"parameters": {
												"BlobContainer": {
													"value": "@concat('archive/', activity('Get Full File Name').output.firstrow.StorageFolder)",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete File from LandingBlob",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy Blob File to ArchiveContainer",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "SRC_BLOB_JSON",
											"type": "DatasetReference",
											"parameters": {}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "LS_AzureDatalake",
												"type": "LinkedServiceReference"
											},
											"path": "assurance"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"wildcardFileName": {
												"value": "@{concat(first(split(variables('SourceFileName'),'.')),'_*')}",
												"type": "Expression"
											},
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"TaskDetails": {
						"type": "object"
					},
					"BatchLogId": {
						"type": "int"
					},
					"TaskExecutionLogId": {
						"type": "int"
					},
					"ProjectRunID": {
						"type": "string"
					},
					"TargetBLOBFolder": {
						"type": "string"
					},
					"TargetBLOBName": {
						"type": "string"
					}
				},
				"variables": {
					"SourceContainer": {
						"type": "String"
					},
					"SourceFileName": {
						"type": "String"
					},
					"OutputFileName": {
						"type": "String"
					},
					"DeltaSQL": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Blob"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-30T08:46:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/datasets/SRC_BLOB_JSON')]",
				"[concat(variables('factoryId'), '/datasets/RAW_ADLS_JSON_v2')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/datasets/ARCHIVE_BLOB_JSON')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]",
				"[concat(variables('factoryId'), '/pipelines/04-DL-Load-Raw-to-Delta-Table')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/04-DL-Load-Raw-to-Delta-Table')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set-ClusterType",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ClusterType",
							"value": {
								"value": "@toLower(last(split(pipeline().parameters.TaskDetails.Processor,'|')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If-ClusterType",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set-ClusterType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('ClusterType'), 'interactive')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Notebook-Delta-Table-Job",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": {
											"value": "@variables('NoteBookURL')",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureDatabricks_JobCluster",
										"type": "LinkedServiceReference",
										"parameters": {
											"kvSecret": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
												"type": "Expression"
											},
											"DataBricksClusterType": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[2]",
												"type": "Expression"
											},
											"DataBricksClusterVersion": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[3]",
												"type": "Expression"
											},
											"DataBricksWorkerNodes": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[4]",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Set-ReturnValue-Job",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Notebook-Delta-Table-Job",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "ReturnValue",
										"value": {
											"value": "@string(activity('Notebook-Delta-Table-Job').output.runOutput)",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Notebook-Delta-Table-Interactive",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": {
											"value": "@variables('NoteBookURL')",
											"type": "Expression"
										},
										"baseParameters": {
											"file_object": {
												"value": "@concat(pipeline().parameters.TargetBLOBFolder,pipeline().parameters.TargetBLOBName)",
												"type": "Expression"
											},
											"source_param": {
												"value": "@string(pipeline().parameters.TaskDetails)",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureDatabricks_DefinedCluster",
										"type": "LinkedServiceReference",
										"parameters": {
											"kvSecret": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
												"type": "Expression"
											},
											"clusterId": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[1]",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Set-ReturnValue-Interactive",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Notebook-Delta-Table-Interactive",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "ReturnValue",
										"value": {
											"value": "@string(activity('Notebook-Delta-Table-Interactive').output.runOutput)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "SP-Record-Manifest",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "If-ClusterType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CTL].[UpdateManifestDeltaRecords]",
							"storedProcedureParameters": {
								"BatchExecutionLogID": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"RecordsDeltaTable": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"TaskExecutionLogID": {
									"value": {
										"value": "@variables('ReturnValue')",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {
								"kvSecret": "ADF-LS-AzureSql-ControlDB"
							}
						}
					}
				],
				"parameters": {
					"BatchLogID": {
						"type": "int",
						"defaultValue": 1
					},
					"TaskExecutionLogId": {
						"type": "int",
						"defaultValue": 1
					},
					"TaskDetails": {
						"type": "object"
					},
					"TargetBLOBFolder": {
						"type": "string",
						"defaultValue": "raw"
					},
					"TargetBLOBName": {
						"type": "string",
						"defaultValue": "targetdirectory"
					},
					"ProjectRunID": {
						"type": "string"
					}
				},
				"variables": {
					"ReturnValue": {
						"type": "String"
					},
					"ClusterType": {
						"type": "String"
					},
					"NoteBookURL": {
						"type": "String",
						"defaultValue": "/build/raw/load-raw-deltatable"
					}
				},
				"folder": {
					"name": "Data Lake"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-30T03:14:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureDatabricks_JobCluster')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureDatabricks_DefinedCluster')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/04-LakeLanding-FlatFile-A-Source-Copy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Log Failure DL Raw",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy File to Raw Zone",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[CTL].[UpdateTaskLog]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": "Error Occurred during Blob Source Load",
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": null
								},
								"Status": {
									"value": "Failure",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {
								"kvSecret": "sql-db-controldb-connectionstring"
							}
						}
					},
					{
						"name": "Log Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy File to Raw Zone",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[CTL].[UpdateTaskLog]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.LastLoadedFile",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "Success",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {
								"kvSecret": "sql-db-controldb-connectionstring"
							}
						}
					},
					{
						"name": "Set-Source-Container",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceContainer",
							"value": {
								"value": "@toLower(first(split(pipeline().parameters.TaskDetails.SourceLocation,'/')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Source-Filename",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceFileName",
							"value": {
								"value": "@last(split(pipeline().parameters.TaskDetails.SourceLocation,'/'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Full File Name",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[CTL].[GetStorageFileName]",
								"storedProcedureParameters": {
									"DeltaExtract": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.DeltaExtract",
											"type": "Expression"
										}
									},
									"FileName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.SourceLocation",
											"type": "Expression"
										}
									},
									"FolderName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.TargetLocation",
											"type": "Expression"
										}
									},
									"Grain": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.ObjectGrain",
											"type": "Expression"
										}
									},
									"Compressed": {
										"type": "Boolean",
										"value": {
											"value": "true",
											"type": "Expression"
										}
									},
									"TargetType": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.TargetType",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabase_Ctrldb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Execute-DP-Load-Raw-to-Delta-Table",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Log Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "04-DL-Load-Raw-to-Delta-Table",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"BatchLogID": {
									"value": "@pipeline().parameters.BatchLogId",
									"type": "Expression"
								},
								"TaskExecutionLogId": {
									"value": "@pipeline().parameters.TaskExecutionLogId",
									"type": "Expression"
								},
								"TaskDetails": {
									"value": "@pipeline().parameters.TaskDetails",
									"type": "Expression"
								},
								"TargetBLOBFolder": {
									"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
									"type": "Expression"
								},
								"TargetBLOBName": {
									"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
									"type": "Expression"
								},
								"ProjectRunID": {
									"value": "@pipeline().parameters.ProjectRunID",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Copy File to Raw Zone",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set-Source-Container",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Source-Filename",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get Full File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SRC_RAW_LANDING_ADLS_CSV",
								"type": "DatasetReference",
								"parameters": {
									"BlobPath": {
										"value": "@variables('SourceContainer')",
										"type": "Expression"
									},
									"BlobName": {
										"value": "@variables('SourceFileName')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RAW_ADLS_JSON_v2",
								"type": "DatasetReference",
								"parameters": {
									"BlobPath": {
										"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
										"type": "Expression"
									},
									"BlobName": {
										"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Delete Manifest file",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy File to Archive",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SRC_RAW_LANDING_ADLS_CSV",
								"type": "DatasetReference",
								"parameters": {
									"BlobPath": {
										"value": "@variables('SourceContainer')",
										"type": "Expression"
									},
									"BlobName": {
										"value": "@variables('SourceFileName')",
										"type": "Expression"
									}
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "LS_AzureDatalake",
									"type": "LinkedServiceReference",
									"parameters": {}
								},
								"path": "assurance"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy File to Archive",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Execute-DP-Load-Raw-to-Delta-Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SRC_RAW_LANDING_ADLS_CSV",
								"type": "DatasetReference",
								"parameters": {
									"BlobPath": {
										"value": "@variables('SourceContainer')",
										"type": "Expression"
									},
									"BlobName": {
										"value": "@variables('SourceFileName')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "SRC_RAW_LANDING_ADLS_CSV",
								"type": "DatasetReference",
								"parameters": {
									"BlobPath": {
										"value": "@concat(variables('SourceContainer'),'archive/')",
										"type": "Expression"
									},
									"BlobName": {
										"value": "@variables('SourceFileName')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"parameters": {
					"TaskDetails": {
						"type": "object"
					},
					"BatchLogId": {
						"type": "int"
					},
					"TaskExecutionLogId": {
						"type": "int"
					},
					"ProjectRunID": {
						"type": "string"
					},
					"TargetBLOBFolder": {
						"type": "string"
					},
					"TargetBLOBName": {
						"type": "string"
					}
				},
				"variables": {
					"SourceContainer": {
						"type": "String"
					},
					"SourceFileName": {
						"type": "String"
					},
					"OutputFileName": {
						"type": "String"
					},
					"DeltaSQL": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Blob"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-30T08:46:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/pipelines/04-DL-Load-Raw-to-Delta-Table')]",
				"[concat(variables('factoryId'), '/datasets/SRC_RAW_LANDING_ADLS_CSV')]",
				"[concat(variables('factoryId'), '/datasets/RAW_ADLS_JSON_v2')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/04-Oracle-A-Source Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Check Delta Load",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Full File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.TaskDetails.DeltaExtract,true)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Log Success",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "EP-Oracle-Copy-Full",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[UpdateTaskLog]",
										"storedProcedureParameters": {
											"BatchLogId": {
												"value": {
													"value": "@pipeline().parameters.BatchLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"ErrorMessage": {
												"value": "",
												"type": "String"
											},
											"ExecutionLogId": {
												"value": {
													"value": "@pipeline().parameters.TaskExecutionLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Status": {
												"value": "Success",
												"type": "String"
											},
											"TaskId": {
												"value": {
													"value": "@pipeline().parameters.TaskDetails.TaskId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Output": {
												"value": {
													"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference",
										"parameters": {
											"kvSecret": "AzureSqlDatabase-ControlDB"
										}
									}
								},
								{
									"name": "Log Failure",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "EP-Oracle-Copy-Full",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[UpdateTaskLog]",
										"storedProcedureParameters": {
											"BatchLogId": {
												"value": {
													"value": "@pipeline().parameters.BatchLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"ErrorMessage": {
												"value": "Some error occured",
												"type": "String"
											},
											"ExecutionLogId": {
												"value": {
													"value": "@pipeline().parameters.TaskExecutionLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Status": {
												"value": "Failure",
												"type": "String"
											},
											"TaskId": {
												"value": {
													"value": "@pipeline().parameters.TaskDetails.TaskId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Output": {
												"value": null,
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference",
										"parameters": {
											"kvSecret": "AzureSqlDatabase-ControlDB"
										}
									}
								},
								{
									"name": "EP-Oracle-Copy-Full",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "04-Oracle-B-Source-Copy",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"BatchLogId": {
												"value": "@pipeline().parameters.BatchLogId",
												"type": "Expression"
											},
											"TaskDetails": {
												"value": "@pipeline().parameters.TaskDetails",
												"type": "Expression"
											},
											"TaskExecutionLogId": {
												"value": "@pipeline().parameters.TaskExecutionLogId",
												"type": "Expression"
											},
											"SourceSQL": {
												"value": "@pipeline().parameters.TaskDetails.Command",
												"type": "Expression"
											},
											"TargetBLOBFolder": {
												"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
												"type": "Expression"
											},
											"TargetBLOBName": {
												"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
												"type": "Expression"
											},
											"ValidationDetails": "{\n\t\"ReturnValue\": 0\n}",
											"ProjectRunID": {
												"value": "@pipeline().parameters.ProjectRunID",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Get Full File Name",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Execute-Generate-Schema",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[CTL].[GetStorageFileName]",
								"storedProcedureParameters": {
									"DeltaExtract": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.DeltaExtract",
											"type": "Expression"
										}
									},
									"FileName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.SourceLocation",
											"type": "Expression"
										}
									},
									"FolderName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.TargetLocation",
											"type": "Expression"
										}
									},
									"Grain": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.ObjectGrain",
											"type": "Expression"
										}
									},
									"Compressed": {
										"type": "Boolean",
										"value": {
											"value": "true",
											"type": "Expression"
										}
									},
									"TargetType": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.TargetType",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabase_Ctrldb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Execute-Generate-Schema",
						"description": "",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "04-Oracle-Generate-Source-Schema",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SourceObject": {
									"value": "@pipeline().parameters.TaskDetails.SourceLocation",
									"type": "Expression"
								},
								"Project": {
									"value": "@split(pipeline().parameters.TaskDetails.TargetLocation,'/')[0]",
									"type": "Expression"
								},
								"SourceServer": {
									"value": "@pipeline().parameters.TaskDetails.SourceServer",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Task Log Failure Schema",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Execute-Generate-Schema",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CTL].[UpdateTaskLog]",
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": {
										"value": "An Error Occurred while generating schema",
										"type": "Expression"
									},
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Status": {
									"value": "Failure",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {
								"kvSecret": "AzureSqlDatabase-ControlDB"
							}
						}
					},
					{
						"name": "Task Log Failure FileName",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Full File Name",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CTL].[UpdateTaskLog]",
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": {
										"value": "An Error Occurred while getting file name",
										"type": "Expression"
									},
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Status": {
									"value": "Failure",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {
								"kvSecret": "AzureSqlDatabase-ControlDB"
							}
						}
					}
				],
				"parameters": {
					"BatchLogId": {
						"type": "int"
					},
					"TaskDetails": {
						"type": "object"
					},
					"TaskExecutionLogId": {
						"type": "int"
					},
					"ProjectRunID": {
						"type": "string"
					}
				},
				"variables": {
					"OutputFileName": {
						"type": "String"
					},
					"DeltaSQL": {
						"type": "String"
					},
					"WatermarkValue": {
						"type": "String"
					}
				},
				"folder": {
					"name": "z_Archive/Oracle"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-21T11:09:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/pipelines/04-Oracle-Generate-Source-Schema')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/pipelines/04-Oracle-B-Source-Copy')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/04-Oracle-B-Source-Copy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup-SourceRecords",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SET-LU-SQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": {
									"value": "@variables('SQLQuery')",
									"type": "Expression"
								},
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "SRC_Oracle",
								"type": "DatasetReference",
								"parameters": {
									"kvSecret": "@pipeline().parameters.TaskDetails.SourceServer"
								}
							}
						}
					},
					{
						"name": "If-SourceRecordsExists-CopyFile",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup-SourceRecords",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(activity('Lookup-SourceRecords').output,'firstRow')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy-Source-DataLake",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SET-LU-SQL-Main",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "@variables('SQLQuery')",
												"type": "Expression"
											},
											"partitionOption": "None",
											"queryTimeout": "10:00:00"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "SRC_Oracle",
											"type": "DatasetReference",
											"parameters": {
												"kvSecret": "@pipeline().parameters.TaskDetails.SourceServer"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ADLS_CSV",
											"type": "DatasetReference",
											"parameters": {
												"LakeContainer": {
													"value": "@pipeline().parameters.TargetBLOBFolder",
													"type": "Expression"
												},
												"LakeDirectory": {
													"value": "@pipeline().parameters.TargetBLOBName",
													"type": "Expression"
												},
												"LakeFileName": "none"
											}
										}
									]
								},
								{
									"name": "SP-Record-Manifest",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "SET-Source-RecordCount",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[CreateManifestRecord]",
										"storedProcedureParameters": {
											"BatchExecutionLogID": {
												"value": {
													"value": "@pipeline().parameters.BatchLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Container": {
												"value": "raw",
												"type": "String"
											},
											"EndCounter": {
												"value": {
													"value": "@json(string(pipeline().parameters.ValidationDetails)).ReturnValue",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@pipeline().parameters.TargetBLOBName",
													"type": "Expression"
												},
												"type": "String"
											},
											"FolderName": {
												"value": {
													"value": "@pipeline().parameters.TargetBLOBFolder",
													"type": "Expression"
												},
												"type": "String"
											},
											"Records": {
												"value": {
													"value": "@variables('RecordCount')",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"SourceObject": {
												"value": {
													"value": "@pipeline().parameters.TaskDetails.SourceName",
													"type": "Expression"
												},
												"type": "String"
											},
											"StartCounter": {
												"value": {
													"value": "@pipeline().parameters.TaskDetails.Watermarks",
													"type": "Expression"
												},
												"type": "String"
											},
											"TaskExecutionLogID": {
												"value": {
													"value": "@pipeline().parameters.TaskExecutionLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"DeltaColumn": {
												"value": {
													"value": "@pipeline().parameters.TaskDetails.WatermarkColumn",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineRunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference",
										"parameters": {
											"kvSecret": "AzureSqlDatabase-ControlDB"
										}
									}
								},
								{
									"name": "SET-Source-RecordCount",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Copy-Source-DataLake",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "RecordCount",
										"value": {
											"value": "@string(activity('Copy-Source-DataLake').output.rowsCopied)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SET-LU-SQL-Main",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SQLQuery",
										"value": {
											"value": "@concat(pipeline().parameters.SourceSQL, ' ')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "SET-LU-SQL",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "If Condition Destination File Exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SQLQuery",
							"value": {
								"value": "@concat(pipeline().parameters.SourceSQL, ' fetch first 1 rows only')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Check If Destination File Exists",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_CSV",
								"type": "DatasetReference",
								"parameters": {
									"LakeContainer": {
										"value": "@pipeline().parameters.TargetBLOBFolder",
										"type": "Expression"
									},
									"LakeDirectory": {
										"value": "@pipeline().parameters.TargetBLOBName",
										"type": "Expression"
									},
									"LakeFileName": "none"
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "If Condition Destination File Exists",
						"description": "",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check If Destination File Exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Check If Destination File Exists').output,true)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete Destination File",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_ADLS_CSV",
											"type": "DatasetReference",
											"parameters": {
												"LakeContainer": {
													"value": "@pipeline().parameters.TargetBLOBFolder",
													"type": "Expression"
												},
												"LakeDirectory": {
													"value": "@pipeline().parameters.TargetBLOBName",
													"type": "Expression"
												},
												"LakeFileName": "none"
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"BatchLogId": {
						"type": "int"
					},
					"TaskDetails": {
						"type": "object"
					},
					"TaskExecutionLogId": {
						"type": "securestring"
					},
					"SourceSQL": {
						"type": "string"
					},
					"TargetBLOBFolder": {
						"type": "string"
					},
					"TargetBLOBName": {
						"type": "string"
					},
					"ValidationDetails": {
						"type": "object"
					},
					"ProjectRunID": {
						"type": "string"
					}
				},
				"variables": {
					"SQLQuery": {
						"type": "String"
					},
					"RecordCount": {
						"type": "String"
					}
				},
				"folder": {
					"name": "z_Archive/Oracle"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-24T00:21:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SRC_Oracle')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_CSV')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureSqlDatabase_Ctrldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/04-Oracle-Generate-Source-Schema')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Generate Schema",
						"description": "",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set-File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": {
									"value": "@replace(replace(variables('SQL'), '<<TABLE>>', variables('Table')), '<<OWNER>>', variables('Owner'))",
									"type": "Expression"
								},
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SRC_Oracle",
								"type": "DatasetReference",
								"parameters": {
									"kvSecret": {
										"value": "@pipeline().parameters.SourceServer",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RAW_ADLS_Schema",
								"type": "DatasetReference",
								"parameters": {
									"BlobPath": {
										"value": "@variables('Folder')",
										"type": "Expression"
									},
									"BlobName": {
										"value": "@variables('File')",
										"type": "Expression"
									},
									"Compression": "none",
									"ColumnDelim": ",",
									"HeaderRow": false
								}
							}
						]
					},
					{
						"name": "Set-Owner",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Owner",
							"value": {
								"value": "@split(pipeline().parameters.SourceObject,'.')[0]",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Table",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Table",
							"value": {
								"value": "@split(pipeline().parameters.SourceObject,'.')[1]",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Generate Schema Original",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Generate Schema",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": {
									"value": "@replace(replace(variables('SQL-Original'), '<<TABLE>>', variables('Table')), '<<OWNER>>', variables('Owner'))",
									"type": "Expression"
								},
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SRC_Oracle",
								"type": "DatasetReference",
								"parameters": {
									"kvSecret": {
										"value": "@pipeline().parameters.SourceServer",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RAW_ADLS_Schema",
								"type": "DatasetReference",
								"parameters": {
									"BlobPath": {
										"value": "@concat(variables('Folder'), '/original/')",
										"type": "Expression"
									},
									"BlobName": {
										"value": "@concat(variables('File'), '.csv')",
										"type": "Expression"
									},
									"Compression": "none",
									"ColumnDelim": ",",
									"HeaderRow": true
								}
							}
						]
					},
					{
						"name": "Set-Folder",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Folder",
							"value": {
								"value": "@toLower(concat(pipeline().parameters.Project, '//', 'schema'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-File",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set-Owner",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Table",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "File",
							"value": {
								"value": "@toLower(concat(variables('Owner'), '_', variables('Table'), '.', 'schema'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If-Empty-Delete",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Generate Schema Original",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Generate Schema').output.rowsCopied, 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete-Empty-File",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "BINARY_ADLS",
											"type": "DatasetReference",
											"parameters": {
												"File": {
													"value": "@variables('File')",
													"type": "Expression"
												},
												"Container": "raw",
												"Folder": {
													"value": "@variables('Folder')",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "LS_AzureDatalake",
												"type": "LinkedServiceReference"
											},
											"path": "log"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"SourceObject": {
						"type": "string",
						"defaultValue": "EBS_0165.USERS"
					},
					"Project": {
						"type": "string",
						"defaultValue": "OneEBS"
					},
					"SourceServer": {
						"type": "string",
						"defaultValue": "OneEBS-0165"
					}
				},
				"variables": {
					"Owner": {
						"type": "String"
					},
					"Table": {
						"type": "String"
					},
					"SQL": {
						"type": "String",
						"defaultValue": "SELECT column_name,         CASE           WHEN data_type = 'NUMBER' AND data_scale = 0 THEN 'double'           WHEN data_type = 'NUMBER' AND data_scale > 0 THEN 'double'           WHEN data_type = 'DATE' THEN 'timestamp'           ELSE 'string'         END                              AS fieldtype,         CASE           WHEN data_type = 'DATE' THEN 'DATETIME2'           ELSE data_type         END                              AS data_type,         Nvl(data_precision, data_length) PRECISION,         data_scale                       scale,         table_name                       table_name,         owner                            table_schema  FROM   all_tab_cols  WHERE  table_name = '<<TABLE>>'         AND owner = '<<OWNER>>'         AND hidden_column = 'NO'  \t   "
					},
					"SQL-Original": {
						"type": "String",
						"defaultValue": "SELECT * FROM all_tab_cols WHERE table_name = '<<TABLE>>' \tAND owner = '<<OWNER>>'"
					},
					"Folder": {
						"type": "String"
					},
					"File": {
						"type": "String"
					}
				},
				"folder": {
					"name": "z_Archive/Oracle"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-21T11:09:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SRC_Oracle')]",
				"[concat(variables('factoryId'), '/datasets/RAW_ADLS_Schema')]",
				"[concat(variables('factoryId'), '/datasets/BINARY_ADLS')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/05-DL-Copy-Raw-to-Trusted_OLD')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "04-Blob-A-Source-Copy",
				"activities": [
					{
						"name": "Log Failure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy-Raw-to-Trusted",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[CTL].[UpdateTaskLog]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": "Error Occurred during Copy to Trusted",
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": null
								},
								"Status": {
									"value": "Failure",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {
								"kvSecret": "AzureSqlDatabase-ControlDB"
							}
						}
					},
					{
						"name": "Log Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy-Raw-to-Trusted",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[CTL].[UpdateTaskLog]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.LastLoadedFile",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "Success",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {
								"kvSecret": "AzureSqlDatabase-ControlDB"
							}
						}
					},
					{
						"name": "Set-ClusterType",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ClusterType",
							"value": {
								"value": "@toLower(last(split(pipeline().parameters.TaskDetails.Processor,'|')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Source-Container",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceContainer",
							"value": "raw"
						}
					},
					{
						"name": "Set-Source-Filename",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceFileName",
							"value": {
								"value": "@last(split(pipeline().parameters.TaskDetails.SourceLocation,'/'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Target-Directory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "TargetDirectory",
							"value": {
								"value": "@toLower(first(split(pipeline().parameters.TaskDetails.TargetLocation,'/')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Target-Filename",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "TargetFileName",
							"value": {
								"value": "@last(split(pipeline().parameters.TaskDetails.TargetLocation,'/'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Target-Container",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "TargetContainer",
							"value": "trusted"
						}
					},
					{
						"name": "Copy-Raw-to-Trusted",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set-Source-Container",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Source-Filename",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Target-Directory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Target-Filename",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Target-Container",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-ClusterType",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Source-Directory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "RAW_ADLS_JSON",
								"type": "DatasetReference",
								"parameters": {
									"LakeContainer": {
										"value": "@variables('SourceContainer')",
										"type": "Expression"
									},
									"LakeDirectory": {
										"value": "@variables('SourceDirectory')",
										"type": "Expression"
									},
									"LakeFileName": {
										"value": "@variables('SourceFileName')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "TRUSTED_ADLS_JSONN",
								"type": "DatasetReference",
								"parameters": {
									"LakeContainer": {
										"value": "@variables('TargetContainer')",
										"type": "Expression"
									},
									"LakeDirectory": {
										"value": "@variables('TargetDirectory')",
										"type": "Expression"
									},
									"LakeFileName": {
										"value": "@variables('TargetFileName')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Set-Source-Directory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceDirectory",
							"value": {
								"value": "@toLower(first(split(pipeline().parameters.TaskDetails.SourceLocation,'/')))",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"TaskDetails": {
						"type": "object"
					},
					"BatchLogId": {
						"type": "int"
					},
					"TaskExecutionLogId": {
						"type": "int"
					},
					"ProjectRunID": {
						"type": "string"
					}
				},
				"variables": {
					"ReturnValue": {
						"type": "String"
					},
					"ClusterType": {
						"type": "String"
					},
					"SourceContainer": {
						"type": "String",
						"defaultValue": "raw"
					},
					"SourceDirectory": {
						"type": "String"
					},
					"SourceFileName": {
						"type": "String"
					},
					"TargetContainer": {
						"type": "String",
						"defaultValue": "trusted"
					},
					"TargetDirectory": {
						"type": "String"
					},
					"TargetFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "z_Archive"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-24T00:16:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/datasets/RAW_ADLS_JSON')]",
				"[concat(variables('factoryId'), '/datasets/TRUSTED_ADLS_JSONN')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/05-DL-Copy-Raw-to-Trustedddddd')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "04-Blob-A-Source-Copy",
				"activities": [
					{
						"name": "Log Failure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy-Raw-to-Trusted",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[CTL].[UpdateTaskLog]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": "Error Occurred during Copy to Trusted",
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": null
								},
								"Status": {
									"value": "Failure",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {
								"kvSecret": "AzureSqlDatabase-ControlDB"
							}
						}
					},
					{
						"name": "Log Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy-Raw-to-Trusted",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[CTL].[UpdateTaskLog]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.LastLoadedFile",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "Success",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {
								"kvSecret": "AzureSqlDatabase-ControlDB"
							}
						}
					},
					{
						"name": "Set-ClusterType",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ClusterType",
							"value": {
								"value": "@toLower(last(split(pipeline().parameters.TaskDetails.Processor,'|')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Source-Container",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceContainer",
							"value": "raw"
						}
					},
					{
						"name": "Set-Source-Filename",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceFileName",
							"value": {
								"value": "@last(split(pipeline().parameters.TaskDetails.SourceLocation,'/'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Target-Directory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "TargetDirectory",
							"value": {
								"value": "@toLower(first(split(pipeline().parameters.TaskDetails.TargetLocation,'/')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Target-Filename",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "TargetFileName",
							"value": {
								"value": "@last(split(pipeline().parameters.TaskDetails.TargetLocation,'/'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Target-Container",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "TargetContainer",
							"value": "trusted"
						}
					},
					{
						"name": "Copy-Raw-to-Trusted",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set-Source-Container",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Source-Filename",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Target-Directory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Target-Filename",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Target-Container",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-ClusterType",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Source-Directory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_ADLS_JSON",
								"type": "DatasetReference",
								"parameters": {
									"LakeContainer": {
										"value": "@variables('SourceContainer')",
										"type": "Expression"
									},
									"LakeDirectory": {
										"value": "@variables('SourceDirectory')",
										"type": "Expression"
									},
									"LakeFileName": {
										"value": "@variables('SourceFileName')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLS_JSON",
								"type": "DatasetReference",
								"parameters": {
									"LakeContainer": {
										"value": "@variables('TargetContainer')",
										"type": "Expression"
									},
									"LakeDirectory": {
										"value": "@variables('TargetDirectory')",
										"type": "Expression"
									},
									"LakeFileName": {
										"value": "@variables('TargetFileName')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Set-Source-Directory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceDirectory",
							"value": {
								"value": "@toLower(first(split(pipeline().parameters.TaskDetails.SourceLocation,'/')))",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"TaskDetails": {
						"type": "object"
					},
					"BatchLogId": {
						"type": "int"
					},
					"TaskExecutionLogId": {
						"type": "int"
					},
					"ProjectRunID": {
						"type": "string"
					}
				},
				"variables": {
					"ReturnValue": {
						"type": "String"
					},
					"ClusterType": {
						"type": "String"
					},
					"SourceContainer": {
						"type": "String",
						"defaultValue": "raw"
					},
					"SourceDirectory": {
						"type": "String"
					},
					"SourceFileName": {
						"type": "String"
					},
					"TargetContainer": {
						"type": "String",
						"defaultValue": "trusted"
					},
					"TargetDirectory": {
						"type": "String"
					},
					"TargetFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "z_Archive"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-24T00:16:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_JSON')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/05-DL-Copy-Trusted-to-Curated')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Clone of raw to trusted copy",
				"activities": [
					{
						"name": "Log Failure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy-Trusted-to-Curated",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[CTL].[UpdateTaskLog]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": "Error Occurred during Copy to Trusted",
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": null
								},
								"Status": {
									"value": "Failure",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {
								"kvSecret": "AzureSqlDatabase-ControlDB"
							}
						}
					},
					{
						"name": "Log Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy-Trusted-to-Curated",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[CTL].[UpdateTaskLog]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.LastLoadedFile",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "Success",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {
								"kvSecret": "AzureSqlDatabase-ControlDB"
							}
						}
					},
					{
						"name": "Set-ClusterType",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ClusterType",
							"value": {
								"value": "@toLower(last(split(pipeline().parameters.TaskDetails.Processor,'|')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Source-Container",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceContainer",
							"value": "trusted"
						}
					},
					{
						"name": "Set-Source-Filename",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceFileName",
							"value": {
								"value": "@last(split(pipeline().parameters.TaskDetails.SourceLocation,'/'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Target-Directory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "TargetDirectory",
							"value": {
								"value": "@toLower(first(split(pipeline().parameters.TaskDetails.TargetLocation,'/')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Target-Filename",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "TargetFileName",
							"value": {
								"value": "@last(split(pipeline().parameters.TaskDetails.TargetLocation,'/'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Target-Container",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "TargetContainer",
							"value": "curated"
						}
					},
					{
						"name": "Copy-Trusted-to-Curated",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set-Source-Container",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Source-Filename",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Target-Directory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Target-Filename",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Target-Container",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-ClusterType",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Source-Directory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_ADLS_JSON",
								"type": "DatasetReference",
								"parameters": {
									"LakeContainer": {
										"value": "@variables('SourceContainer')",
										"type": "Expression"
									},
									"LakeDirectory": {
										"value": "@variables('SourceDirectory')",
										"type": "Expression"
									},
									"LakeFileName": {
										"value": "@variables('SourceFileName')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLS_JSON",
								"type": "DatasetReference",
								"parameters": {
									"LakeContainer": {
										"value": "@variables('TargetContainer')",
										"type": "Expression"
									},
									"LakeDirectory": {
										"value": "@variables('TargetDirectory')",
										"type": "Expression"
									},
									"LakeFileName": {
										"value": "@variables('TargetFileName')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Set-Source-Directory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceDirectory",
							"value": {
								"value": "@toLower(first(split(pipeline().parameters.TaskDetails.SourceLocation,'/')))",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"TaskDetails": {
						"type": "object"
					},
					"BatchLogId": {
						"type": "int"
					},
					"TaskExecutionLogId": {
						"type": "int"
					},
					"ProjectRunID": {
						"type": "string"
					}
				},
				"variables": {
					"ReturnValue": {
						"type": "String"
					},
					"ClusterType": {
						"type": "String"
					},
					"SourceContainer": {
						"type": "String",
						"defaultValue": "raw"
					},
					"SourceDirectory": {
						"type": "String"
					},
					"SourceFileName": {
						"type": "String"
					},
					"TargetContainer": {
						"type": "String",
						"defaultValue": "trusted"
					},
					"TargetDirectory": {
						"type": "String"
					},
					"TargetFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "z_Archive"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-24T00:16:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_JSON')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/05-DL-Load-Raw-to-Cleansed')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Log Failure DL Trusted",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "If-ClusterType",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[CTL].[UpdateTaskLog]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": "Error Occurred during Trusted Zone load",
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": null
								},
								"Status": {
									"value": "Failure",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {
								"kvSecret": "AzureSqlDatabase-ControlDB"
							}
						}
					},
					{
						"name": "Log Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "If-ClusterType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[CTL].[UpdateTaskLog]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.LastLoadedFile",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "Success",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {
								"kvSecret": "AzureSqlDatabase-ControlDB"
							}
						}
					},
					{
						"name": "Set-ClusterType",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ClusterType",
							"value": {
								"value": "@toLower(last(split(pipeline().parameters.TaskDetails.Processor,'|')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If-ClusterType",
						"description": "",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set-ClusterType",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Source-Container",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Source-FileName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Target-Container",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Target-FileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('ClusterType'), 'interactive')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Load-To-Trusted-Zone-Job",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": {
											"value": "@pipeline().parameters.TaskDetails.Command",
											"type": "Expression"
										},
										"baseParameters": {
											"storage_account_key": {
												"value": "@pipeline().parameters.TaskDetails.SourceServer",
												"type": "Expression"
											},
											"srcDirectoryName": {
												"value": "@variables('SourceFolder')",
												"type": "Expression"
											},
											"dstDirectoryName": {
												"value": "@variables('TargetFolder')",
												"type": "Expression"
											},
											"srcBlobName": {
												"value": "@variables('SourceBlob')",
												"type": "Expression"
											},
											"dstBlobName": {
												"value": "@variables('TargetBlob')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureDatabricks_JobCluster",
										"type": "LinkedServiceReference",
										"parameters": {
											"kvSecret": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
												"type": "Expression"
											},
											"DataBricksClusterType": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[2]",
												"type": "Expression"
											},
											"DataBricksClusterVersion": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[3]",
												"type": "Expression"
											},
											"DataBricksWorkerNodes": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[4]",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Load-To-Cleansed-Zone-Interactive",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": {
											"value": "@pipeline().parameters.TaskDetails.Command",
											"type": "Expression"
										},
										"baseParameters": {
											"source_object": {
												"value": "@pipeline().parameters.TaskDetails.SourceName",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureDatabricks_DefinedCluster",
										"type": "LinkedServiceReference",
										"parameters": {
											"kvSecret": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
												"type": "Expression"
											},
											"clusterId": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[1]",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Set-Source-Container",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceContainer",
							"value": {
								"value": "@toLower(first(split(pipeline().parameters.TaskDetails.SourceLocation,'/')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Source-FileName",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceFileName",
							"value": {
								"value": "@toLower(last(split(pipeline().parameters.TaskDetails.TargetLocation,'/')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Target-Container",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "TargetContainer",
							"value": {
								"value": "@toLower(first(split(pipeline().parameters.TaskDetails.TargetLocation,'/')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Target-FileName",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "TargetFileName",
							"value": {
								"value": "@toLower(last(split(pipeline().parameters.TaskDetails.TargetLocation,'/')))",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"TaskDetails": {
						"type": "object"
					},
					"BatchLogId": {
						"type": "int"
					},
					"TaskExecutionLogId": {
						"type": "int"
					},
					"ProjectRunID": {
						"type": "string"
					}
				},
				"variables": {
					"ReturnValue": {
						"type": "String"
					},
					"ClusterType": {
						"type": "String"
					},
					"SourceContainer": {
						"type": "String",
						"defaultValue": "raw"
					},
					"SourceDirectory": {
						"type": "String"
					},
					"SourceFileName": {
						"type": "String"
					},
					"TargetContainer": {
						"type": "String",
						"defaultValue": "trusted"
					},
					"TargetDirectory": {
						"type": "String"
					},
					"TargetFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Data Lake"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-21T11:04:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureDatabricks_JobCluster')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureDatabricks_DefinedCluster')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/05-DL-Load-Trusted-to-Curated')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Log Failure DL Curated",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "If-ClusterType",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[CTL].[UpdateTaskLog]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": "Error Occurred during Curated Zone load",
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": null
								},
								"Status": {
									"value": "Failure",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {
								"kvSecret": "AzureSqlDatabase-ControlDB"
							}
						}
					},
					{
						"name": "Log Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "If-ClusterType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[CTL].[UpdateTaskLog]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.LastLoadedFile",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "Success",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {
								"kvSecret": "AzureSqlDatabase-ControlDB"
							}
						}
					},
					{
						"name": "Set-ClusterType",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ClusterType",
							"value": {
								"value": "@toLower(last(split(pipeline().parameters.TaskDetails.Processor,'|')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If-ClusterType",
						"description": "",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set-ClusterType",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Source-Container",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Source-FileName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Target-Container",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Target-FileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('ClusterType'), 'interactive')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Load-To-Curated-Zone-Job",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": {
											"value": "@pipeline().parameters.TaskDetails.Command",
											"type": "Expression"
										},
										"baseParameters": {
											"storage_account_key": {
												"value": "@pipeline().parameters.TaskDetails.SourceServer",
												"type": "Expression"
											},
											"srcDirectoryName": {
												"value": "@variables('SourceFolder')",
												"type": "Expression"
											},
											"dstDirectoryName": {
												"value": "@variables('TargetFolder')",
												"type": "Expression"
											},
											"srcBlobName": {
												"value": "@variables('SourceBlob')",
												"type": "Expression"
											},
											"dstBlobName": {
												"value": "@variables('TargetBlob')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureDatabricks_JobCluster",
										"type": "LinkedServiceReference",
										"parameters": {
											"kvSecret": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
												"type": "Expression"
											},
											"DataBricksClusterType": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[2]",
												"type": "Expression"
											},
											"DataBricksClusterVersion": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[3]",
												"type": "Expression"
											},
											"DataBricksWorkerNodes": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[4]",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Load-To-Curated-Zone-Interactive",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": {
											"value": "@pipeline().parameters.TaskDetails.Command",
											"type": "Expression"
										},
										"baseParameters": {
											"source_object": {
												"value": "@pipeline().parameters.TaskDetails.SourceName",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureDatabricks_DefinedCluster",
										"type": "LinkedServiceReference",
										"parameters": {
											"kvSecret": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
												"type": "Expression"
											},
											"clusterId": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[1]",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Set-Source-Container",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceContainer",
							"value": {
								"value": "@toLower(first(split(pipeline().parameters.TaskDetails.SourceLocation,'/')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Source-FileName",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceFileName",
							"value": {
								"value": "@toLower(last(split(pipeline().parameters.TaskDetails.TargetLocation,'/')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Target-Container",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "TargetContainer",
							"value": {
								"value": "@toLower(first(split(pipeline().parameters.TaskDetails.TargetLocation,'/')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Target-FileName",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "TargetFileName",
							"value": {
								"value": "@toLower(last(split(pipeline().parameters.TaskDetails.TargetLocation,'/')))",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"TaskDetails": {
						"type": "object"
					},
					"BatchLogId": {
						"type": "int"
					},
					"TaskExecutionLogId": {
						"type": "int"
					},
					"ProjectRunID": {
						"type": "string"
					}
				},
				"variables": {
					"ReturnValue": {
						"type": "String"
					},
					"ClusterType": {
						"type": "String"
					},
					"SourceContainer": {
						"type": "String",
						"defaultValue": "trusted"
					},
					"SourceDirectory": {
						"type": "String"
					},
					"SourceFileName": {
						"type": "String"
					},
					"TargetContainer": {
						"type": "String",
						"defaultValue": "curated"
					},
					"TargetDirectory": {
						"type": "String"
					},
					"TargetFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Data Lake"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-21T11:04:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureDatabricks_JobCluster')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureDatabricks_DefinedCluster')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/06-DL-Load-Trusted-to-Curated')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Log Failure DL Curated",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "If-ClusterType",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[CTL].[UpdateTaskLog]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": "Error Occurred during Trusted Zone load",
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": null
								},
								"Status": {
									"value": "Failure",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {
								"kvSecret": "AzureSqlDatabase-ControlDB"
							}
						}
					},
					{
						"name": "Log Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "If-ClusterType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[CTL].[UpdateTaskLog]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.LastLoadedFile",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "Success",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {
								"kvSecret": "AzureSqlDatabase-ControlDB"
							}
						}
					},
					{
						"name": "Set-ClusterType",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ClusterType",
							"value": {
								"value": "@toLower(last(split(pipeline().parameters.TaskDetails.Processor,'|')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If-ClusterType",
						"description": "",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set-ClusterType",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Source-Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Source-Filename",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Target-Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Target-Filename",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('ClusterType'), 'interactive')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Load-To-Curated-Zone-Job",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": {
											"value": "@pipeline().parameters.TaskDetails.Command",
											"type": "Expression"
										},
										"baseParameters": {
											"storage_account_key": {
												"value": "@pipeline().parameters.TaskDetails.SourceServer",
												"type": "Expression"
											},
											"srcDirectoryName": {
												"value": "@variables('SourceFolder')",
												"type": "Expression"
											},
											"dstDirectoryName": {
												"value": "@variables('TargetFolder')",
												"type": "Expression"
											},
											"srcBlobName": {
												"value": "@variables('SourceBlob')",
												"type": "Expression"
											},
											"dstBlobName": {
												"value": "@variables('TargetBlob')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureDatabricks_JobCluster",
										"type": "LinkedServiceReference",
										"parameters": {
											"kvSecret": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
												"type": "Expression"
											},
											"DataBricksClusterType": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[2]",
												"type": "Expression"
											},
											"DataBricksClusterVersion": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[3]",
												"type": "Expression"
											},
											"DataBricksWorkerNodes": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[4]",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Load-To-Curated-Zone-Interactive",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": {
											"value": "@pipeline().parameters.TaskDetails.Command",
											"type": "Expression"
										},
										"baseParameters": {
											"source_object": {
												"value": "@pipeline().parameters.TaskDetails.SourceName",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureDatabricks_DefinedCluster",
										"type": "LinkedServiceReference",
										"parameters": {
											"kvSecret": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
												"type": "Expression"
											},
											"clusterId": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[1]",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Set-Source-Folder",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceFolder",
							"value": {
								"value": "@toLower(first(split(pipeline().parameters.TaskDetails.SourceLocation,'/')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Source-Filename",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceBlob",
							"value": {
								"value": "@toLower(last(split(pipeline().parameters.TaskDetails.SourceLocation,'/')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Target-Folder",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "TargetFolder",
							"value": {
								"value": "@toLower(first(split(pipeline().parameters.TaskDetails.TargetLocation,'/')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Target-Filename",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "TargetBlob",
							"value": {
								"value": "@toLower(last(split(pipeline().parameters.TaskDetails.TargetLocation,'/')))",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"TaskDetails": {
						"type": "object"
					},
					"BatchLogId": {
						"type": "int"
					},
					"TaskExecutionLogId": {
						"type": "int"
					},
					"ProjectRunID": {
						"type": "string"
					}
				},
				"variables": {
					"ReturnValue": {
						"type": "String"
					},
					"ClusterType": {
						"type": "String"
					},
					"SourceFolder": {
						"type": "String"
					},
					"SourceBlob": {
						"type": "String"
					},
					"TargetFolder": {
						"type": "String"
					},
					"TargetBlob": {
						"type": "String"
					}
				},
				"folder": {
					"name": "z_Archive"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-21T11:06:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureDatabricks_JobCluster')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureDatabricks_DefinedCluster')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SRC_BLOB_JSON",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems",
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(activity('Get Metadata1').output.childItems,'0BPARTNER_ATTR_1.json')",
								"type": "Expression"
							}
						}
					}
				],
				"variables": {
					"abc": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Blob"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SRC_BLOB_JSON')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ARCHIVE_BLOB_JSON')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"BlobContainer": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Source - Blob"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().BlobContainer",
							"type": "Expression"
						},
						"container": "archive"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase_Ctrldb')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS-AzureSqlDatabase_Ctrldb",
					"type": "LinkedServiceReference",
					"parameters": {
						"kvSecret": "ADF-LS-AzureSql-ControlDB"
					}
				},
				"folder": {
					"name": "Control"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureSqlDatabase_Ctrldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BINARY_ADLS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureDatalake",
					"type": "LinkedServiceReference",
					"parameters": {}
				},
				"parameters": {
					"File": {
						"type": "string"
					},
					"Container": {
						"type": "string"
					},
					"Folder": {
						"type": "string"
					}
				},
				"folder": {
					"name": "z_Archive"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().File",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Folder",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_CSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureDatalake",
					"type": "LinkedServiceReference",
					"parameters": {}
				},
				"parameters": {
					"LakeContainer": {
						"type": "string",
						"defaultValue": "raw"
					},
					"LakeDirectory": {
						"type": "string"
					},
					"LakeFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Data Lake"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().LakeFileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().LakeDirectory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().LakeContainer",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_JSON')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureDatalake",
					"type": "LinkedServiceReference",
					"parameters": {}
				},
				"parameters": {
					"LakeContainer": {
						"type": "string"
					},
					"LakeDirectory": {
						"type": "string"
					},
					"LakeFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Data Lake"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().LakeFileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().LakeDirectory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().LakeContainer",
							"type": "Expression"
						}
					},
					"compression": {
						"type": "gzip",
						"level": "Optimal"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_SRC_CSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Dataset for access reference data",
				"linkedServiceName": {
					"referenceName": "LS_AzureDatalake",
					"type": "LinkedServiceReference",
					"parameters": {}
				},
				"parameters": {
					"LakeContainer": {
						"type": "string",
						"defaultValue": "raw"
					},
					"LakeDirectory": {
						"type": "string"
					},
					"LakeFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Data Lake"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().LakeFileName",
							"type": "Expression"
						},
						"folderPath": "access data/Z309_TPROPERTY",
						"fileSystem": "raw"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RAW_ADLS_JSON')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureDatalake",
					"type": "LinkedServiceReference",
					"parameters": {}
				},
				"parameters": {
					"LakeContainer": {
						"type": "string",
						"defaultValue": "raw"
					},
					"LakeDirectory": {
						"type": "string"
					},
					"LakeFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "z_Archive"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().LakeFileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().LakeDirectory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().LakeContainer",
							"type": "Expression"
						}
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"DI_SEQUENCE_NUMBER": {
							"type": "integer"
						},
						"DI_OPERATION_TYPE": {
							"type": "string"
						},
						"PARTNER": {
							"type": "string"
						},
						"TYPE": {
							"type": "string"
						},
						"BPKIND": {
							"type": "null"
						},
						"BU_GROUP": {
							"type": "string"
						},
						"BPEXT": {
							"type": "null"
						},
						"BU_SORT1": {
							"type": "string"
						},
						"BU_SORT2": {
							"type": "null"
						},
						"SOURCE": {
							"type": "null"
						},
						"TITLE": {
							"type": "string"
						},
						"XDELE": {
							"type": "null"
						},
						"XBLCK": {
							"type": "null"
						},
						"TITLE_LET": {
							"type": "null"
						},
						"CONTACT": {
							"type": "null"
						},
						"PRINT_MODE": {
							"type": "null"
						},
						"ZZUSER": {
							"type": "null"
						},
						"ZZPAS_INDICATOR": {
							"type": "null"
						},
						"ZZBA_INDICATOR": {
							"type": "null"
						},
						"ZZAFLD00001Z": {
							"type": "null"
						},
						"NAME_ORG1": {
							"type": "null"
						},
						"NAME_ORG2": {
							"type": "null"
						},
						"NAME_ORG3": {
							"type": "null"
						},
						"NAME_ORG4": {
							"type": "null"
						},
						"LEGAL_ENTY": {
							"type": "null"
						},
						"IND_SECTOR": {
							"type": "null"
						},
						"LEGAL_ORG": {
							"type": "null"
						},
						"FOUND_DAT": {
							"type": "null"
						},
						"LIQUID_DAT": {
							"type": "null"
						},
						"LOCATION_1": {
							"type": "integer"
						},
						"LOCATION_2": {
							"type": "integer"
						},
						"LOCATION_3": {
							"type": "integer"
						},
						"NAME_LAST": {
							"type": "string"
						},
						"NAME_FIRST": {
							"type": "string"
						},
						"NAME_LST2": {
							"type": "null"
						},
						"NAME_LAST2": {
							"type": "null"
						},
						"NAMEMIDDLE": {
							"type": "null"
						},
						"TITLE_ACA1": {
							"type": "null"
						},
						"TITLE_ACA2": {
							"type": "null"
						},
						"TITLE_ROYL": {
							"type": "null"
						},
						"PREFIX1": {
							"type": "null"
						},
						"PREFIX2": {
							"type": "null"
						},
						"NAME1_TEXT": {
							"type": "null"
						},
						"NICKNAME": {
							"type": "null"
						},
						"INITIALS": {
							"type": "null"
						},
						"NAMEFORMAT": {
							"type": "null"
						},
						"NAMCOUNTRY": {
							"type": "null"
						},
						"LANGU_CORR": {
							"type": "string"
						},
						"XSEXM": {
							"type": "null"
						},
						"XSEXF": {
							"type": "null"
						},
						"BIRTHPL": {
							"type": "null"
						},
						"MARST": {
							"type": "null"
						},
						"EMPLO": {
							"type": "null"
						},
						"JOBGR": {
							"type": "null"
						},
						"NATIO": {
							"type": "null"
						},
						"CNTAX": {
							"type": "null"
						},
						"CNDSC": {
							"type": "null"
						},
						"PERSNUMBER": {
							"type": "string"
						},
						"XSEXU": {
							"type": "string"
						},
						"XUBNAME": {
							"type": "null"
						},
						"BU_LANGU": {
							"type": "string"
						},
						"BIRTHDT": {
							"type": "null"
						},
						"DEATHDT": {
							"type": "null"
						},
						"PERNO": {
							"type": "integer"
						},
						"CHILDREN": {
							"type": "integer"
						},
						"MEM_HOUSE": {
							"type": "integer"
						},
						"PARTGRPTYP": {
							"type": "null"
						},
						"NAME_GRP1": {
							"type": "string"
						},
						"NAME_GRP2": {
							"type": "string"
						},
						"MC_NAME1": {
							"type": "string"
						},
						"MC_NAME2": {
							"type": "string"
						},
						"CRUSR": {
							"type": "string"
						},
						"CRDAT": {
							"type": "string"
						},
						"CRTIM": {
							"type": "string"
						},
						"CHUSR": {
							"type": "string"
						},
						"CHDAT": {
							"type": "string"
						},
						"CHTIM": {
							"type": "string"
						},
						"PARTNER_GUID": {
							"type": "string"
						},
						"ADDRCOMM": {
							"type": "string"
						},
						"TD_SWITCH": {
							"type": "string"
						},
						"VALID_FROM": {
							"type": "integer"
						},
						"VALID_TO": {
							"type": "integer"
						},
						"NATPERS": {
							"type": "string"
						},
						"ODQ_CHANGEMODE": {
							"type": "string"
						},
						"ODQ_ENTITYCNTR": {
							"type": "integer"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RAW_ADLS_JSON_v2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureDatalake",
					"type": "LinkedServiceReference",
					"parameters": {}
				},
				"parameters": {
					"BlobPath": {
						"type": "string"
					},
					"BlobName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Data Lake"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().BlobName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().BlobPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"compression": {
						"type": "gzip",
						"level": "Optimal"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RAW_ADLS_Schema')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureDatalake",
					"type": "LinkedServiceReference",
					"parameters": {}
				},
				"parameters": {
					"BlobPath": {
						"type": "string"
					},
					"BlobName": {
						"type": "string"
					},
					"Compression": {
						"type": "string"
					},
					"ColumnDelim": {
						"type": "string",
						"defaultValue": ","
					},
					"HeaderRow": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "z_Archive"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().BlobName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().BlobPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"columnDelimiter": {
						"value": "@dataset().ColumnDelim",
						"type": "Expression"
					},
					"compressionCodec": {
						"value": "@dataset().Compression",
						"type": "Expression"
					},
					"compressionLevel": "Optimal",
					"escapeChar": "\\",
					"firstRowAsHeader": {
						"value": "@dataset().HeaderRow",
						"type": "Expression"
					},
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RAW_PARQUET')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureDatalake",
					"type": "LinkedServiceReference",
					"parameters": {}
				},
				"parameters": {
					"BlobPath": {
						"type": "string"
					},
					"BlobName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "z_Archive"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().BlobName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().BlobPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SRC_BLOB_JSON')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Source - Blob"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "bods"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SRC_Oracle')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Oracle",
					"type": "LinkedServiceReference",
					"parameters": {
						"kvSecret": "OracleDB-PAS"
					}
				},
				"parameters": {
					"kvSecret": {
						"type": "string"
					}
				},
				"folder": {
					"name": "z_Archive"
				},
				"annotations": [],
				"type": "OracleTable",
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Oracle')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SRC_RAW_LANDING_ADLS_CSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureDatalake",
					"type": "LinkedServiceReference",
					"parameters": {}
				},
				"parameters": {
					"BlobPath": {
						"type": "string"
					},
					"BlobName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Data Lake"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().BlobName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().BlobPath",
							"type": "Expression"
						},
						"fileSystem": "raw/landing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TRUSTED_ADLS_JSONN')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureDatalake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"LakeContainer": {
						"type": "string",
						"defaultValue": "trusted"
					},
					"LakeDirectory": {
						"type": "string"
					},
					"LakeFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "z_Archive"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().LakeFileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().LakeDirectory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().LakeContainer",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS-AzureDatabricks_DefinedCluster')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"kvSecret": {
						"type": "string",
						"defaultValue": "databricks-token"
					},
					"clusterId": {
						"type": "string",
						"defaultValue": "0704-231544-bugs938"
					}
				},
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-6510910994889.9.azuredatabricks.net/",
					"accessToken": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS-AzureKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().kvSecret",
							"type": "Expression"
						},
						"secretVersion": ""
					},
					"existingClusterId": "@linkedService().clusterId"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS-AzureDatabricks_JobCluster')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"kvSecret": {
						"type": "String"
					},
					"DataBricksClusterType": {
						"type": "String"
					},
					"DataBricksClusterVersion": {
						"type": "String"
					},
					"DataBricksWorkerNodes": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://australiaeast.azuredatabricks.net",
					"accessToken": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS-AzureKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().kvSecret",
							"type": "Expression"
						},
						"secretVersion": "synapseadmin"
					},
					"newClusterNodeType": "@linkedService().DataBricksClusterType",
					"newClusterNumOfWorker": "@linkedService().DataBricksWorkerNodes",
					"newClusterSparkEnvVars": {
						"PYSPARK_PYTHON": "/databricks/python3/bin/python3"
					},
					"newClusterVersion": "@linkedService().DataBricksClusterVersion",
					"newClusterInitScripts": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS-AzureKeyVault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('LS-AzureKeyVault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS-AzureSqlDatabase_Ctrldb')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "ETL Control database linked service",
				"parameters": {
					"kvSecret": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS-AzureKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "[parameters('LS-AzureSqlDatabase_Ctrldb_properties_typeProperties_connectionString_secretName')]",
							"type": "Expression"
						}
					}
				},
				"connectVia": {
					"referenceName": "IntegrationRuntime-Azure-ManagedVnet-01",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IntegrationRuntime-Azure-ManagedVnet-01')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_AzureBlobStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('LS_AzureBlobStorage_properties_typeProperties_serviceEndpoint')]",
					"tenant": "[parameters('LS_AzureBlobStorage_properties_typeProperties_tenant')]",
					"servicePrincipalId": "[parameters('LS_AzureBlobStorage_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS-AzureKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "daf-serviceprincipal-app-secret"
					},
					"accountKind": "StorageV2"
				},
				"connectVia": {
					"referenceName": "IntegrationRuntime-Azure-ManagedVnet-01",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IntegrationRuntime-Azure-ManagedVnet-01')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_AzureDatalake')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LS_AzureDatalake_properties_typeProperties_url')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS-AzureKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "daf-sa-lake-key1"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_Oracle')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"kvSecret": {
						"type": "string",
						"defaultValue": "OracleDB-PAS"
					}
				},
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS-AzureKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "[parameters('LS_Oracle_properties_typeProperties_connectionString_secretName')]",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DLY1300')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "01-Main",
							"type": "PipelineReference"
						},
						"parameters": {
							"TriggerName": "[parameters('DLY1300_properties_01-Main_parameters_TriggerName')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-12-01T05:10:00",
						"timeZone": "AUS Eastern Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								13
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/01-Main')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Emrvisaf')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "01-Main",
							"type": "PipelineReference"
						},
						"parameters": {
							"TriggerName": "[parameters('Emrvisaf_properties_01-Main_parameters_TriggerName')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 20,
						"startTime": "2021-06-02T00:11:00",
						"timeZone": "AUS Eastern Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/01-Main')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IntegrationRuntime-Azure-ManagedVnet-01')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "Australia East",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks",
			"apiVersion": "2018-06-01",
			"properties": {},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/pe-saswcnonprod01landingdev')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('pe-saswcnonprod01landingdev_properties_privateLinkResourceId')]",
				"groupId": "[parameters('pe-saswcnonprod01landingdev_properties_groupId')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		}
	]
}
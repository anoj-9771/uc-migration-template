{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-swcnonprod01-daf-dev-01"
		},
		"LS-AzureDatabricks_DefinedCluster_properties_typeProperties_domain": {
			"type": "string",
			"defaultValue": "https://adb-7004525605760210.10.azuredatabricks.net/"
		},
		"LS-AzureDatabricks_JobCluster_properties_typeProperties_domain": {
			"type": "string",
			"defaultValue": "https://australiaeast.azuredatabricks.net"
		},
		"LS-AzureKeyVault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://kv-daf-dev-01.vault.azure.net/"
		},
		"LS-AzureSqlDatabase_Ctrldb_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "daf-sql-controldb-connectionstring"
		},
		"LS_AzureBlobStorage_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "https://sablobdafdev01.blob.core.windows.net"
		},
		"LS_AzureBlobStorage_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "8351bb5c-749d-4ee4-b1c4-71a3971acbe9"
		},
		"LS_AzureBlobStorage_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "acff96db-8630-433b-bbb1-35a3813fa036"
		},
		"LS_AzureDatabricks_InstancePool_properties_typeProperties_domain": {
			"type": "string",
			"defaultValue": "https://adb-7004525605760210.10.azuredatabricks.net"
		},
		"LS_AzureDatalake_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://sadafdev01.dfs.core.windows.net"
		},
		"LS_AzureDatalake_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "8351bb5c-749d-4ee4-b1c4-71a3971acbe9"
		},
		"LS_AzureDatalake_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "acff96db-8630-433b-bbb1-35a3813fa036"
		},
		"LS_AzureSqlDatabase_Sewercctv_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "daf-sql-sewercctv-connectionstring"
		},
		"LS_DeltaLake_properties_typeProperties_domain": {
			"type": "string",
			"defaultValue": "https://adb-7004525605760210.10.azuredatabricks.net"
		},
		"LS_HTTP_Anonymous_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().url}"
		},
		"LS_Oracle_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "@linkedService().kvSecret"
		},
		"LS_REST_Anonymous_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().url}"
		},
		"LS_SQLServer_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "@linkedService().kvSecret"
		},
		"azure_Sql_sewercctv_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "daf-sql-sewercctv-connectionstring"
		},
		"BATCH_DAILY_HYDRA_properties_01-Main_parameters_TriggerName": {
			"type": "string",
			"defaultValue": "BATCH_DAILY_HYDRA"
		},
		"BATCH_DAILY_HYDRA_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/e59a4313-66c3-4db6-842d-6154c5e08205/resourceGroups/rg-swcnonprod01-daf-dev-01/providers/Microsoft.Storage/storageAccounts/sadafdev01"
		},
		"BATCH_DAILY_SAPCRM_properties_01-Main_parameters_TriggerName": {
			"type": "string",
			"defaultValue": "BATCH_DAILY_SAPCRM"
		},
		"BATCH_DAILY_SAPCRM_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/e59a4313-66c3-4db6-842d-6154c5e08205/resourceGroups/rg-swcnonprod01-daf-dev-01/providers/Microsoft.Storage/storageAccounts/sadafdev01"
		},
		"BATCH_DAILY_SAPISU_properties_01-Main_parameters_TriggerName": {
			"type": "string",
			"defaultValue": "BATCH_DAILY_SAPISU"
		},
		"BATCH_DAILY_SAPISU_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/e59a4313-66c3-4db6-842d-6154c5e08205/resourceGroups/rg-swcnonprod01-daf-dev-01/providers/Microsoft.Storage/storageAccounts/sadafdev01"
		},
		"DLY1300_properties_01-Main_parameters_TriggerName": {
			"type": "string",
			"defaultValue": "DLY1300"
		},
		"mpe_sablob01_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/e59a4313-66c3-4db6-842d-6154c5e08205/resourceGroups/rg-swcnonprod01-daf-dev-01/providers/Microsoft.Storage/storageAccounts/sablobdafdev01"
		},
		"mpe_sablob01_properties_groupId": {
			"type": "string",
			"defaultValue": "blob"
		},
		"mpe_salake01_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/e59a4313-66c3-4db6-842d-6154c5e08205/resourceGroups/rg-swcnonprod01-daf-dev-01/providers/Microsoft.Storage/storageAccounts/sadafdev01"
		},
		"mpe_salake01_properties_groupId": {
			"type": "string",
			"defaultValue": "dfs"
		},
		"mpe_sqlserver_01_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/e59a4313-66c3-4db6-842d-6154c5e08205/resourceGroups/rg-swcnonprod01-daf-dev-01/providers/Microsoft.Sql/servers/sql-swcnonprod01-daf-dev-01"
		},
		"mpe_sqlserver_01_properties_groupId": {
			"type": "string",
			"defaultValue": "sqlServer"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/01-Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is the main pipeline.",
				"activities": [
					{
						"name": "Get Projects to Execute",
						"description": "",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.08:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[CTL].[getProjects]",
								"storedProcedureParameters": {
									"TriggerName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TriggerName",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabase_Ctrldb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Loop Projects",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Projects to Execute",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Projects to Execute').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Projects",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "02-Execute-Project-Stages",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ProjectId": {
												"value": "@item().ProjectId",
												"type": "Expression"
											},
											"TriggerName": {
												"value": "@pipeline().parameters.TriggerName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TriggerName": {
						"type": "string",
						"defaultValue": "OnDemand"
					}
				},
				"variables": {
					"ProjectName": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-18T07:33:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/pipelines/02-Execute-Project-Stages')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/02-Execute-Project-Stages')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Stages",
						"description": "",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[CTL].[GetExecutionStages]",
								"storedProcedureParameters": {
									"ProjectId": {
										"type": "Int64",
										"value": {
											"value": "@pipeline().parameters.ProjectId",
											"type": "Expression"
										}
									},
									"TriggerName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TriggerName",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabase_Ctrldb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Execute Stages",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Stages",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Stages').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Task Load Pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "03-Execute-Project-Tasks",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"StageId": {
												"value": "@item().ControlStageId",
												"type": "Expression"
											},
											"ProjectId": {
												"value": "@pipeline().parameters.ProjectId",
												"type": "Expression"
											},
											"ProjectRunID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ProjectId": {
						"type": "int"
					},
					"TriggerName": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-21T01:45:17Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/pipelines/03-Execute-Project-Tasks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/03-Execute-Project-Tasks')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Load Tasks",
						"description": "",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set RunDate",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set RunTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[CTL].[getExecutionTasks]",
								"storedProcedureParameters": {
									"ProjectId": {
										"type": "Int64",
										"value": {
											"value": "@pipeline().parameters.ProjectId",
											"type": "Expression"
										}
									},
									"StageId": {
										"type": "Int64",
										"value": {
											"value": "@pipeline().parameters.StageId",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabase_Ctrldb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Execute Each Task",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Generate Batch Log",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Load Tasks').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Generate Task Log",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[CTL].[CreateTaskLog]",
											"storedProcedureParameters": {
												"BatchLogId": {
													"type": "Int64",
													"value": {
														"value": "@activity('Generate Batch Log').output.firstrow.BatchLogId",
														"type": "Expression"
													}
												},
												"TaskId": {
													"type": "Int64",
													"value": {
														"value": "@item().TaskId",
														"type": "Expression"
													}
												}
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "AzureSqlDatabase_Ctrldb",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Source-to-Raw-Blob      Stage1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Generate Task Log",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@and(equals(item().SourceType,'BLOB Storage (json)'), equals(item().ControlStageId,1))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "EP-Blob-to-Raw",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "04-Blob-A-Source Load_JSON",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"TaskDetails": {
															"value": "@item()",
															"type": "Expression"
														},
														"BatchLogId": {
															"value": "@activity('Generate Batch Log').output.firstrow.BatchLogId",
															"type": "Expression"
														},
														"TaskExecutionLogId": {
															"value": "@activity('Generate Task Log').output.firstrow.TaskLogId",
															"type": "Expression"
														},
														"ProjectRunID": {
															"value": "@pipeline().parameters.ProjectRunID",
															"type": "Expression"
														},
														"RunDate": {
															"value": "@variables('RunDate')",
															"type": "Expression"
														},
														"RunTime": {
															"value": "@variables('RunTime')",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "Raw-to-Cleansed Stage2",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Generate Task Log",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().ControlStageId,2)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "EP-Raw-to-Cleansed",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "05-DL-Load-Raw-to-Cleansed",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"TaskDetails": {
															"value": "@item()",
															"type": "Expression"
														},
														"BatchLogId": {
															"value": "@activity('Generate Batch Log').output.firstrow.BatchLogId",
															"type": "Expression"
														},
														"TaskExecutionLogId": {
															"value": "@activity('Generate Task Log').output.firstrow.TaskLogId",
															"type": "Expression"
														},
														"ProjectRunID": {
															"value": "@pipeline().parameters.ProjectRunID",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "Cleansed-to-Curated Stage3",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Generate Task Log",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().ControlStageId,3)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "EP-Cleansed-to-Curated",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "05-DL-Load-Cleansed-to-Curated",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"TaskDetails": {
															"value": "@item()",
															"type": "Expression"
														},
														"BatchLogId": {
															"value": "@activity('Generate Batch Log').output.firstrow.BatchLogId",
															"type": "Expression"
														},
														"TaskExecutionLogId": {
															"value": "@activity('Generate Task Log').output.firstrow.TaskLogId",
															"type": "Expression"
														},
														"ProjectRunID": {
															"value": "@pipeline().parameters.ProjectRunID",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "Source-to-Raw-Blob _FlatFile_Copy",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Generate Task Log",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@and(equals(item().SourceType,'Flat File'), equals(item().ControlStageId,1))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "EP-Lake-to-Raw",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "04-LakeLanding-FlatFile-A-Source-Copy",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"TaskDetails": {
															"value": "@item()",
															"type": "Expression"
														},
														"BatchLogId": {
															"value": "@activity('Generate Batch Log').output.firstrow.BatchLogId",
															"type": "Expression"
														},
														"TaskExecutionLogId": {
															"value": "@activity('Generate Task Log').output.firstrow.TaskLogId",
															"type": "Expression"
														},
														"ProjectRunID": {
															"value": "@pipeline().parameters.ProjectRunID",
															"type": "Expression"
														},
														"RunDate": {
															"value": "@variables('RunDate')",
															"type": "Expression"
														},
														"RunTime": {
															"value": "@variables('RunTime')",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "Source-to-Raw-SQL Stage1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Generate Task Log",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@and(equals(item().SourceType,'SQL Server'), equals(item().ControlStageId,1))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "EP-SqlSource-to-Raw-Load",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "04-SQLServer-A-Source Load",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"BatchLogId": {
															"value": "@activity('Generate Batch Log').output.firstrow.BatchLogId",
															"type": "Expression"
														},
														"TaskDetails": {
															"value": "@item()",
															"type": "Expression"
														},
														"TaskExecutionLogId": {
															"value": "@activity('Generate Task Log').output.firstrow.TaskLogId",
															"type": "Expression"
														},
														"ProjectRunID": {
															"value": "@pipeline().parameters.ProjectRunID",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "SRC-RAW-Blob-CSV      Stage1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Generate Task Log",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@and(equals(item().SourceType,'BLOB Storage (csv)'), equals(item().ControlStageId,1))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "EP-SRC-RAW-BLOB-CSV",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "04-Blob-A-Source Load_CSV",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"TaskDetails": {
															"value": "@item()",
															"type": "Expression"
														},
														"BatchLogId": {
															"value": "@activity('Generate Batch Log').output.firstrow.BatchLogId",
															"type": "Expression"
														},
														"TaskExecutionLogId": {
															"value": "@activity('Generate Task Log').output.firstrow.TaskLogId",
															"type": "Expression"
														},
														"ProjectRunID": {
															"value": "@pipeline().parameters.ProjectRunID",
															"type": "Expression"
														},
														"RunDate": {
															"value": "@variables('RunDate')",
															"type": "Expression"
														},
														"RunTime": {
															"value": "@variables('RunTime')",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Batch Log Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Execute Each Task",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CTL].[UpdateBatchLog]",
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@activity('Generate Batch Log').output.firstrow.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"Status": {
									"value": "Complete",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Batch Log Failure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Execute Each Task",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CTL].[UpdateBatchLog]",
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@activity('Generate Batch Log').output.firstrow.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": "Check Task Execution Log for errors",
									"type": "String"
								},
								"Status": {
									"value": "Failure",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Generate Batch Log",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Load Tasks",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[CTL].[CreateBatchLog]",
								"storedProcedureParameters": {
									"ProjectID": {
										"type": "Int64",
										"value": {
											"value": "@pipeline().parameters.ProjectId",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabase_Ctrldb",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set RunDate",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunDate",
							"value": {
								"value": "@formatDateTime(convertFromUtc(utcnow(),'AUS Eastern Standard Time'),'yyyyMMdd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set RunTime",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunTime",
							"value": {
								"value": "@formatDateTime(convertFromUtc(utcnow(),'AUS Eastern Standard Time'),'yyyyMMdd_HH:mm:ss')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"StageId": {
						"type": "int"
					},
					"ProjectId": {
						"type": "int"
					},
					"ProjectRunID": {
						"type": "string"
					}
				},
				"variables": {
					"RunDate": {
						"type": "String"
					},
					"RunTime": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-30T02:11:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/pipelines/04-Blob-A-Source Load_JSON')]",
				"[concat(variables('factoryId'), '/pipelines/05-DL-Load-Raw-to-Cleansed')]",
				"[concat(variables('factoryId'), '/pipelines/05-DL-Load-Cleansed-to-Curated')]",
				"[concat(variables('factoryId'), '/pipelines/04-LakeLanding-FlatFile-A-Source-Copy')]",
				"[concat(variables('factoryId'), '/pipelines/04-SQLServer-A-Source Load')]",
				"[concat(variables('factoryId'), '/pipelines/04-Blob-A-Source Load_CSV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/04-Blob-A-Pre-Process_JSON')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set-ClusterType",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ClusterType",
							"value": {
								"value": "@toLower(last(split(pipeline().parameters.TaskDetails.Processor,'|')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Switch-ClusterType",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "Set-ClusterType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@variables('ClusterType')",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "interactive",
									"activities": [
										{
											"name": "Notebook-preprocess-bods-json Interactive",
											"type": "DatabricksNotebook",
											"dependsOn": [],
											"policy": {
												"timeout": "0.02:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"notebookPath": {
													"value": "@variables('NoteBookURL')",
													"type": "Expression"
												},
												"baseParameters": {
													"file_object": {
														"value": "@pipeline().parameters.SourceFileName",
														"type": "Expression"
													},
													"source_param": {
														"value": "@string(pipeline().parameters.TaskDetails)",
														"type": "Expression"
													},
													"source_container": {
														"value": "@pipeline().parameters.SourceContainer",
														"type": "Expression"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "LS-AzureDatabricks_DefinedCluster",
												"type": "LinkedServiceReference",
												"parameters": {
													"kvSecret": {
														"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
														"type": "Expression"
													},
													"clusterId": {
														"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[1]",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "job-cluster",
									"activities": [
										{
											"name": "Notebook-preprocess-bods-json JobCluster",
											"type": "DatabricksNotebook",
											"dependsOn": [],
											"policy": {
												"timeout": "0.02:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"notebookPath": {
													"value": "@variables('NoteBookURL')",
													"type": "Expression"
												},
												"baseParameters": {
													"file_object": {
														"value": "@pipeline().parameters.SourceFileName",
														"type": "Expression"
													},
													"source_param": {
														"value": "@string(pipeline().parameters.TaskDetails)",
														"type": "Expression"
													},
													"source_container": {
														"value": "@pipeline().parameters.SourceContainer",
														"type": "Expression"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "LS-AzureDatabricks_JobCluster",
												"type": "LinkedServiceReference",
												"parameters": {
													"kvSecret": {
														"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
														"type": "Expression"
													},
													"DataBricksClusterType": {
														"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[2]",
														"type": "Expression"
													},
													"DataBricksClusterVersion": {
														"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[3]",
														"type": "Expression"
													},
													"DataBricksWorkerNodes": {
														"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[4]",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "instance-pool",
									"activities": [
										{
											"name": "Notebook-preprocess-bods-json InstancePool",
											"type": "DatabricksNotebook",
											"dependsOn": [],
											"policy": {
												"timeout": "0.02:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"notebookPath": {
													"value": "@variables('NoteBookURL')",
													"type": "Expression"
												},
												"baseParameters": {
													"file_object": {
														"value": "@pipeline().parameters.SourceFileName",
														"type": "Expression"
													},
													"source_param": {
														"value": "@string(pipeline().parameters.TaskDetails)",
														"type": "Expression"
													},
													"source_container": {
														"value": "@pipeline().parameters.SourceContainer",
														"type": "Expression"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "LS_AzureDatabricks_InstancePool",
												"type": "LinkedServiceReference",
												"parameters": {
													"kvSecret": "databricks-token"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"BatchLogID": {
						"type": "int",
						"defaultValue": 1
					},
					"TaskExecutionLogId": {
						"type": "int",
						"defaultValue": 1
					},
					"TaskDetails": {
						"type": "object"
					},
					"SourceContainer": {
						"type": "string",
						"defaultValue": "test"
					},
					"ProjectRunID": {
						"type": "string"
					},
					"SourceFileName": {
						"type": "string",
						"defaultValue": "0UC_DEVICEH_ATTR_20211025142337.json"
					}
				},
				"variables": {
					"TargetTableRecordCount": {
						"type": "String"
					},
					"ClusterType": {
						"type": "String",
						"defaultValue": "interactive"
					},
					"NoteBookURL": {
						"type": "String",
						"defaultValue": "/build/raw/preprocess-bods-json"
					},
					"DataFileRecordCount": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Pre-Process"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-30T03:14:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureDatabricks_DefinedCluster')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureDatabricks_JobCluster')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatabricks_InstancePool')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/04-Blob-A-Pre-Process_NC_File')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set-ClusterType",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ClusterType",
							"value": {
								"value": "@toLower(last(split(pipeline().parameters.TaskDetails.Processor,'|')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If-ClusterType",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set-ClusterType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('ClusterType'), 'interactive')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Notebook-preprocess-iot-bom-nc",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "0.02:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": {
											"value": "@variables('NoteBookURL')",
											"type": "Expression"
										},
										"baseParameters": {
											"file_object": {
												"value": "@pipeline().parameters.SourceFileName",
												"type": "Expression"
											},
											"source_param": {
												"value": "@string(pipeline().parameters.TaskDetails)",
												"type": "Expression"
											},
											"source_container": {
												"value": "@pipeline().parameters.SourceContainer",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureDatabricks_JobCluster",
										"type": "LinkedServiceReference",
										"parameters": {
											"kvSecret": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
												"type": "Expression"
											},
											"DataBricksClusterType": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[2]",
												"type": "Expression"
											},
											"DataBricksClusterVersion": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[3]",
												"type": "Expression"
											},
											"DataBricksWorkerNodes": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[4]",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Notebook-preprocess-iot-bom-nc Interactive",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "0.02:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": {
											"value": "@variables('NoteBookURL')",
											"type": "Expression"
										},
										"baseParameters": {
											"file_object": {
												"value": "@pipeline().parameters.SourceFileName",
												"type": "Expression"
											},
											"source_param": {
												"value": "@string(pipeline().parameters.TaskDetails)",
												"type": "Expression"
											},
											"source_container": {
												"value": "@pipeline().parameters.SourceContainer",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureDatabricks_DefinedCluster",
										"type": "LinkedServiceReference",
										"parameters": {
											"kvSecret": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
												"type": "Expression"
											},
											"clusterId": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[1]",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Copy Blob File to ArchiveContainer",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "If-ClusterType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SRC_BLOB_BINARY",
								"type": "DatasetReference",
								"parameters": {
									"BlobContainer": {
										"value": "@pipeline().parameters.SourceContainer",
										"type": "Expression"
									},
									"BlobName": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ARCHIVE_BLOB_BINARY",
								"type": "DatasetReference",
								"parameters": {
									"BlobContainer": {
										"value": "@concat(pipeline().parameters.ProjectName,'/',pipeline().parameters.RunDate,'/',pipeline().parameters.RunTime)",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Delete File from LandingBlob",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Blob File to ArchiveContainer",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SRC_BLOB_BINARY",
								"type": "DatasetReference",
								"parameters": {
									"BlobContainer": {
										"value": "@pipeline().parameters.SourceContainer",
										"type": "Expression"
									},
									"BlobName": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									}
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "LS_AzureDatalake",
									"type": "LinkedServiceReference"
								},
								"path": "assurance"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"BatchLogID": {
						"type": "int",
						"defaultValue": 1
					},
					"TaskExecutionLogId": {
						"type": "int",
						"defaultValue": 1
					},
					"TaskDetails": {
						"type": "object"
					},
					"SourceContainer": {
						"type": "string",
						"defaultValue": "test"
					},
					"ProjectRunID": {
						"type": "string"
					},
					"SourceFileName": {
						"type": "string",
						"defaultValue": "0UC_DEVICEH_ATTR_20211025142337.json"
					},
					"ProjectName": {
						"type": "string"
					},
					"RunDate": {
						"type": "string"
					},
					"RunTime": {
						"type": "string"
					}
				},
				"variables": {
					"TargetTableRecordCount": {
						"type": "String"
					},
					"ClusterType": {
						"type": "String",
						"defaultValue": "interactive"
					},
					"NoteBookURL": {
						"type": "String",
						"defaultValue": "/build/raw/preprocess-iot-bom-nc"
					},
					"DataFileRecordCount": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Pre-Process"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-30T03:14:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SRC_BLOB_BINARY')]",
				"[concat(variables('factoryId'), '/datasets/ARCHIVE_BLOB_BINARY')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureDatabricks_JobCluster')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureDatabricks_DefinedCluster')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/04-Blob-A-Source Load_CSV')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Clone of 05-DL-Load-Raw-to-Trusted",
				"activities": [
					{
						"name": "Get Metadata",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set-Source-Container",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Source-Filename",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set ProjectName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SRC_BLOB_CSV",
								"type": "DatasetReference",
								"parameters": {
									"BlobContainer": {
										"value": "@variables('SourceContainer')",
										"type": "Expression"
									},
									"BlobName": "@concat('*',variables('SourceFileName'),'*.nc')"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Loop-All-Files",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SET-FileName to Child Item",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileName",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Handle Manifest Files",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "Set Manifest File or Not",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@variables('Manifest')",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "DataFile",
												"activities": [
													{
														"name": "Copy-Blob-to-DataLake-Raw",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "Execute-DP-Blob-A-Pre-Process_NC_File",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true,
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings"
																}
															},
															"sink": {
																"type": "DelimitedTextSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "DelimitedTextWriteSettings",
																	"quoteAllText": true,
																	"fileExtension": ".txt"
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "SRC_BLOB_CSV",
																"type": "DatasetReference",
																"parameters": {
																	"BlobContainer": {
																		"value": "@variables('SourceContainer')",
																		"type": "Expression"
																	},
																	"BlobName": {
																		"value": "@concat(variables('FileName'),'.csv')",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "RAW_ADLS_CSV",
																"type": "DatasetReference",
																"parameters": {
																	"BlobPath": "@activity('Get Full File Name').output.firstrow.StorageFolder",
																	"BlobName": "@activity('Get Full File Name').output.firstrow.StorageFile"
																}
															}
														]
													},
													{
														"name": "Execute-DP-Load-Raw-to-Delta-Table",
														"type": "ExecutePipeline",
														"dependsOn": [
															{
																"activity": "SP-Upsert-Manifest-Record-Data",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "04-DL-Load-Raw-to-Delta-Table",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"BatchLogID": {
																	"value": "@pipeline().parameters.BatchLogId",
																	"type": "Expression"
																},
																"TaskExecutionLogId": {
																	"value": "@pipeline().parameters.TaskExecutionLogId",
																	"type": "Expression"
																},
																"TaskDetails": {
																	"value": "@pipeline().parameters.TaskDetails",
																	"type": "Expression"
																},
																"TargetBLOBFolder": {
																	"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
																	"type": "Expression"
																},
																"TargetBLOBName": {
																	"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
																	"type": "Expression"
																},
																"ProjectRunID": {
																	"value": "@pipeline().parameters.ProjectRunID",
																	"type": "Expression"
																},
																"SourceFileName": {
																	"value": "@concat(variables('FileName'),'.csv')",
																	"type": "Expression"
																},
																"SourceFileDateTimeStamp": {
																	"value": "@variables('FileDateTimeStamp')",
																	"type": "Expression"
																}
															}
														}
													},
													{
														"name": "Copy Blob File to ArchiveContainer",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "Execute-DP-Load-Raw-to-Delta-Table",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true,
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings"
																}
															},
															"sink": {
																"type": "DelimitedTextSink",
																"storeSettings": {
																	"type": "AzureBlobStorageWriteSettings"
																},
																"formatSettings": {
																	"type": "DelimitedTextWriteSettings",
																	"quoteAllText": true,
																	"fileExtension": ".txt"
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "SRC_BLOB_CSV",
																"type": "DatasetReference",
																"parameters": {
																	"BlobContainer": {
																		"value": "@variables('SourceContainer')",
																		"type": "Expression"
																	},
																	"BlobName": {
																		"value": "@concat(variables('FileName'),'.csv')",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "ARCHIVE_BLOB_CSV",
																"type": "DatasetReference",
																"parameters": {
																	"BlobContainer": {
																		"value": "@concat(variables('ProjectName'),'/',pipeline().parameters.RunDate,'/',pipeline().parameters.RunTime)",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Delete File from LandingBlob",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Copy Blob File to ArchiveContainer",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "SRC_BLOB_CSV",
																"type": "DatasetReference",
																"parameters": {
																	"BlobContainer": {
																		"value": "@variables('SourceContainer')",
																		"type": "Expression"
																	},
																	"BlobName": {
																		"value": "@concat(variables('FileName'),'.csv')",
																		"type": "Expression"
																	}
																}
															},
															"logStorageSettings": {
																"linkedServiceName": {
																	"referenceName": "LS_AzureDatalake",
																	"type": "LinkedServiceReference"
																},
																"path": "assurance"
															},
															"enableLogging": true,
															"storeSettings": {
																"type": "AzureBlobStorageReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "SP-Upsert-Manifest-Record-Data",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "Copy-Blob-to-DataLake-Raw",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[CTL].[UpsertManifestRecord]",
															"storedProcedureParameters": {
																"BatchExecutionLogID": {
																	"value": {
																		"value": "@pipeline().parameters.BatchLogId",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"Container": {
																	"value": "raw",
																	"type": "String"
																},
																"DeltaColumn": {
																	"value": null,
																	"type": "String"
																},
																"EndCounter": {
																	"value": "0",
																	"type": "String"
																},
																"FileName": {
																	"value": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"FolderName": {
																	"value": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"PipelineRunID": {
																	"value": {
																		"value": "@pipeline().RunId",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"Records": {
																	"value": "1",
																	"type": "Int64"
																},
																"RecordsDeltaTable": {
																	"value": null,
																	"type": "Int64"
																},
																"SourceObject": {
																	"value": {
																		"value": "@pipeline().parameters.TaskDetails.SourceName",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"StartCounter": {
																	"value": "0",
																	"type": "String"
																},
																"TaskExecutionLogID": {
																	"value": {
																		"value": "@pipeline().parameters.TaskExecutionLogId",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"SourceFileName": {
																	"value": {
																		"value": "@variables('FileName')",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"IsManifest": {
																	"value": "false",
																	"type": "Boolean"
																},
																"SourceFileDateStamp": {
																	"value": {
																		"value": "@variables('FileDateTimeStamp')",
																		"type": "Expression"
																	},
																	"type": "String"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "LS-AzureSqlDatabase_Ctrldb",
															"type": "LinkedServiceReference",
															"parameters": {}
														}
													},
													{
														"name": "Execute-DP-Blob-A-Pre-Process_NC_File",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "04-Blob-A-Pre-Process_NC_File",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"BatchLogID": {
																	"value": "@pipeline().parameters.BatchLogId",
																	"type": "Expression"
																},
																"TaskExecutionLogId": {
																	"value": "@pipeline().parameters.TaskExecutionLogId",
																	"type": "Expression"
																},
																"TaskDetails": {
																	"value": "@pipeline().parameters.TaskDetails",
																	"type": "Expression"
																},
																"SourceContainer": {
																	"value": "@variables('SourceContainer')",
																	"type": "Expression"
																},
																"ProjectRunID": {
																	"value": "@pipeline().parameters.ProjectRunID",
																	"type": "Expression"
																},
																"SourceFileName": {
																	"value": "@variables('FileName')",
																	"type": "Expression"
																},
																"ProjectName": {
																	"value": "@variables('ProjectName')",
																	"type": "Expression"
																},
																"RunDate": {
																	"value": "@pipeline().parameters.RunDate",
																	"type": "Expression"
																},
																"RunTime": {
																	"value": "@pipeline().parameters.RunTime",
																	"type": "Expression"
																}
															}
														}
													}
												]
											},
											{
												"value": "ManifestFile",
												"activities": [
													{
														"name": "Copy Manifest to Raw Zone",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "JsonSource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true,
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "JsonReadSettings"
																}
															},
															"sink": {
																"type": "JsonSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "JsonWriteSettings"
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "SRC_BLOB_JSON_copy1",
																"type": "DatasetReference",
																"parameters": {
																	"BlobName": {
																		"value": "@variables('FileName')",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "RAW_ADLS_JSON_v2",
																"type": "DatasetReference",
																"parameters": {
																	"BlobPath": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
																		"type": "Expression"
																	},
																	"BlobName": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Archive Manifest File",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "SP-Update-Manifest-Value",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "JsonSource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true,
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "JsonReadSettings"
																}
															},
															"sink": {
																"type": "JsonSink",
																"storeSettings": {
																	"type": "AzureBlobStorageWriteSettings"
																},
																"formatSettings": {
																	"type": "JsonWriteSettings"
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "SRC_BLOB_JSON_copy1",
																"type": "DatasetReference",
																"parameters": {
																	"BlobName": {
																		"value": "@variables('FileName')",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "ARCHIVE_BLOB_JSON",
																"type": "DatasetReference",
																"parameters": {
																	"BlobContainer": {
																		"value": "@concat(variables('ProjectName'),'/',pipeline().parameters.RunDate,'/',pipeline().parameters.RunTime)",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Delete File From Landing",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Archive Manifest File",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "SRC_BLOB_JSON_copy1",
																"type": "DatasetReference",
																"parameters": {
																	"BlobName": {
																		"value": "@variables('FileName')",
																		"type": "Expression"
																	}
																}
															},
															"logStorageSettings": {
																"linkedServiceName": {
																	"referenceName": "LS_AzureDatalake",
																	"type": "LinkedServiceReference"
																},
																"path": "assurance"
															},
															"enableLogging": true,
															"storeSettings": {
																"type": "AzureBlobStorageReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "SP-Upsert-Manifest-Record",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "Copy Manifest to Raw Zone",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[CTL].[UpsertManifestRecord]",
															"storedProcedureParameters": {
																"BatchExecutionLogID": {
																	"value": {
																		"value": "@pipeline().parameters.BatchLogId",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"Container": {
																	"value": "raw",
																	"type": "String"
																},
																"DeltaColumn": {
																	"value": null,
																	"type": "String"
																},
																"EndCounter": {
																	"value": "0",
																	"type": "String"
																},
																"FileName": {
																	"value": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"FolderName": {
																	"value": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"PipelineRunID": {
																	"value": {
																		"value": "@pipeline().RunId",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"Records": {
																	"value": "1",
																	"type": "Int64"
																},
																"RecordsDeltaTable": {
																	"value": null,
																	"type": "Int64"
																},
																"SourceFileName": {
																	"value": {
																		"value": "@variables('FileName')",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"SourceObject": {
																	"value": {
																		"value": "@pipeline().parameters.TaskDetails.SourceName",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"StartCounter": {
																	"value": "0",
																	"type": "String"
																},
																"TaskExecutionLogID": {
																	"value": {
																		"value": "@pipeline().parameters.TaskExecutionLogId",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"IsManifest": {
																	"value": "true",
																	"type": "Boolean"
																},
																"SourceFileDateStamp": {
																	"value": {
																		"value": "@variables('FileDateTimeStamp')",
																		"type": "Expression"
																	},
																	"type": "String"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "LS-AzureSqlDatabase_Ctrldb",
															"type": "LinkedServiceReference",
															"parameters": {}
														}
													},
													{
														"name": "Notebook-Read-Manifest-Value",
														"type": "DatabricksNotebook",
														"dependsOn": [
															{
																"activity": "SP-Upsert-Manifest-Record",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"notebookPath": {
																"value": "@variables('NoteBookURL')",
																"type": "Expression"
															},
															"baseParameters": {
																"file_object": {
																	"value": "@concat(activity('Get Full File Name').output.firstrow.StorageFolder,activity('Get Full File Name').output.firstrow.StorageFile)",
																	"type": "Expression"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "LS-AzureDatabricks_DefinedCluster",
															"type": "LinkedServiceReference",
															"parameters": {
																"kvSecret": {
																	"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
																	"type": "Expression"
																},
																"clusterId": {
																	"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[1]",
																	"type": "Expression"
																}
															}
														}
													},
													{
														"name": "SP-Update-Manifest-Value",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "Notebook-Read-Manifest-Value",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[CTL].[UpdateManifestValue]",
															"storedProcedureParameters": {
																"BatchExecutionLogID": {
																	"value": {
																		"value": "@pipeline().parameters.BatchLogId",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"M_DeltaRecordCount": {
																	"value": {
																		"value": "@string(activity('Notebook-Read-Manifest-Value').output.runOutput.DELTA_RECORD_COUNT)",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"SourceFileDateStamp": {
																	"value": {
																		"value": "@variables('FileDateTimeStamp')",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"TaskExecutionLogID": {
																	"value": {
																		"value": "@pipeline().parameters.TaskExecutionLogId",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"M_TotalNoRows": {
																	"value": {
																		"value": "@string(activity('Notebook-Read-Manifest-Value').output.runOutput.TOTAL_NO_OF_ROWS)",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"M_Message": {
																	"value": {
																		"value": "@string(activity('Notebook-Read-Manifest-Value').output.runOutput.message)",
																		"type": "Expression"
																	},
																	"type": "String"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "LS-AzureSqlDatabase_Ctrldb",
															"type": "LinkedServiceReference",
															"parameters": {}
														}
													}
												]
											}
										]
									}
								},
								{
									"name": "Set Manifest File or Not",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set FileDateTimeStamp",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "Manifest",
										"value": {
											"value": "@if(contains(variables('FileName'),'MANIFEST'),'ManifestFile','DataFile')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Get Full File Name",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[CTL].[GetStorageFileName]",
											"storedProcedureParameters": {
												"DeltaExtract": {
													"type": "Boolean",
													"value": {
														"value": "@pipeline().parameters.TaskDetails.DeltaExtract",
														"type": "Expression"
													}
												},
												"FileName": {
													"type": "String",
													"value": {
														"value": "@concat(pipeline().parameters.TaskDetails.SourceLocation, if(contains(variables('FileName'),'MANIFEST'),'_MANIFEST',''))",
														"type": "Expression"
													}
												},
												"FolderName": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.TaskDetails.TargetLocation",
														"type": "Expression"
													}
												},
												"Grain": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.TaskDetails.ObjectGrain",
														"type": "Expression"
													}
												},
												"Compressed": {
													"type": "Boolean",
													"value": {
														"value": "true",
														"type": "Expression"
													}
												},
												"TargetType": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.TaskDetails.TargetType",
														"type": "Expression"
													}
												}
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "AzureSqlDatabase_Ctrldb",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "Set FileDateTimeStamp",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get Full File Name",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "SET-FileName to Child Item",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileDateTimeStamp",
										"value": {
											"value": "@replace(last(split(variables('FileName'),'_')),'.json','')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Set-Source-Container",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceContainer",
							"value": {
								"value": "@toLower(first(split(pipeline().parameters.TaskDetails.SourceGroup,'/')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Source-Filename",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceFileName",
							"value": {
								"value": "@last(split(pipeline().parameters.TaskDetails.SourceLocation,'/'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Log Failure DL Raw",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Loop-All-Files",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[CTL].[UpdateTaskLog]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": {
										"value": "@concat(pipeline().parameters.TaskDetails.SourceLocation, ' failed to load to raw zone')",
										"type": "Expression"
									},
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": null
								},
								"Status": {
									"value": "Failure",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {}
						}
					},
					{
						"name": "Log Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Loop-All-Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[CTL].[UpdateTaskLog]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.LastLoadedFile",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "Success",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {}
						}
					},
					{
						"name": "Set ProjectName",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ProjectName",
							"value": {
								"value": "@pipeline().parameters.TaskDetails.SourceGroup",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TaskDetails": {
						"type": "object"
					},
					"BatchLogId": {
						"type": "int"
					},
					"TaskExecutionLogId": {
						"type": "int"
					},
					"ProjectRunID": {
						"type": "string"
					},
					"TargetBLOBFolder": {
						"type": "string"
					},
					"TargetBLOBName": {
						"type": "string"
					},
					"StartCounter": {
						"type": "string"
					},
					"EndCounter": {
						"type": "string"
					},
					"ValidationDetails": {
						"type": "string"
					},
					"RunDate": {
						"type": "string"
					},
					"RunTime": {
						"type": "string"
					}
				},
				"variables": {
					"SourceContainer": {
						"type": "String"
					},
					"SourceFileName": {
						"type": "String"
					},
					"OutputFileName": {
						"type": "String"
					},
					"DeltaSQL": {
						"type": "String"
					},
					"FileName": {
						"type": "String"
					},
					"DateStamp": {
						"type": "String"
					},
					"Manifest": {
						"type": "String"
					},
					"ProjectName": {
						"type": "String"
					},
					"FileDateTimeStamp": {
						"type": "String"
					},
					"NoteBookURL": {
						"type": "String",
						"defaultValue": "/build/raw/read-manifest-value"
					}
				},
				"folder": {
					"name": "Blob"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-30T08:46:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SRC_BLOB_CSV')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/datasets/RAW_ADLS_CSV')]",
				"[concat(variables('factoryId'), '/pipelines/04-DL-Load-Raw-to-Delta-Table')]",
				"[concat(variables('factoryId'), '/datasets/ARCHIVE_BLOB_CSV')]",
				"[concat(variables('factoryId'), '/pipelines/04-Blob-A-Pre-Process_NC_File')]",
				"[concat(variables('factoryId'), '/datasets/SRC_BLOB_JSON_copy1')]",
				"[concat(variables('factoryId'), '/datasets/RAW_ADLS_JSON_v2')]",
				"[concat(variables('factoryId'), '/datasets/ARCHIVE_BLOB_JSON')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureDatabricks_DefinedCluster')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/04-Blob-A-Source Load_JSON')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Clone of 05-DL-Load-Raw-to-Trusted",
				"activities": [
					{
						"name": "Get Metadata",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set-Source-Container",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Source-Filename",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set ProjectName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SRC_BLOB_JSON_v2",
								"type": "DatasetReference",
								"parameters": {
									"BlobContainer": "@variables('SourceContainer')",
									"BlobName": "@concat(variables('SourceFileName'),'_*')"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "Loop-All-Files",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SET-FileName to Child Item",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileName",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Handle Manifest Files",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "Set Manifest File or Not",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@variables('Manifest')",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "DataFile",
												"activities": [
													{
														"name": "Copy-Blob-to-DataLake-Raw",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "JsonSource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true,
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "JsonReadSettings"
																}
															},
															"sink": {
																"type": "JsonSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "JsonWriteSettings"
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "SRC_BLOB_JSON_v2",
																"type": "DatasetReference",
																"parameters": {
																	"BlobContainer": {
																		"value": "@variables('SourceContainer')",
																		"type": "Expression"
																	},
																	"BlobName": {
																		"value": "@variables('FileName')",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "RAW_ADLS_JSON_v2",
																"type": "DatasetReference",
																"parameters": {
																	"BlobPath": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
																		"type": "Expression"
																	},
																	"BlobName": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Execute-DP-Load-Raw-to-Delta-Table",
														"type": "ExecutePipeline",
														"dependsOn": [
															{
																"activity": "SP-Upsert-Manifest-Record-Data",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "04-DL-Load-Raw-to-Delta-Table",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"BatchLogID": {
																	"value": "@pipeline().parameters.BatchLogId",
																	"type": "Expression"
																},
																"TaskExecutionLogId": {
																	"value": "@pipeline().parameters.TaskExecutionLogId",
																	"type": "Expression"
																},
																"TaskDetails": {
																	"value": "@pipeline().parameters.TaskDetails",
																	"type": "Expression"
																},
																"TargetBLOBFolder": {
																	"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
																	"type": "Expression"
																},
																"TargetBLOBName": {
																	"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
																	"type": "Expression"
																},
																"ProjectRunID": {
																	"value": "@pipeline().parameters.ProjectRunID",
																	"type": "Expression"
																},
																"SourceFileName": {
																	"value": "@variables('FileName')",
																	"type": "Expression"
																},
																"SourceFileDateTimeStamp": {
																	"value": "@variables('FileDateTimeStamp')",
																	"type": "Expression"
																}
															}
														}
													},
													{
														"name": "Copy Blob File to ArchiveContainer",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "Execute-DP-Load-Raw-to-Delta-Table",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "JsonSource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true,
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "JsonReadSettings"
																}
															},
															"sink": {
																"type": "JsonSink",
																"storeSettings": {
																	"type": "AzureBlobStorageWriteSettings"
																},
																"formatSettings": {
																	"type": "JsonWriteSettings"
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "SRC_BLOB_JSON_v2",
																"type": "DatasetReference",
																"parameters": {
																	"BlobContainer": {
																		"value": "@variables('SourceContainer')",
																		"type": "Expression"
																	},
																	"BlobName": {
																		"value": "@variables('FileName')",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "ARCHIVE_BLOB_JSON",
																"type": "DatasetReference",
																"parameters": {
																	"BlobContainer": {
																		"value": "@concat(variables('ProjectName'),'/',pipeline().parameters.RunDate,'/',pipeline().parameters.RunTime)",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Delete File from LandingBlob",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Copy Blob File to ArchiveContainer",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "SRC_BLOB_JSON_v2",
																"type": "DatasetReference",
																"parameters": {
																	"BlobContainer": {
																		"value": "@variables('SourceContainer')",
																		"type": "Expression"
																	},
																	"BlobName": {
																		"value": "@variables('FileName')",
																		"type": "Expression"
																	}
																}
															},
															"logStorageSettings": {
																"linkedServiceName": {
																	"referenceName": "LS_AzureDatalake",
																	"type": "LinkedServiceReference"
																},
																"path": "assurance"
															},
															"enableLogging": true,
															"storeSettings": {
																"type": "AzureBlobStorageReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "SP-Upsert-Manifest-Record-Data",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "Copy-Blob-to-DataLake-Raw",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[CTL].[UpsertManifestRecord]",
															"storedProcedureParameters": {
																"BatchExecutionLogID": {
																	"value": {
																		"value": "@pipeline().parameters.BatchLogId",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"Container": {
																	"value": "raw",
																	"type": "String"
																},
																"DeltaColumn": {
																	"value": null,
																	"type": "String"
																},
																"EndCounter": {
																	"value": "0",
																	"type": "String"
																},
																"FileName": {
																	"value": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"FolderName": {
																	"value": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"PipelineRunID": {
																	"value": {
																		"value": "@pipeline().RunId",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"Records": {
																	"value": "1",
																	"type": "Int64"
																},
																"RecordsDeltaTable": {
																	"value": null,
																	"type": "Int64"
																},
																"SourceObject": {
																	"value": {
																		"value": "@pipeline().parameters.TaskDetails.SourceName",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"StartCounter": {
																	"value": "0",
																	"type": "String"
																},
																"TaskExecutionLogID": {
																	"value": {
																		"value": "@pipeline().parameters.TaskExecutionLogId",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"SourceFileName": {
																	"value": {
																		"value": "@variables('FileName')",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"IsManifest": {
																	"value": "false",
																	"type": "Boolean"
																},
																"SourceFileDateStamp": {
																	"value": {
																		"value": "@variables('FileDateTimeStamp')",
																		"type": "Expression"
																	},
																	"type": "String"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "LS-AzureSqlDatabase_Ctrldb",
															"type": "LinkedServiceReference"
														}
													}
												]
											},
											{
												"value": "ManifestFile",
												"activities": [
													{
														"name": "Copy Manifest to Raw Zone",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "JsonSource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true,
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "JsonReadSettings"
																}
															},
															"sink": {
																"type": "JsonSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "JsonWriteSettings"
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "SRC_BLOB_JSON_v2",
																"type": "DatasetReference",
																"parameters": {
																	"BlobContainer": "@variables('SourceContainer')",
																	"BlobName": "@variables('FileName')"
																}
															}
														],
														"outputs": [
															{
																"referenceName": "RAW_ADLS_JSON_v2",
																"type": "DatasetReference",
																"parameters": {
																	"BlobPath": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
																		"type": "Expression"
																	},
																	"BlobName": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Archive Manifest File",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "SP-Update-Manifest-Value",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "JsonSource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true,
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "JsonReadSettings"
																}
															},
															"sink": {
																"type": "JsonSink",
																"storeSettings": {
																	"type": "AzureBlobStorageWriteSettings"
																},
																"formatSettings": {
																	"type": "JsonWriteSettings"
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "SRC_BLOB_JSON_v2",
																"type": "DatasetReference",
																"parameters": {
																	"BlobContainer": "@variables('SourceContainer')",
																	"BlobName": "@variables('FileName')"
																}
															}
														],
														"outputs": [
															{
																"referenceName": "ARCHIVE_BLOB_JSON",
																"type": "DatasetReference",
																"parameters": {
																	"BlobContainer": {
																		"value": "@concat(variables('ProjectName'),'/',pipeline().parameters.RunDate,'/',pipeline().parameters.RunTime)",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Delete File From Landing",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Archive Manifest File",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "SRC_BLOB_JSON_v2",
																"type": "DatasetReference",
																"parameters": {
																	"BlobContainer": "@variables('SourceContainer')",
																	"BlobName": "@variables('FileName')"
																}
															},
															"logStorageSettings": {
																"linkedServiceName": {
																	"referenceName": "LS_AzureDatalake",
																	"type": "LinkedServiceReference"
																},
																"path": "assurance"
															},
															"enableLogging": true,
															"storeSettings": {
																"type": "AzureBlobStorageReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "SP-Upsert-Manifest-Record",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "Copy Manifest to Raw Zone",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[CTL].[UpsertManifestRecord]",
															"storedProcedureParameters": {
																"BatchExecutionLogID": {
																	"value": {
																		"value": "@pipeline().parameters.BatchLogId",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"Container": {
																	"value": "raw",
																	"type": "String"
																},
																"DeltaColumn": {
																	"value": null,
																	"type": "String"
																},
																"EndCounter": {
																	"value": "0",
																	"type": "String"
																},
																"FileName": {
																	"value": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"FolderName": {
																	"value": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"PipelineRunID": {
																	"value": {
																		"value": "@pipeline().RunId",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"Records": {
																	"value": "1",
																	"type": "Int64"
																},
																"RecordsDeltaTable": {
																	"value": null,
																	"type": "Int64"
																},
																"SourceFileName": {
																	"value": {
																		"value": "@variables('FileName')",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"SourceObject": {
																	"value": {
																		"value": "@pipeline().parameters.TaskDetails.SourceName",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"StartCounter": {
																	"value": "0",
																	"type": "String"
																},
																"TaskExecutionLogID": {
																	"value": {
																		"value": "@pipeline().parameters.TaskExecutionLogId",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"IsManifest": {
																	"value": "true",
																	"type": "Boolean"
																},
																"SourceFileDateStamp": {
																	"value": {
																		"value": "@variables('FileDateTimeStamp')",
																		"type": "Expression"
																	},
																	"type": "String"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "LS-AzureSqlDatabase_Ctrldb",
															"type": "LinkedServiceReference"
														}
													},
													{
														"name": "Notebook-Read-Manifest-Value",
														"type": "DatabricksNotebook",
														"dependsOn": [
															{
																"activity": "SP-Upsert-Manifest-Record",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"notebookPath": {
																"value": "@variables('NoteBookURL')",
																"type": "Expression"
															},
															"baseParameters": {
																"file_object": {
																	"value": "@concat(activity('Get Full File Name').output.firstrow.StorageFolder,activity('Get Full File Name').output.firstrow.StorageFile)",
																	"type": "Expression"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "LS-AzureDatabricks_DefinedCluster",
															"type": "LinkedServiceReference",
															"parameters": {
																"kvSecret": {
																	"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
																	"type": "Expression"
																},
																"clusterId": {
																	"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[1]",
																	"type": "Expression"
																}
															}
														}
													},
													{
														"name": "SP-Update-Manifest-Value",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "Notebook-Read-Manifest-Value",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[CTL].[UpdateManifestValue]",
															"storedProcedureParameters": {
																"BatchExecutionLogID": {
																	"value": {
																		"value": "@pipeline().parameters.BatchLogId",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"M_DeltaRecordCount": {
																	"value": {
																		"value": "@string(activity('Notebook-Read-Manifest-Value').output.runOutput.DELTA_RECORD_COUNT)",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"SourceFileDateStamp": {
																	"value": {
																		"value": "@variables('FileDateTimeStamp')",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"TaskExecutionLogID": {
																	"value": {
																		"value": "@pipeline().parameters.TaskExecutionLogId",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"M_TotalNoRows": {
																	"value": {
																		"value": "@string(activity('Notebook-Read-Manifest-Value').output.runOutput.TOTAL_NO_OF_ROWS)",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"M_Message": {
																	"value": {
																		"value": "@string(activity('Notebook-Read-Manifest-Value').output.runOutput.message)",
																		"type": "Expression"
																	},
																	"type": "String"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "LS-AzureSqlDatabase_Ctrldb",
															"type": "LinkedServiceReference"
														}
													}
												]
											}
										]
									}
								},
								{
									"name": "Set Manifest File or Not",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set FileDateTimeStamp",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "Manifest",
										"value": {
											"value": "@if(contains(variables('FileName'),'MANIFEST'),'ManifestFile','DataFile')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Get Full File Name",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[CTL].[GetStorageFileName]",
											"storedProcedureParameters": {
												"DeltaExtract": {
													"type": "Boolean",
													"value": {
														"value": "@pipeline().parameters.TaskDetails.DeltaExtract",
														"type": "Expression"
													}
												},
												"FileName": {
													"type": "String",
													"value": {
														"value": "@concat(pipeline().parameters.TaskDetails.SourceLocation, if(contains(variables('FileName'),'MANIFEST'),'_MANIFEST',''))",
														"type": "Expression"
													}
												},
												"FolderName": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.TaskDetails.TargetLocation",
														"type": "Expression"
													}
												},
												"Grain": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.TaskDetails.ObjectGrain",
														"type": "Expression"
													}
												},
												"Compressed": {
													"type": "Boolean",
													"value": {
														"value": "true",
														"type": "Expression"
													}
												},
												"TargetType": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.TaskDetails.TargetType",
														"type": "Expression"
													}
												}
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "AzureSqlDatabase_Ctrldb",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "Set FileDateTimeStamp",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get Full File Name",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "SET-FileName to Child Item",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileDateTimeStamp",
										"value": {
											"value": "@replace(last(split(variables('FileName'),'_')),'.json','')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Set-Source-Container",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceContainer",
							"value": {
								"value": "@toLower(pipeline().parameters.TaskDetails.SourceGroup)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Source-Filename",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceFileName",
							"value": {
								"value": "@last(split(pipeline().parameters.TaskDetails.SourceLocation,'/'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Log Failure DL Raw",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Loop-All-Files",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[CTL].[UpdateTaskLog]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": {
										"value": "@concat(pipeline().parameters.TaskDetails.SourceLocation, ' failed to load to raw zone')",
										"type": "Expression"
									},
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": null
								},
								"Status": {
									"value": "Failure",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Log Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Loop-All-Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[CTL].[UpdateTaskLog]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.LastLoadedFile",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "Success",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set ProjectName",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ProjectName",
							"value": {
								"value": "@pipeline().parameters.TaskDetails.SourceGroup",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TaskDetails": {
						"type": "object"
					},
					"BatchLogId": {
						"type": "int"
					},
					"TaskExecutionLogId": {
						"type": "int"
					},
					"ProjectRunID": {
						"type": "string"
					},
					"TargetBLOBFolder": {
						"type": "string"
					},
					"TargetBLOBName": {
						"type": "string"
					},
					"StartCounter": {
						"type": "string"
					},
					"EndCounter": {
						"type": "string"
					},
					"ValidationDetails": {
						"type": "string"
					},
					"RunDate": {
						"type": "string"
					},
					"RunTime": {
						"type": "string"
					}
				},
				"variables": {
					"SourceContainer": {
						"type": "String"
					},
					"SourceFileName": {
						"type": "String"
					},
					"OutputFileName": {
						"type": "String"
					},
					"DeltaSQL": {
						"type": "String"
					},
					"FileName": {
						"type": "String"
					},
					"DateStamp": {
						"type": "String"
					},
					"Manifest": {
						"type": "String"
					},
					"ProjectName": {
						"type": "String"
					},
					"FileDateTimeStamp": {
						"type": "String"
					},
					"NoteBookURL": {
						"type": "String",
						"defaultValue": "/build/raw/read-manifest-value"
					}
				},
				"folder": {
					"name": "Blob"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-30T08:46:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SRC_BLOB_JSON_v2')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/datasets/RAW_ADLS_JSON_v2')]",
				"[concat(variables('factoryId'), '/pipelines/04-DL-Load-Raw-to-Delta-Table')]",
				"[concat(variables('factoryId'), '/datasets/ARCHIVE_BLOB_JSON')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureDatabricks_DefinedCluster')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/04-Blob-A-Source Load_Old')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Clone of 05-DL-Load-Raw-to-Trusted",
				"activities": [
					{
						"name": "Get Metadata",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set-Source-Container",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Source-Filename",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set ProjectName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SRC_BLOB_JSON_copy1",
								"type": "DatasetReference",
								"parameters": {
									"BlobName": {
										"value": "@concat(variables('SourceFileName'),'*')",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "Loop-All-Files",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SET-FileName to Child Item",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileName",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Handle Manifest Files",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "Set Manifest File or Not",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@variables('Manifest')",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "DataFile",
												"activities": [
													{
														"name": "Copy-Blob-to-DataLake-Raw",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "JsonSource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true,
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "JsonReadSettings"
																}
															},
															"sink": {
																"type": "JsonSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "JsonWriteSettings"
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "SRC_BLOB_JSON_copy1",
																"type": "DatasetReference",
																"parameters": {
																	"BlobName": {
																		"value": "@variables('FileName')",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "RAW_ADLS_JSON_v2",
																"type": "DatasetReference",
																"parameters": {
																	"BlobPath": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
																		"type": "Expression"
																	},
																	"BlobName": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Execute-DP-Load-Raw-to-Delta-Table",
														"type": "ExecutePipeline",
														"dependsOn": [
															{
																"activity": "SP-Upsert-Manifest-Record-Data",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "04-DL-Load-Raw-to-Delta-Table",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"BatchLogID": {
																	"value": "@pipeline().parameters.BatchLogId",
																	"type": "Expression"
																},
																"TaskExecutionLogId": {
																	"value": "@pipeline().parameters.TaskExecutionLogId",
																	"type": "Expression"
																},
																"TaskDetails": {
																	"value": "@pipeline().parameters.TaskDetails",
																	"type": "Expression"
																},
																"TargetBLOBFolder": {
																	"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
																	"type": "Expression"
																},
																"TargetBLOBName": {
																	"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
																	"type": "Expression"
																},
																"ProjectRunID": {
																	"value": "@pipeline().parameters.ProjectRunID",
																	"type": "Expression"
																},
																"SourceFileName": {
																	"value": "@variables('FileName')",
																	"type": "Expression"
																},
																"SourceFileDateTimeStamp": {
																	"value": "@variables('FileDateTimeStamp')",
																	"type": "Expression"
																}
															}
														}
													},
													{
														"name": "Copy Blob File to ArchiveContainer",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "Execute-DP-Load-Raw-to-Delta-Table",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "JsonSource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true,
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "JsonReadSettings"
																}
															},
															"sink": {
																"type": "JsonSink",
																"storeSettings": {
																	"type": "AzureBlobStorageWriteSettings"
																},
																"formatSettings": {
																	"type": "JsonWriteSettings"
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "SRC_BLOB_JSON_copy1",
																"type": "DatasetReference",
																"parameters": {
																	"BlobName": {
																		"value": "@variables('FileName')",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "ARCHIVE_BLOB_JSON",
																"type": "DatasetReference",
																"parameters": {
																	"BlobContainer": {
																		"value": "@concat(variables('ProjectName'),'/',pipeline().parameters.RunDate,'/',pipeline().parameters.RunTime)",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Delete File from LandingBlob",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Copy Blob File to ArchiveContainer",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "SRC_BLOB_JSON_copy1",
																"type": "DatasetReference",
																"parameters": {
																	"BlobName": {
																		"value": "@variables('FileName')",
																		"type": "Expression"
																	}
																}
															},
															"logStorageSettings": {
																"linkedServiceName": {
																	"referenceName": "LS_AzureDatalake",
																	"type": "LinkedServiceReference"
																},
																"path": "assurance"
															},
															"enableLogging": true,
															"storeSettings": {
																"type": "AzureBlobStorageReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "SP-Upsert-Manifest-Record-Data",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "Copy-Blob-to-DataLake-Raw",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[CTL].[UpsertManifestRecord]",
															"storedProcedureParameters": {
																"BatchExecutionLogID": {
																	"value": {
																		"value": "@pipeline().parameters.BatchLogId",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"Container": {
																	"value": "raw",
																	"type": "String"
																},
																"DeltaColumn": {
																	"value": null,
																	"type": "String"
																},
																"EndCounter": {
																	"value": "0",
																	"type": "String"
																},
																"FileName": {
																	"value": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"FolderName": {
																	"value": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"PipelineRunID": {
																	"value": {
																		"value": "@pipeline().RunId",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"Records": {
																	"value": "1",
																	"type": "Int64"
																},
																"RecordsDeltaTable": {
																	"value": null,
																	"type": "Int64"
																},
																"SourceObject": {
																	"value": {
																		"value": "@pipeline().parameters.TaskDetails.SourceName",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"StartCounter": {
																	"value": "0",
																	"type": "String"
																},
																"TaskExecutionLogID": {
																	"value": {
																		"value": "@pipeline().parameters.TaskExecutionLogId",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"SourceFileName": {
																	"value": {
																		"value": "@variables('FileName')",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"IsManifest": {
																	"value": "false",
																	"type": "Boolean"
																},
																"SourceFileDateStamp": {
																	"value": {
																		"value": "@variables('FileDateTimeStamp')",
																		"type": "Expression"
																	},
																	"type": "String"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "LS-AzureSqlDatabase_Ctrldb",
															"type": "LinkedServiceReference",
															"parameters": {}
														}
													}
												]
											},
											{
												"value": "ManifestFile",
												"activities": [
													{
														"name": "Copy Manifest to Raw Zone",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "JsonSource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true,
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "JsonReadSettings"
																}
															},
															"sink": {
																"type": "JsonSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "JsonWriteSettings"
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "SRC_BLOB_JSON_copy1",
																"type": "DatasetReference",
																"parameters": {
																	"BlobName": {
																		"value": "@variables('FileName')",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "RAW_ADLS_JSON_v2",
																"type": "DatasetReference",
																"parameters": {
																	"BlobPath": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
																		"type": "Expression"
																	},
																	"BlobName": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Archive Manifest File",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "SP-Update-Manifest-Value",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "JsonSource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true,
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "JsonReadSettings"
																}
															},
															"sink": {
																"type": "JsonSink",
																"storeSettings": {
																	"type": "AzureBlobStorageWriteSettings"
																},
																"formatSettings": {
																	"type": "JsonWriteSettings"
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "SRC_BLOB_JSON_copy1",
																"type": "DatasetReference",
																"parameters": {
																	"BlobName": {
																		"value": "@variables('FileName')",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "ARCHIVE_BLOB_JSON",
																"type": "DatasetReference",
																"parameters": {
																	"BlobContainer": {
																		"value": "@concat(variables('ProjectName'),'/',pipeline().parameters.RunDate,'/',pipeline().parameters.RunTime)",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Delete File From Landing",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Archive Manifest File",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "SRC_BLOB_JSON_copy1",
																"type": "DatasetReference",
																"parameters": {
																	"BlobName": {
																		"value": "@variables('FileName')",
																		"type": "Expression"
																	}
																}
															},
															"logStorageSettings": {
																"linkedServiceName": {
																	"referenceName": "LS_AzureDatalake",
																	"type": "LinkedServiceReference"
																},
																"path": "assurance"
															},
															"enableLogging": true,
															"storeSettings": {
																"type": "AzureBlobStorageReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "SP-Upsert-Manifest-Record",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "Copy Manifest to Raw Zone",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[CTL].[UpsertManifestRecord]",
															"storedProcedureParameters": {
																"BatchExecutionLogID": {
																	"value": {
																		"value": "@pipeline().parameters.BatchLogId",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"Container": {
																	"value": "raw",
																	"type": "String"
																},
																"DeltaColumn": {
																	"value": null,
																	"type": "String"
																},
																"EndCounter": {
																	"value": "0",
																	"type": "String"
																},
																"FileName": {
																	"value": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"FolderName": {
																	"value": {
																		"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"PipelineRunID": {
																	"value": {
																		"value": "@pipeline().RunId",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"Records": {
																	"value": "1",
																	"type": "Int64"
																},
																"RecordsDeltaTable": {
																	"value": null,
																	"type": "Int64"
																},
																"SourceFileName": {
																	"value": {
																		"value": "@variables('FileName')",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"SourceObject": {
																	"value": {
																		"value": "@pipeline().parameters.TaskDetails.SourceName",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"StartCounter": {
																	"value": "0",
																	"type": "String"
																},
																"TaskExecutionLogID": {
																	"value": {
																		"value": "@pipeline().parameters.TaskExecutionLogId",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"IsManifest": {
																	"value": "true",
																	"type": "Boolean"
																},
																"SourceFileDateStamp": {
																	"value": {
																		"value": "@variables('FileDateTimeStamp')",
																		"type": "Expression"
																	},
																	"type": "String"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "LS-AzureSqlDatabase_Ctrldb",
															"type": "LinkedServiceReference",
															"parameters": {}
														}
													},
													{
														"name": "Notebook-Read-Manifest-Value",
														"type": "DatabricksNotebook",
														"dependsOn": [
															{
																"activity": "SP-Upsert-Manifest-Record",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"notebookPath": {
																"value": "@variables('NoteBookURL')",
																"type": "Expression"
															},
															"baseParameters": {
																"file_object": {
																	"value": "@concat(activity('Get Full File Name').output.firstrow.StorageFolder,activity('Get Full File Name').output.firstrow.StorageFile)",
																	"type": "Expression"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "LS-AzureDatabricks_DefinedCluster",
															"type": "LinkedServiceReference",
															"parameters": {
																"kvSecret": {
																	"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
																	"type": "Expression"
																},
																"clusterId": {
																	"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[1]",
																	"type": "Expression"
																}
															}
														}
													},
													{
														"name": "SP-Update-Manifest-Value",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "Notebook-Read-Manifest-Value",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[CTL].[UpdateManifestValue]",
															"storedProcedureParameters": {
																"BatchExecutionLogID": {
																	"value": {
																		"value": "@pipeline().parameters.BatchLogId",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"M_DeltaRecordCount": {
																	"value": {
																		"value": "@string(activity('Notebook-Read-Manifest-Value').output.runOutput.DELTA_RECORD_COUNT)",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"SourceFileDateStamp": {
																	"value": {
																		"value": "@variables('FileDateTimeStamp')",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"TaskExecutionLogID": {
																	"value": {
																		"value": "@pipeline().parameters.TaskExecutionLogId",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"M_TotalNoRows": {
																	"value": {
																		"value": "@string(activity('Notebook-Read-Manifest-Value').output.runOutput.TOTAL_NO_OF_ROWS)",
																		"type": "Expression"
																	},
																	"type": "Int64"
																},
																"M_Message": {
																	"value": {
																		"value": "@string(activity('Notebook-Read-Manifest-Value').output.runOutput.message)",
																		"type": "Expression"
																	},
																	"type": "String"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "LS-AzureSqlDatabase_Ctrldb",
															"type": "LinkedServiceReference",
															"parameters": {}
														}
													}
												]
											}
										]
									}
								},
								{
									"name": "Set Manifest File or Not",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set FileDateTimeStamp",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "Manifest",
										"value": {
											"value": "@if(contains(variables('FileName'),'MANIFEST'),'ManifestFile','DataFile')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Get Full File Name",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[CTL].[GetStorageFileName]",
											"storedProcedureParameters": {
												"DeltaExtract": {
													"type": "Boolean",
													"value": {
														"value": "@pipeline().parameters.TaskDetails.DeltaExtract",
														"type": "Expression"
													}
												},
												"FileName": {
													"type": "String",
													"value": {
														"value": "@concat(pipeline().parameters.TaskDetails.SourceLocation, if(contains(variables('FileName'),'MANIFEST'),'_MANIFEST',''))",
														"type": "Expression"
													}
												},
												"FolderName": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.TaskDetails.TargetLocation",
														"type": "Expression"
													}
												},
												"Grain": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.TaskDetails.ObjectGrain",
														"type": "Expression"
													}
												},
												"Compressed": {
													"type": "Boolean",
													"value": {
														"value": "true",
														"type": "Expression"
													}
												},
												"TargetType": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.TaskDetails.TargetType",
														"type": "Expression"
													}
												}
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "AzureSqlDatabase_Ctrldb",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "Set FileDateTimeStamp",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get Full File Name",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "SET-FileName to Child Item",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileDateTimeStamp",
										"value": {
											"value": "@replace(last(split(variables('FileName'),'_')),'.json','')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Set-Source-Container",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceContainer",
							"value": {
								"value": "@toLower(first(split(pipeline().parameters.TaskDetails.SourceLocation,'/')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Source-Filename",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceFileName",
							"value": {
								"value": "@last(split(pipeline().parameters.TaskDetails.SourceLocation,'/'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Log Failure DL Raw",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Loop-All-Files",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[CTL].[UpdateTaskLog]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": {
										"value": "@concat(pipeline().parameters.TaskDetails.SourceLocation, ' failed to load to raw zone')",
										"type": "Expression"
									},
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": null
								},
								"Status": {
									"value": "Failure",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {}
						}
					},
					{
						"name": "Log Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Loop-All-Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[CTL].[UpdateTaskLog]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.LastLoadedFile",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "Success",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {}
						}
					},
					{
						"name": "Set ProjectName",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ProjectName",
							"value": {
								"value": "@pipeline().parameters.TaskDetails.SourceGroup",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TaskDetails": {
						"type": "object",
						"defaultValue": "2"
					},
					"BatchLogId": {
						"type": "int"
					},
					"TaskExecutionLogId": {
						"type": "int"
					},
					"ProjectRunID": {
						"type": "string"
					},
					"TargetBLOBFolder": {
						"type": "string"
					},
					"TargetBLOBName": {
						"type": "string"
					},
					"StartCounter": {
						"type": "string"
					},
					"EndCounter": {
						"type": "string"
					},
					"ValidationDetails": {
						"type": "string"
					},
					"RunDate": {
						"type": "string"
					},
					"RunTime": {
						"type": "string"
					}
				},
				"variables": {
					"SourceContainer": {
						"type": "String"
					},
					"SourceFileName": {
						"type": "String"
					},
					"OutputFileName": {
						"type": "String"
					},
					"DeltaSQL": {
						"type": "String"
					},
					"FileName": {
						"type": "String"
					},
					"DateStamp": {
						"type": "String"
					},
					"Manifest": {
						"type": "String"
					},
					"ProjectName": {
						"type": "String"
					},
					"FileDateTimeStamp": {
						"type": "String"
					},
					"NoteBookURL": {
						"type": "String",
						"defaultValue": "/build/raw/read-manifest-value"
					}
				},
				"folder": {
					"name": "z_Archive"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-30T08:46:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SRC_BLOB_JSON_copy1')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/datasets/RAW_ADLS_JSON_v2')]",
				"[concat(variables('factoryId'), '/pipelines/04-DL-Load-Raw-to-Delta-Table')]",
				"[concat(variables('factoryId'), '/datasets/ARCHIVE_BLOB_JSON')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureDatabricks_DefinedCluster')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/04-Blob-Json-A-Source-Copy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Clone of 05-DL-Load-Raw-to-Trusted",
				"activities": [
					{
						"name": "Log Failure DL Raw",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy-Blob-to-DataLake-Raw",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[CTL].[UpdateTaskLog]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": "Error Occurred during Blob Source Load",
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": null
								},
								"Status": {
									"value": "Failure",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {}
						}
					},
					{
						"name": "Log Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy-Blob-to-DataLake-Raw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[CTL].[UpdateTaskLog]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.LastLoadedFile",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "Success",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {}
						}
					},
					{
						"name": "Set-Source-Container",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceContainer",
							"value": {
								"value": "@toLower(first(split(pipeline().parameters.TaskDetails.SourceLocation,'/')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Source-Filename",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceFileName",
							"value": {
								"value": "@last(split(pipeline().parameters.TaskDetails.SourceLocation,'/'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy-Blob-to-DataLake-Raw",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Manifest file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": {
										"value": "@concat(first(split(variables('SourceFileName'),'.')),'_*')",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SRC_BLOB_JSON",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RAW_ADLS_JSON_v2",
								"type": "DatasetReference",
								"parameters": {
									"BlobPath": {
										"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
										"type": "Expression"
									},
									"BlobName": {
										"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Get Full File Name",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[CTL].[GetStorageFileName]",
								"storedProcedureParameters": {
									"DeltaExtract": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.DeltaExtract",
											"type": "Expression"
										}
									},
									"FileName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.SourceLocation",
											"type": "Expression"
										}
									},
									"FolderName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.TargetLocation",
											"type": "Expression"
										}
									},
									"Grain": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.ObjectGrain",
											"type": "Expression"
										}
									},
									"Compressed": {
										"type": "Boolean",
										"value": {
											"value": "true",
											"type": "Expression"
										}
									},
									"TargetType": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.TargetType",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabase_Ctrldb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Copy Manifest File to Archive",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set-Source-Container",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Source-Filename",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get Full File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": {
										"value": "@concat(first(split(variables('SourceFileName'),'.')),'_MANIFEST_*')",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SRC_BLOB_JSON",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ARCHIVE_BLOB_JSON",
								"type": "DatasetReference",
								"parameters": {
									"BlobContainer": {
										"value": "@concat('archive/', activity('Get Full File Name').output.firstrow.StorageFolder)",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Delete Manifest file",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Manifest File to Archive",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SRC_BLOB_JSON",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "LS_AzureDatalake",
									"type": "LinkedServiceReference"
								},
								"path": "assurance"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"wildcardFileName": {
									"value": "@{concat(first(split(variables('SourceFileName'),'.')),'_MANIFEST_*')}",
									"type": "Expression"
								},
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "If File Was Copied",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Log Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Copy-Blob-to-DataLake-Raw').output.filesWritten, 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute-DP-Load-Raw-to-Delta-Table",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "SP-Create-Manifest",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "04-DL-Load-Raw-to-Delta-Table",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"BatchLogID": {
												"value": "@pipeline().parameters.BatchLogId",
												"type": "Expression"
											},
											"TaskExecutionLogId": {
												"value": "@pipeline().parameters.TaskExecutionLogId",
												"type": "Expression"
											},
											"TaskDetails": {
												"value": "@pipeline().parameters.TaskDetails",
												"type": "Expression"
											},
											"TargetBLOBFolder": {
												"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
												"type": "Expression"
											},
											"TargetBLOBName": {
												"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
												"type": "Expression"
											},
											"ProjectRunID": {
												"value": "@pipeline().parameters.ProjectRunID",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Copy Blob File to ArchiveContainer",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Execute-DP-Load-Raw-to-Delta-Table",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFileName": {
													"value": "@concat(first(split(variables('SourceFileName'),'.')),'_*')",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "SRC_BLOB_JSON",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ARCHIVE_BLOB_JSON",
											"type": "DatasetReference",
											"parameters": {
												"BlobContainer": {
													"value": "@concat('archive/', activity('Get Full File Name').output.firstrow.StorageFolder)",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete File from LandingBlob",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy Blob File to ArchiveContainer",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "SRC_BLOB_JSON",
											"type": "DatasetReference",
											"parameters": {}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "LS_AzureDatalake",
												"type": "LinkedServiceReference"
											},
											"path": "assurance"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"wildcardFileName": {
												"value": "@{concat(first(split(variables('SourceFileName'),'.')),'_*')}",
												"type": "Expression"
											},
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "SP-Create-Manifest",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[CreateManifestRecord]",
										"storedProcedureParameters": {
											"BatchExecutionLogID": {
												"value": {
													"value": "@pipeline().parameters.BatchLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Container": {
												"value": "raw",
												"type": "String"
											},
											"EndCounter": {
												"value": "0",
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
													"type": "Expression"
												},
												"type": "String"
											},
											"FolderName": {
												"value": {
													"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
													"type": "Expression"
												},
												"type": "String"
											},
											"Records": {
												"value": {
													"value": "@activity('Copy-Blob-to-DataLake-Raw').output.Fileswritten",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"SourceObject": {
												"value": {
													"value": "@pipeline().parameters.TaskDetails.SourceName",
													"type": "Expression"
												},
												"type": "String"
											},
											"StartCounter": {
												"value": "0",
												"type": "String"
											},
											"TaskExecutionLogID": {
												"value": {
													"value": "@pipeline().parameters.TaskExecutionLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"DeltaColumn": {
												"value": {
													"value": "@pipeline().parameters.TaskDetails.WatermarkColumn",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineRunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference",
										"parameters": {}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TaskDetails": {
						"type": "object"
					},
					"BatchLogId": {
						"type": "int"
					},
					"TaskExecutionLogId": {
						"type": "int"
					},
					"ProjectRunID": {
						"type": "string"
					},
					"TargetBLOBFolder": {
						"type": "string"
					},
					"TargetBLOBName": {
						"type": "string"
					},
					"StartCounter": {
						"type": "string"
					},
					"EndCounter": {
						"type": "string"
					},
					"ValidationDetails": {
						"type": "string"
					}
				},
				"variables": {
					"SourceContainer": {
						"type": "String"
					},
					"SourceFileName": {
						"type": "String"
					},
					"OutputFileName": {
						"type": "String"
					},
					"DeltaSQL": {
						"type": "String"
					}
				},
				"folder": {
					"name": "z_Archive"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-30T08:46:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/datasets/SRC_BLOB_JSON')]",
				"[concat(variables('factoryId'), '/datasets/RAW_ADLS_JSON_v2')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/datasets/ARCHIVE_BLOB_JSON')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]",
				"[concat(variables('factoryId'), '/pipelines/04-DL-Load-Raw-to-Delta-Table')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/04-DL-Load-Raw-to-Delta-Table')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set-ClusterType",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ClusterType",
							"value": {
								"value": "@toLower(last(split(pipeline().parameters.TaskDetails.Processor,'|')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SP-Update-Manifest-Delta-Records",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SwitchCluster",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CTL].[UpdateManifestDeltaRecords]",
							"storedProcedureParameters": {
								"BatchExecutionLogID": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"TaskExecutionLogID": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"RecordsDeltaTable": {
									"value": {
										"value": "@variables('DataFileRecordCount')",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"SourceFileDateStamp": {
									"value": {
										"value": "@pipeline().parameters.SourceFileDateTimeStamp",
										"type": "Expression"
									},
									"type": "String"
								},
								"RecordsTargetTable": {
									"value": {
										"value": "@variables('TargetTableRecordCount')",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SwitchCluster",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "Set-ClusterType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@variables('ClusterType')",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "clusterpool",
									"activities": [
										{
											"name": "Notebook-Delta-Table-ClusterPool",
											"type": "DatabricksNotebook",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"notebookPath": {
													"value": "@variables('NoteBookURL')",
													"type": "Expression"
												},
												"baseParameters": {
													"file_object": {
														"value": "@concat(pipeline().parameters.TargetBLOBFolder,pipeline().parameters.TargetBLOBName)",
														"type": "Expression"
													},
													"source_param": {
														"value": "@string(pipeline().parameters.TaskDetails)",
														"type": "Expression"
													},
													"file_date_time_stamp": {
														"value": "@pipeline().parameters.SourceFileDateTimeStamp",
														"type": "Expression"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "LS_AzureDatabricks_InstancePool",
												"type": "LinkedServiceReference",
												"parameters": {
													"kvSecret": {
														"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
														"type": "Expression"
													},
													"PoolId": {
														"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[1]",
														"type": "Expression"
													},
													"DatabricksVersion": {
														"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[3]",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Set-ReturnValue-Pool-DataFile",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Notebook-Delta-Table-ClusterPool",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "DataFileRecordCount",
												"value": {
													"value": "@string(activity('Notebook-Delta-Table-ClusterPool').output.runOutput.DataFileRecordCount)",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Set-ReturnValue-Pool-TargetTable",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Notebook-Delta-Table-ClusterPool",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "TargetTableRecordCount",
												"value": {
													"value": "@string(activity('Notebook-Delta-Table-ClusterPool').output.runOutput.TargetTableRecordCount)",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "jobcluster",
									"activities": [
										{
											"name": "Notebook-Delta-Table-Job",
											"type": "DatabricksNotebook",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"notebookPath": {
													"value": "@variables('NoteBookURL')",
													"type": "Expression"
												},
												"baseParameters": {
													"file_object": {
														"value": "@concat(pipeline().parameters.TargetBLOBFolder,pipeline().parameters.TargetBLOBName)",
														"type": "Expression"
													},
													"source_param": {
														"value": "@string(pipeline().parameters.TaskDetails)",
														"type": "Expression"
													},
													"file_date_time_stamp": {
														"value": "@pipeline().parameters.SourceFileDateTimeStamp",
														"type": "Expression"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "LS-AzureDatabricks_JobCluster",
												"type": "LinkedServiceReference",
												"parameters": {
													"kvSecret": {
														"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
														"type": "Expression"
													},
													"DataBricksClusterType": {
														"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[2]",
														"type": "Expression"
													},
													"DataBricksClusterVersion": {
														"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[3]",
														"type": "Expression"
													},
													"DataBricksWorkerNodes": {
														"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[4]",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Set-ReturnValue-Job-DataFile",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Notebook-Delta-Table-Job",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "DataFileRecordCount",
												"value": {
													"value": "@string(activity('Notebook-Delta-Table-Job').output.runOutput.DataFileRecordCount)",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Set-ReturnValue-Job-TargetTable",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Notebook-Delta-Table-Job",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "TargetTableRecordCount",
												"value": {
													"value": "@string(activity('Notebook-Delta-Table-Job').output.runOutput.TargetTableRecordCount)",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "interactive",
									"activities": [
										{
											"name": "Notebook-Delta-Table-Interactive",
											"type": "DatabricksNotebook",
											"dependsOn": [],
											"policy": {
												"timeout": "0.02:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"notebookPath": {
													"value": "@variables('NoteBookURL')",
													"type": "Expression"
												},
												"baseParameters": {
													"file_object": {
														"value": "@concat(pipeline().parameters.TargetBLOBFolder,pipeline().parameters.TargetBLOBName)",
														"type": "Expression"
													},
													"source_param": {
														"value": "@string(pipeline().parameters.TaskDetails)",
														"type": "Expression"
													},
													"file_date_time_stamp": {
														"value": "@pipeline().parameters.SourceFileDateTimeStamp",
														"type": "Expression"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "LS-AzureDatabricks_DefinedCluster",
												"type": "LinkedServiceReference",
												"parameters": {
													"kvSecret": {
														"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
														"type": "Expression"
													},
													"clusterId": {
														"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[1]",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Set-ReturnValue-Interactive-DataFile",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Notebook-Delta-Table-Interactive",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "DataFileRecordCount",
												"value": {
													"value": "@string(activity('Notebook-Delta-Table-Interactive').output.runOutput.DataFileRecordCount)",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Set-ReturnValue-Interactive-TargetTable",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Notebook-Delta-Table-Interactive",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "TargetTableRecordCount",
												"value": {
													"value": "@string(activity('Notebook-Delta-Table-Interactive').output.runOutput.TargetTableRecordCount)",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"BatchLogID": {
						"type": "int",
						"defaultValue": 1
					},
					"TaskExecutionLogId": {
						"type": "int",
						"defaultValue": 1
					},
					"TaskDetails": {
						"type": "object"
					},
					"TargetBLOBFolder": {
						"type": "string",
						"defaultValue": "raw"
					},
					"TargetBLOBName": {
						"type": "string",
						"defaultValue": "targetdirectory"
					},
					"ProjectRunID": {
						"type": "string"
					},
					"SourceFileName": {
						"type": "string"
					},
					"SourceFileDateTimeStamp": {
						"type": "string"
					}
				},
				"variables": {
					"TargetTableRecordCount": {
						"type": "String"
					},
					"ClusterType": {
						"type": "String"
					},
					"NoteBookURL": {
						"type": "String",
						"defaultValue": "/build/raw/load-raw-deltatable"
					},
					"DataFileRecordCount": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Data Lake"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-30T03:14:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatabricks_InstancePool')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureDatabricks_JobCluster')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureDatabricks_DefinedCluster')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/04-LakeLanding-FlatFile-A-Source-Copy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set-Source-Container",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceContainer",
							"value": {
								"value": "@toLower(pipeline().parameters.TaskDetails.SourceGroup)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Source-Filename",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceFileName",
							"value": {
								"value": "@concat(last(split(pipeline().parameters.TaskDetails.SourceLocation,'/')),'.csv')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Full File Name",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[CTL].[GetStorageFileName]",
								"storedProcedureParameters": {
									"DeltaExtract": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.DeltaExtract",
											"type": "Expression"
										}
									},
									"FileName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.SourceLocation",
											"type": "Expression"
										}
									},
									"FolderName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.TargetLocation",
											"type": "Expression"
										}
									},
									"Grain": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.ObjectGrain",
											"type": "Expression"
										}
									},
									"Compressed": {
										"type": "Boolean",
										"value": {
											"value": "true",
											"type": "Expression"
										}
									},
									"TargetType": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.TargetType",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabase_Ctrldb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Get Metadata",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set-Source-Container",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Source-Filename",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get Full File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SRC_BLOB_CSV_NO_QUOTE_CHAR",
								"type": "DatasetReference",
								"parameters": {
									"BlobContainer": {
										"value": "@variables('SourceContainer')",
										"type": "Expression"
									},
									"BlobName": {
										"value": "@variables('SourceFileName')",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "If File Exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Get Metadata').output.exists",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Log Failure DL Raw - File Not Exist",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "[[CTL].[UpdateTaskLog]",
											"type": "Expression"
										},
										"storedProcedureParameters": {
											"BatchLogId": {
												"value": {
													"value": "@pipeline().parameters.BatchLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"ErrorMessage": {
												"value": "Error Occurred during Blob Source Load",
												"type": "String"
											},
											"ExecutionLogId": {
												"value": {
													"value": "@pipeline().parameters.TaskExecutionLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Output": {
												"value": null
											},
											"Status": {
												"value": "Failure",
												"type": "String"
											},
											"TaskId": {
												"value": {
													"value": "@pipeline().parameters.TaskDetails.TaskId",
													"type": "Expression"
												},
												"type": "Int64"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Log Failure DL Raw",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy File to Raw Zone",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "[[CTL].[UpdateTaskLog]",
											"type": "Expression"
										},
										"storedProcedureParameters": {
											"BatchLogId": {
												"value": {
													"value": "@pipeline().parameters.BatchLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"ErrorMessage": {
												"value": "Error Occurred during Blob Source Load",
												"type": "String"
											},
											"ExecutionLogId": {
												"value": {
													"value": "@pipeline().parameters.TaskExecutionLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Output": {
												"value": null
											},
											"Status": {
												"value": "Failure",
												"type": "String"
											},
											"TaskId": {
												"value": {
													"value": "@pipeline().parameters.TaskDetails.TaskId",
													"type": "Expression"
												},
												"type": "Int64"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Log Success",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy File to Raw Zone",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "[[CTL].[UpdateTaskLog]",
											"type": "Expression"
										},
										"storedProcedureParameters": {
											"BatchLogId": {
												"value": {
													"value": "@pipeline().parameters.BatchLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"ErrorMessage": {
												"value": null,
												"type": "String"
											},
											"ExecutionLogId": {
												"value": {
													"value": "@pipeline().parameters.TaskExecutionLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Output": {
												"value": {
													"value": "@pipeline().parameters.TaskDetails.LastLoadedFile",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": "Success",
												"type": "String"
											},
											"TaskId": {
												"value": {
													"value": "@pipeline().parameters.TaskDetails.TaskId",
													"type": "Expression"
												},
												"type": "Int64"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Copy File to Raw Zone",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "SRC_BLOB_CSV_NO_QUOTE_CHAR",
											"type": "DatasetReference",
											"parameters": {
												"BlobContainer": {
													"value": "@variables('SourceContainer')",
													"type": "Expression"
												},
												"BlobName": {
													"value": "@variables('SourceFileName')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DST_RAW_ADLS_CSV",
											"type": "DatasetReference",
											"parameters": {
												"BlobPath": {
													"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
													"type": "Expression"
												},
												"BlobName": {
													"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Execute-DP-Load-Raw-to-Delta-Table",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "SP-Record-Manifest",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "04-DL-Load-Raw-to-Delta-Table",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"BatchLogID": {
												"value": "@pipeline().parameters.BatchLogId",
												"type": "Expression"
											},
											"TaskExecutionLogId": {
												"value": "@pipeline().parameters.TaskExecutionLogId",
												"type": "Expression"
											},
											"TaskDetails": {
												"value": "@pipeline().parameters.TaskDetails",
												"type": "Expression"
											},
											"TargetBLOBFolder": {
												"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
												"type": "Expression"
											},
											"TargetBLOBName": {
												"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
												"type": "Expression"
											},
											"ProjectRunID": {
												"value": "@pipeline().parameters.ProjectRunID",
												"type": "Expression"
											},
											"SourceFileName": {
												"value": "@variables('SourceFileName')",
												"type": "Expression"
											},
											"SourceFileDateTimeStamp": "1"
										}
									}
								},
								{
									"name": "Delete file from source",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy File to Archive",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "SRC_BLOB_CSV_NO_QUOTE_CHAR",
											"type": "DatasetReference",
											"parameters": {
												"BlobContainer": "@variables('SourceContainer')",
												"BlobName": "@variables('SourceFileName')"
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "LS_AzureDatalake",
												"type": "LinkedServiceReference"
											},
											"path": "assurance"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Copy File to Archive",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Execute-DP-Load-Raw-to-Delta-Table",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "SRC_BLOB_CSV_NO_QUOTE_CHAR",
											"type": "DatasetReference",
											"parameters": {
												"BlobContainer": {
													"value": "@variables('SourceContainer')",
													"type": "Expression"
												},
												"BlobName": {
													"value": "@variables('SourceFileName')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ARCHIVE_BLOB_CSV",
											"type": "DatasetReference",
											"parameters": {
												"BlobContainer": {
													"value": "@concat(variables('SourceContainer'),'/',pipeline().parameters.RunDate,'/',pipeline().parameters.RunTime)",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "SP-Record-Manifest",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Log Success",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[CreateManifestRecord]",
										"storedProcedureParameters": {
											"BatchExecutionLogID": {
												"value": {
													"value": "@pipeline().parameters.BatchLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Container": {
												"value": "raw",
												"type": "String"
											},
											"EndCounter": {
												"value": "0",
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
													"type": "Expression"
												},
												"type": "String"
											},
											"FolderName": {
												"value": {
													"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
													"type": "Expression"
												},
												"type": "String"
											},
											"Records": {
												"value": {
													"value": "@string(activity('Copy File to Raw Zone').output.dataWritten)",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"SourceObject": {
												"value": {
													"value": "@pipeline().parameters.TaskDetails.SourceName",
													"type": "Expression"
												},
												"type": "String"
											},
											"StartCounter": {
												"value": "0",
												"type": "String"
											},
											"TaskExecutionLogID": {
												"value": {
													"value": "@pipeline().parameters.TaskExecutionLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"DeltaColumn": {
												"value": null,
												"type": "String"
											},
											"PipelineRunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceFileName": {
												"value": {
													"value": "@variables('SourceFileName')",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceFileDateStamp": {
												"value": "1",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TaskDetails": {
						"type": "object"
					},
					"BatchLogId": {
						"type": "int"
					},
					"TaskExecutionLogId": {
						"type": "int"
					},
					"ProjectRunID": {
						"type": "string"
					},
					"TargetBLOBFolder": {
						"type": "string"
					},
					"TargetBLOBName": {
						"type": "string"
					},
					"RunDate": {
						"type": "string"
					},
					"RunTime": {
						"type": "string"
					}
				},
				"variables": {
					"SourceContainer": {
						"type": "String"
					},
					"SourceFileName": {
						"type": "String"
					},
					"OutputFileName": {
						"type": "String"
					},
					"DeltaSQL": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Blob"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-30T08:46:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/datasets/SRC_BLOB_CSV_NO_QUOTE_CHAR')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/datasets/DST_RAW_ADLS_CSV')]",
				"[concat(variables('factoryId'), '/pipelines/04-DL-Load-Raw-to-Delta-Table')]",
				"[concat(variables('factoryId'), '/datasets/ARCHIVE_BLOB_CSV')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/04-Oracle-A-Source Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Check Delta Load",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Full File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Execute-Generate-Schema",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get-Table-Values",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.TaskDetails.DeltaExtract,true)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Log Success",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "EP-Oracle-Copy-Full",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[UpdateTaskLog]",
										"storedProcedureParameters": {
											"BatchLogId": {
												"value": {
													"value": "@pipeline().parameters.BatchLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"ErrorMessage": {
												"value": "",
												"type": "String"
											},
											"ExecutionLogId": {
												"value": {
													"value": "@pipeline().parameters.TaskExecutionLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Status": {
												"value": "Success",
												"type": "String"
											},
											"TaskId": {
												"value": {
													"value": "@pipeline().parameters.TaskDetails.TaskId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Output": {
												"value": {
													"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference",
										"parameters": {}
									}
								},
								{
									"name": "Log Failure",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "EP-Oracle-Copy-Full",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[UpdateTaskLog]",
										"storedProcedureParameters": {
											"BatchLogId": {
												"value": {
													"value": "@pipeline().parameters.BatchLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"ErrorMessage": {
												"value": "Some error occured",
												"type": "String"
											},
											"ExecutionLogId": {
												"value": {
													"value": "@pipeline().parameters.TaskExecutionLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Status": {
												"value": "Failure",
												"type": "String"
											},
											"TaskId": {
												"value": {
													"value": "@pipeline().parameters.TaskDetails.TaskId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Output": {
												"value": null,
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference",
										"parameters": {}
									}
								},
								{
									"name": "EP-Oracle-Copy-Full",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "04-Oracle-B-Source-Copy",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"BatchLogId": {
												"value": "@pipeline().parameters.BatchLogId",
												"type": "Expression"
											},
											"TaskDetails": {
												"value": "@pipeline().parameters.TaskDetails",
												"type": "Expression"
											},
											"TaskExecutionLogId": {
												"value": "@pipeline().parameters.TaskExecutionLogId",
												"type": "Expression"
											},
											"SourceSQL": {
												"value": "@pipeline().parameters.TaskDetails.Command",
												"type": "Expression"
											},
											"TargetBLOBFolder": {
												"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
												"type": "Expression"
											},
											"TargetBLOBName": {
												"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
												"type": "Expression"
											},
											"ValidationDetails": {
												"value": "@activity('Get-Table-Values').output.firstRow",
												"type": "Expression"
											},
											"ProjectRunID": {
												"value": "@pipeline().parameters.ProjectRunID",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Task Log Failure",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "EP-Oracle-Copy-Delta",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[UpdateTaskLog]",
										"storedProcedureParameters": {
											"BatchLogId": {
												"value": {
													"value": "@pipeline().parameters.BatchLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"ErrorMessage": {
												"value": {
													"value": "An Error Occurred",
													"type": "Expression"
												},
												"type": "String"
											},
											"ExecutionLogId": {
												"value": {
													"value": "@pipeline().parameters.TaskExecutionLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Status": {
												"value": "Failure",
												"type": "String"
											},
											"TaskId": {
												"value": {
													"value": "@pipeline().parameters.TaskDetails.TaskId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Output": {
												"value": null,
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference",
										"parameters": {}
									}
								},
								{
									"name": "Watermark Task Failure",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "SP-Update-Watermark",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[UpdateTaskLog]",
										"storedProcedureParameters": {
											"BatchLogId": {
												"value": {
													"value": "@pipeline().parameters.BatchLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"ErrorMessage": {
												"value": {
													"value": "An Error Occurred while updating Watermark",
													"type": "Expression"
												},
												"type": "String"
											},
											"ExecutionLogId": {
												"value": {
													"value": "@pipeline().parameters.TaskExecutionLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Status": {
												"value": "Failure",
												"type": "String"
											},
											"TaskId": {
												"value": {
													"value": "@pipeline().parameters.TaskDetails.TaskId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Output": {
												"value": null,
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference",
										"parameters": {}
									}
								},
								{
									"name": "Task Success",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "SP-Update-Watermark",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[UpdateTaskLog]",
										"storedProcedureParameters": {
											"BatchLogId": {
												"value": {
													"value": "@pipeline().parameters.BatchLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"ErrorMessage": {
												"value": "",
												"type": "String"
											},
											"ExecutionLogId": {
												"value": {
													"value": "@pipeline().parameters.TaskExecutionLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Status": {
												"value": "Success",
												"type": "String"
											},
											"TaskId": {
												"value": {
													"value": "@pipeline().parameters.TaskDetails.TaskId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Output": {
												"value": {
													"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference",
										"parameters": {}
									}
								},
								{
									"name": "EP-Oracle-Copy-Delta",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "SET-Delta-SQL",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "04-Oracle-B-Source-Copy",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"BatchLogId": {
												"value": "@pipeline().parameters.BatchLogId",
												"type": "Expression"
											},
											"TaskDetails": {
												"value": "@pipeline().parameters.TaskDetails",
												"type": "Expression"
											},
											"TaskExecutionLogId": {
												"value": "@pipeline().parameters.TaskExecutionLogId",
												"type": "Expression"
											},
											"SourceSQL": {
												"value": "@variables('DeltaSQL')",
												"type": "Expression"
											},
											"TargetBLOBFolder": {
												"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
												"type": "Expression"
											},
											"TargetBLOBName": {
												"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
												"type": "Expression"
											},
											"ValidationDetails": {
												"value": "@activity('Get-Table-Values').output.firstRow",
												"type": "Expression"
											},
											"ProjectRunID": {
												"value": "@pipeline().parameters.ProjectRunID",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "SET-Delta-SQL",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SET-Watermark-Value",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "DeltaSQL",
										"value": {
											"value": "@replace(pipeline().parameters.TaskDetails.Command, '<<ENDDATE>>', variables('WatermarkValue'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SP-Update-Watermark",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "EP-Oracle-Copy-Delta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[updateWatermarks]",
										"storedProcedureParameters": {
											"SourceId": {
												"value": {
													"value": "@pipeline().parameters.TaskDetails.SourceId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Watermark": {
												"value": {
													"value": "@variables('WatermarkValue')",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference",
										"parameters": {}
									}
								},
								{
									"name": "SET-Watermark-Value",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "WatermarkValue",
										"value": {
											"value": "@replace(activity('Get-Table-Values').output.firstRow.ReturnValue, '\\', ' ')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Task Log Failure-Watermark Value SET",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "SET-Watermark-Value",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[UpdateTaskLog]",
										"storedProcedureParameters": {
											"BatchLogId": {
												"value": {
													"value": "@pipeline().parameters.BatchLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"ErrorMessage": {
												"value": {
													"value": "An Error Occurred",
													"type": "Expression"
												},
												"type": "String"
											},
											"ExecutionLogId": {
												"value": {
													"value": "@pipeline().parameters.TaskExecutionLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Status": {
												"value": "Failure",
												"type": "String"
											},
											"TaskId": {
												"value": {
													"value": "@pipeline().parameters.TaskDetails.TaskId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Output": {
												"value": null,
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference",
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "Get Full File Name",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[CTL].[GetStorageFileName]",
								"storedProcedureParameters": {
									"DeltaExtract": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.DeltaExtract",
											"type": "Expression"
										}
									},
									"FileName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.SourceLocation",
											"type": "Expression"
										}
									},
									"FolderName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.TargetLocation",
											"type": "Expression"
										}
									},
									"Grain": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.ObjectGrain",
											"type": "Expression"
										}
									},
									"Compressed": {
										"type": "Boolean",
										"value": {
											"value": "true",
											"type": "Expression"
										}
									},
									"TargetType": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.TargetType",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabase_Ctrldb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Execute-Generate-Schema",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "04-Oracle-Generate-Source-Schema",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"TaskDetails": {
									"value": "@pipeline().parameters.TaskDetails",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Task Log Failure Schema",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Execute-Generate-Schema",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CTL].[UpdateTaskLog]",
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": {
										"value": "An Error Occurred while generating schema",
										"type": "Expression"
									},
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Status": {
									"value": "Failure",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {}
						}
					},
					{
						"name": "Task Log Failure FileName",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Full File Name",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CTL].[UpdateTaskLog]",
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": {
										"value": "An Error Occurred while getting file name",
										"type": "Expression"
									},
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Status": {
									"value": "Failure",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {}
						}
					},
					{
						"name": "Get-Table-SQL",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[CTL].[GetTableDetails]",
								"storedProcedureParameters": {
									"SourceId": {
										"type": "Int64",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.SourceId",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabase_Ctrldb",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get-Table-Values",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get-Table-SQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": {
									"value": "@activity('Get-Table-SQL').output.firstrow.SQLStatement",
									"type": "Expression"
								},
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "SRC_Oracle",
								"type": "DatasetReference",
								"parameters": {
									"kvSecret": "@pipeline().parameters.TaskDetails.SourceServer"
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Task Log Failure-Watermark Values",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get-Table-Values",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CTL].[UpdateTaskLog]",
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": {
										"value": "An Error Occurred",
										"type": "Expression"
									},
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Status": {
									"value": "Failure",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"BatchLogId": {
						"type": "int"
					},
					"TaskDetails": {
						"type": "object"
					},
					"TaskExecutionLogId": {
						"type": "int"
					},
					"ProjectRunID": {
						"type": "string"
					}
				},
				"variables": {
					"OutputFileName": {
						"type": "String"
					},
					"DeltaSQL": {
						"type": "String"
					},
					"WatermarkValue": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Oracle"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/pipelines/04-Oracle-Generate-Source-Schema')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/datasets/SRC_Oracle')]",
				"[concat(variables('factoryId'), '/pipelines/04-Oracle-B-Source-Copy')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/04-Oracle-B-Source-Copy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy-Source-DataLake",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": {
									"value": "@pipeline().parameters.SourceSQL",
									"type": "Expression"
								},
								"partitionOption": "None",
								"queryTimeout": "10:00:00"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SRC_Oracle",
								"type": "DatasetReference",
								"parameters": {
									"kvSecret": "@pipeline().parameters.TaskDetails.SourceServer"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RAW_PARQUET",
								"type": "DatasetReference",
								"parameters": {
									"BlobPath": "sinkdataset needs to be changed",
									"BlobName": "sinkdataset needs to be changed"
								}
							}
						]
					},
					{
						"name": "If-RecordCount",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Copy-Source-DataLake",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Copy-Source-DataLake').output.rowsCopied, 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "SP-Record-Manifest",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[CreateManifestRecord]",
										"storedProcedureParameters": {
											"BatchExecutionLogID": {
												"value": {
													"value": "@pipeline().parameters.BatchLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Container": {
												"value": "raw",
												"type": "String"
											},
											"EndCounter": {
												"value": {
													"value": "@json(string(pipeline().parameters.ValidationDetails)).ReturnValue",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@pipeline().parameters.TargetBLOBName",
													"type": "Expression"
												},
												"type": "String"
											},
											"FolderName": {
												"value": {
													"value": "@pipeline().parameters.TargetBLOBFolder",
													"type": "Expression"
												},
												"type": "String"
											},
											"Records": {
												"value": {
													"value": "@string(activity('Copy-Source-DataLake').output.rowsCopied)",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"SourceObject": {
												"value": {
													"value": "@pipeline().parameters.TaskDetails.SourceName",
													"type": "Expression"
												},
												"type": "String"
											},
											"StartCounter": {
												"value": {
													"value": "@pipeline().parameters.TaskDetails.Watermarks",
													"type": "Expression"
												},
												"type": "String"
											},
											"TaskExecutionLogID": {
												"value": {
													"value": "@pipeline().parameters.TaskExecutionLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"DeltaColumn": {
												"value": {
													"value": "@pipeline().parameters.TaskDetails.WatermarkColumn",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineRunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Execute-DB-Load-Delta-Table",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "SP-Record-Manifest",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "04-DL-Load-Raw-to-Delta-Table",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"BatchLogId": {
												"value": "@pipeline().parameters.BatchLogId",
												"type": "Expression"
											},
											"TaskExecutionLogId": {
												"value": "@pipeline().parameters.TaskExecutionLogId",
												"type": "Expression"
											},
											"TaskDetails": {
												"value": "@pipeline().parameters.TaskDetails",
												"type": "Expression"
											},
											"TargetBLOBFolder": {
												"value": "@pipeline().parameters.TargetBLOBFolder",
												"type": "Expression"
											},
											"TargetBLOBName": {
												"value": "@pipeline().parameters.TargetBLOBName",
												"type": "Expression"
											},
											"ProjectRunID": {
												"value": "@pipeline().parameters.ProjectRunID",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "EP-Record-Validation",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Execute-DB-Load-Delta-Table",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "recon-record-validation",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ProjectRunID": {
												"value": "@pipeline().parameters.ProjectRunID",
												"type": "Expression"
											},
											"ValidationDetails": {
												"value": "@pipeline().parameters.ValidationDetails",
												"type": "Expression"
											},
											"SourceID": {
												"value": "@pipeline().parameters.TaskDetails.SourceID",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"BatchLogId": {
						"type": "int"
					},
					"TaskDetails": {
						"type": "object"
					},
					"TaskExecutionLogId": {
						"type": "securestring"
					},
					"SourceSQL": {
						"type": "string"
					},
					"TargetBLOBFolder": {
						"type": "string"
					},
					"TargetBLOBName": {
						"type": "string"
					},
					"ValidationDetails": {
						"type": "object"
					},
					"ProjectRunID": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Oracle"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SRC_Oracle')]",
				"[concat(variables('factoryId'), '/datasets/RAW_PARQUET')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/pipelines/04-DL-Load-Raw-to-Delta-Table')]",
				"[concat(variables('factoryId'), '/pipelines/recon-record-validation')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/04-Oracle-Generate-Source-Schema')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Generate Schema",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set-Owner",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Table",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-File",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": {
									"value": "@replace(replace(variables('SQL'), '<<TABLE>>', variables('Table')), '<<OWNER>>', variables('Owner'))",
									"type": "Expression"
								},
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SRC_Oracle",
								"type": "DatasetReference",
								"parameters": {
									"kvSecret": {
										"value": "@pipeline().parameters.TaskDetails.SourceServer",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RAW_ADLS_Schema",
								"type": "DatasetReference",
								"parameters": {
									"BlobPath": {
										"value": "@variables('Folder')",
										"type": "Expression"
									},
									"BlobName": {
										"value": "@variables('File')",
										"type": "Expression"
									},
									"Compression": "none",
									"ColumnDelim": ",",
									"HeaderRow": false
								}
							}
						]
					},
					{
						"name": "Generate Schema Original",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Generate Schema",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": {
									"value": "@replace(replace(variables('SQL-Original'), '<<TABLE>>', variables('Table')), '<<OWNER>>', variables('Owner'))",
									"type": "Expression"
								},
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SRC_Oracle",
								"type": "DatasetReference",
								"parameters": {
									"kvSecret": {
										"value": "@pipeline().parameters.TaskDetails.SourceServer",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RAW_ADLS_Schema",
								"type": "DatasetReference",
								"parameters": {
									"BlobPath": {
										"value": "@concat(variables('Folder'), '/original/')",
										"type": "Expression"
									},
									"BlobName": {
										"value": "@concat(variables('File'), '.csv')",
										"type": "Expression"
									},
									"Compression": "none",
									"ColumnDelim": ",",
									"HeaderRow": true
								}
							}
						]
					},
					{
						"name": "If-Empty-Delete",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Generate Schema Original",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Generate Schema').output.rowsCopied, 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete-Empty-File",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "BINARY_ADLS",
											"type": "DatasetReference",
											"parameters": {
												"File": {
													"value": "@variables('File')",
													"type": "Expression"
												},
												"Container": "raw",
												"Folder": {
													"value": "@variables('Folder')",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "LS_AzureBlobStorage",
												"type": "LinkedServiceReference"
											},
											"path": "log"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true
										}
									}
								}
							]
						}
					},
					{
						"name": "Set-Folder",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Folder",
							"value": {
								"value": "@toLower(concat(pipeline().parameters.TaskDetails.SourceGroup, '//', 'schema'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-File",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "File",
							"value": {
								"value": "@toLower(concat(pipeline().parameters.TaskDetails.SourceName, '.', 'schema'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Table",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Table",
							"value": {
								"value": "@split(pipeline().parameters.TaskDetails.SourceLocation,'.')[1]",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Owner",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Owner",
							"value": {
								"value": "@split(pipeline().parameters.TaskDetails.SourceLocation,'.')[0]",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TaskDetails": {
						"type": "object"
					}
				},
				"variables": {
					"Owner": {
						"type": "String"
					},
					"Table": {
						"type": "String"
					},
					"SQL": {
						"type": "String",
						"defaultValue": "SELECT column_name,         CASE           WHEN data_type = 'NUMBER' AND data_scale = 0 THEN 'double'           WHEN data_type = 'NUMBER' AND data_scale > 0 THEN 'double'           WHEN data_type = 'DATE' THEN 'timestamp'           ELSE 'string'         END                              AS fieldtype,         CASE           WHEN data_type = 'DATE' THEN 'DATETIME2'           ELSE data_type         END                              AS data_type,         Nvl(data_precision, data_length) PRECISION,         data_scale                       scale,         table_name                       table_name,         owner                            table_schema  FROM   all_tab_cols  WHERE  table_name = '<<TABLE>>'         AND owner = '<<OWNER>>'         AND hidden_column = 'NO'  \t   "
					},
					"SQL-Original": {
						"type": "String",
						"defaultValue": "SELECT * FROM all_tab_cols WHERE table_name = '<<TABLE>>' \tAND owner = '<<OWNER>>'"
					},
					"Folder": {
						"type": "String"
					},
					"File": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Oracle"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SRC_Oracle')]",
				"[concat(variables('factoryId'), '/datasets/RAW_ADLS_Schema')]",
				"[concat(variables('factoryId'), '/datasets/BINARY_ADLS')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/04-SQLServer-A-Source Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Check Delta Load",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get-Table-Values",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Execute-Generate-Schema",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.TaskDetails.DeltaExtract,true)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SET-Full-SQL",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SET-Watermark-Value-Full",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SQLCommand",
										"value": {
											"value": "@concat(pipeline().parameters.TaskDetails.Command, ' WHERE ?AdfDynamicRangePartitionCondition')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SET-Watermark-Value-Full",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "WatermarkValue",
										"value": {
											"value": "@getFutureTime(0, 'Day', 'yyyyMMddhhmmss')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Task Log Failure-Watermark Value SET_copy1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "SET-Watermark-Value-Full",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[UpdateTaskLog]",
										"storedProcedureParameters": {
											"BatchLogId": {
												"value": {
													"value": "@pipeline().parameters.BatchLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"ErrorMessage": {
												"value": {
													"value": "An Error Occurred",
													"type": "Expression"
												},
												"type": "String"
											},
											"ExecutionLogId": {
												"value": {
													"value": "@pipeline().parameters.TaskExecutionLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Status": {
												"value": "Failure",
												"type": "String"
											},
											"TaskId": {
												"value": {
													"value": "@pipeline().parameters.TaskDetails.TaskId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Output": {
												"value": null,
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SET-Delta-SQL",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SET-Watermark-Value-Delta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SQLCommand",
										"value": {
											"value": "@replace(pipeline().parameters.TaskDetails.Command, '<<ENDDATE>>', replace(replace(replace(variables('WatermarkValue'), '-', ''), ':', ''), ' ', ''))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SET-Watermark-Value-Delta",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "WatermarkValue",
										"value": {
											"value": "@string(activity('Get-Table-Values').output.firstRow.ReturnValue)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Task Log Failure-Watermark Value SET",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "SET-Watermark-Value-Delta",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[UpdateTaskLog]",
										"storedProcedureParameters": {
											"BatchLogId": {
												"value": {
													"value": "@pipeline().parameters.BatchLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"ErrorMessage": {
												"value": {
													"value": "An Error Occurred",
													"type": "Expression"
												},
												"type": "String"
											},
											"ExecutionLogId": {
												"value": {
													"value": "@pipeline().parameters.TaskExecutionLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Status": {
												"value": "Failure",
												"type": "String"
											},
											"TaskId": {
												"value": {
													"value": "@pipeline().parameters.TaskDetails.TaskId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Output": {
												"value": null,
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Execute-Generate-Schema",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "04-SQLServer-Generate-Source-Schema",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"TaskDetails": {
									"value": "@pipeline().parameters.TaskDetails",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Task Log Failure Schema",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Execute-Generate-Schema",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CTL].[UpdateTaskLog]",
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": {
										"value": "An Error Occurred while generating schema",
										"type": "Expression"
									},
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Status": {
									"value": "Failure",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get-Table-SQL",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[CTL].[GetTableDetails]",
								"storedProcedureParameters": {
									"SourceId": {
										"type": "Int64",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.SourceId",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabase_Ctrldb",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get-Table-Values",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get-Table-SQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "@activity('Get-Table-SQL').output.firstrow.SQLStatement",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SRC_SQLSERVER",
								"type": "DatasetReference",
								"parameters": {
									"kvSecret": {
										"value": "@pipeline().parameters.TaskDetails.SourceServer",
										"type": "Expression"
									},
									"tableName": "ercho",
									"schemaName": "eq1"
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Task Log Failure-Watermark Values",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get-Table-Values",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CTL].[UpdateTaskLog]",
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": {
										"value": "An Error Occurred",
										"type": "Expression"
									},
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Status": {
									"value": "Failure",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Task Log Failure Copy",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "EP-SQLSrc-DeltaTable-Write-Delta",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CTL].[UpdateTaskLog]",
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": {
										"value": "An Error Occurred",
										"type": "Expression"
									},
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Status": {
									"value": "Failure",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Watermark Task Failure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SP-Update-Watermark",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CTL].[UpdateTaskLog]",
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": {
										"value": "An Error Occurred while updating Watermark",
										"type": "Expression"
									},
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Status": {
									"value": "Failure",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Task Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SP-Update-Watermark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CTL].[UpdateTaskLog]",
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": "",
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Status": {
									"value": "Success",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": {
										"value": "null",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SP-Update-Watermark",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "EP-SQLSrc-DeltaTable-Write-Delta",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CTL].[updateWatermarks]",
							"storedProcedureParameters": {
								"SourceId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.SourceId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Watermark": {
									"value": {
										"value": "@variables('WatermarkValue')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "EP-SQLSrc-DeltaTable-Write-Delta",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Check Delta Load",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "04-SQLServer-B-Source-Copy",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SQLCommand": {
									"value": "@variables('SQLCommand')",
									"type": "Expression"
								},
								"BatchExecutionLogID": {
									"value": "@pipeline().parameters.BatchLogId",
									"type": "Expression"
								},
								"TaskExecutionLogID": {
									"value": "@pipeline().parameters.TaskExecutionLogId",
									"type": "Expression"
								},
								"WatermarkColumn": {
									"value": "@variables('WatermarkValue')",
									"type": "Expression"
								},
								"TargetBLOBName": "null",
								"TargetBLOBFolder": "null",
								"TaskDetails": {
									"value": "@pipeline().parameters.TaskDetails",
									"type": "Expression"
								},
								"ValidationDetails": {
									"value": "@activity('Get-Table-Values').output.firstRow",
									"type": "Expression"
								},
								"ProjectRunID": {
									"value": "@pipeline().parameters.ProjectRunID",
									"type": "Expression"
								},
								"SourceFileDateStamp": "1"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"BatchLogId": {
						"type": "int"
					},
					"TaskDetails": {
						"type": "object"
					},
					"TaskExecutionLogId": {
						"type": "int"
					},
					"ProjectRunID": {
						"type": "string"
					}
				},
				"variables": {
					"OutputFileName": {
						"type": "String"
					},
					"SQLCommand": {
						"type": "String"
					},
					"WatermarkValue": {
						"type": "String"
					}
				},
				"folder": {
					"name": "SQL Server"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/04-SQLServer-Generate-Source-Schema')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/datasets/SRC_SQLSERVER')]",
				"[concat(variables('factoryId'), '/pipelines/04-SQLServer-B-Source-Copy')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/04-SQLServer-A-Source Load_Bak')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Check Delta Load",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Full File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get-Table-Values",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Execute-Generate-Schema",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.TaskDetails.DeltaExtract,true)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Log Success",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "EP-SQL-Copy-Full",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[UpdateTaskLog]",
										"storedProcedureParameters": {
											"BatchLogId": {
												"value": {
													"value": "@pipeline().parameters.BatchLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"ErrorMessage": {
												"value": "",
												"type": "String"
											},
											"ExecutionLogId": {
												"value": {
													"value": "@pipeline().parameters.TaskExecutionLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Status": {
												"value": "Success",
												"type": "String"
											},
											"TaskId": {
												"value": {
													"value": "@pipeline().parameters.TaskDetails.TaskId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Output": {
												"value": {
													"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Log Failure",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "EP-SQL-Copy-Full",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[UpdateTaskLog]",
										"storedProcedureParameters": {
											"BatchLogId": {
												"value": {
													"value": "@pipeline().parameters.BatchLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"ErrorMessage": {
												"value": "Some error occured",
												"type": "String"
											},
											"ExecutionLogId": {
												"value": {
													"value": "@pipeline().parameters.TaskExecutionLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Status": {
												"value": "Failure",
												"type": "String"
											},
											"TaskId": {
												"value": {
													"value": "@pipeline().parameters.TaskDetails.TaskId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Output": {
												"value": null,
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "EP-SQL-Copy-Full",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "04-SQLServer-B-Source-Copy_Bak",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"BatchLogId": {
												"value": "@pipeline().parameters.BatchLogId",
												"type": "Expression"
											},
											"TaskDetails": {
												"value": "@pipeline().parameters.TaskDetails",
												"type": "Expression"
											},
											"TaskExecutionLogId": {
												"value": "@pipeline().parameters.TaskExecutionLogId",
												"type": "Expression"
											},
											"SourceSQL": {
												"value": "@pipeline().parameters.TaskDetails.Command",
												"type": "Expression"
											},
											"TargetBLOBFolder": {
												"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
												"type": "Expression"
											},
											"TargetBLOBName": {
												"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
												"type": "Expression"
											},
											"ValidationDetails": {
												"value": "@activity('Get-Table-Values').output.firstRow",
												"type": "Expression"
											},
											"ProjectRunID": {
												"value": "@pipeline().parameters.ProjectRunID",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Task Log Failure Copy",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "EP-SQL-Copy-Delta",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[UpdateTaskLog]",
										"storedProcedureParameters": {
											"BatchLogId": {
												"value": {
													"value": "@pipeline().parameters.BatchLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"ErrorMessage": {
												"value": {
													"value": "An Error Occurred",
													"type": "Expression"
												},
												"type": "String"
											},
											"ExecutionLogId": {
												"value": {
													"value": "@pipeline().parameters.TaskExecutionLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Status": {
												"value": "Failure",
												"type": "String"
											},
											"TaskId": {
												"value": {
													"value": "@pipeline().parameters.TaskDetails.TaskId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Output": {
												"value": null,
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Watermark Task Failure",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "SP-Update-Watermark",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[UpdateTaskLog]",
										"storedProcedureParameters": {
											"BatchLogId": {
												"value": {
													"value": "@pipeline().parameters.BatchLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"ErrorMessage": {
												"value": {
													"value": "An Error Occurred while updating Watermark",
													"type": "Expression"
												},
												"type": "String"
											},
											"ExecutionLogId": {
												"value": {
													"value": "@pipeline().parameters.TaskExecutionLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Status": {
												"value": "Failure",
												"type": "String"
											},
											"TaskId": {
												"value": {
													"value": "@pipeline().parameters.TaskDetails.TaskId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Output": {
												"value": null,
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Task Success",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "SP-Update-Watermark",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[UpdateTaskLog]",
										"storedProcedureParameters": {
											"BatchLogId": {
												"value": {
													"value": "@pipeline().parameters.BatchLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"ErrorMessage": {
												"value": "",
												"type": "String"
											},
											"ExecutionLogId": {
												"value": {
													"value": "@pipeline().parameters.TaskExecutionLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Status": {
												"value": "Success",
												"type": "String"
											},
											"TaskId": {
												"value": {
													"value": "@pipeline().parameters.TaskDetails.TaskId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Output": {
												"value": {
													"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "EP-SQL-Copy-Delta",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "SET-Delta-SQL",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "04-SQLServer-B-Source-Copy_Bak",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"BatchLogId": {
												"value": "@pipeline().parameters.BatchLogId",
												"type": "Expression"
											},
											"TaskDetails": {
												"value": "@pipeline().parameters.TaskDetails",
												"type": "Expression"
											},
											"TaskExecutionLogId": {
												"value": "@pipeline().parameters.TaskExecutionLogId",
												"type": "Expression"
											},
											"SourceSQL": {
												"value": "@variables('DeltaSQL')",
												"type": "Expression"
											},
											"TargetBLOBFolder": {
												"value": "@activity('Get Full File Name').output.firstrow.StorageFolder",
												"type": "Expression"
											},
											"TargetBLOBName": {
												"value": "@activity('Get Full File Name').output.firstrow.StorageFile",
												"type": "Expression"
											},
											"ValidationDetails": {
												"value": "@activity('Get-Table-Values').output.firstRow",
												"type": "Expression"
											},
											"ProjectRunID": {
												"value": "@pipeline().parameters.ProjectRunID",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "SET-Delta-SQL",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SET-Watermark-Value",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "DeltaSQL",
										"value": {
											"value": "@replace(pipeline().parameters.TaskDetails.Command, '<<ENDDATE>>', variables('WatermarkValue'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SP-Update-Watermark",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "EP-SQL-Copy-Delta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[updateWatermarks]",
										"storedProcedureParameters": {
											"SourceId": {
												"value": {
													"value": "@pipeline().parameters.TaskDetails.SourceId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Watermark": {
												"value": {
													"value": "@variables('WatermarkValue')",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "SET-Watermark-Value",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "WatermarkValue",
										"value": {
											"value": "@replace(activity('Get-Table-Values').output.firstRow.ReturnValue, '\\', ' ')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Task Log Failure-Watermark Value SET",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "SET-Watermark-Value",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[UpdateTaskLog]",
										"storedProcedureParameters": {
											"BatchLogId": {
												"value": {
													"value": "@pipeline().parameters.BatchLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"ErrorMessage": {
												"value": {
													"value": "An Error Occurred",
													"type": "Expression"
												},
												"type": "String"
											},
											"ExecutionLogId": {
												"value": {
													"value": "@pipeline().parameters.TaskExecutionLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Status": {
												"value": "Failure",
												"type": "String"
											},
											"TaskId": {
												"value": {
													"value": "@pipeline().parameters.TaskDetails.TaskId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Output": {
												"value": null,
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Get Full File Name",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[CTL].[GetStorageFileName]",
								"storedProcedureParameters": {
									"DeltaExtract": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.DeltaExtract",
											"type": "Expression"
										}
									},
									"FileName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.SourceLocation",
											"type": "Expression"
										}
									},
									"FolderName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.TargetLocation",
											"type": "Expression"
										}
									},
									"Grain": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.ObjectGrain",
											"type": "Expression"
										}
									},
									"Compressed": {
										"type": "Boolean",
										"value": {
											"value": "true",
											"type": "Expression"
										}
									},
									"TargetType": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.TargetType",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabase_Ctrldb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Execute-Generate-Schema",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "04-SQLServer-Generate-Source-Schema",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"TaskDetails": {
									"value": "@pipeline().parameters.TaskDetails",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Task Log Failure Schema",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Execute-Generate-Schema",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CTL].[UpdateTaskLog]",
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": {
										"value": "An Error Occurred while generating schema",
										"type": "Expression"
									},
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Status": {
									"value": "Failure",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Task Log Failure FileName",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Full File Name",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CTL].[UpdateTaskLog]",
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": {
										"value": "An Error Occurred while getting file name",
										"type": "Expression"
									},
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Status": {
									"value": "Failure",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get-Table-SQL",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[CTL].[GetTableDetails]",
								"storedProcedureParameters": {
									"SourceId": {
										"type": "Int64",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.SourceId",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabase_Ctrldb",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get-Table-Values",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get-Table-SQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "@activity('Get-Table-SQL').output.firstrow.SQLStatement",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SRC_SQLSERVER",
								"type": "DatasetReference",
								"parameters": {
									"kvSecret": {
										"value": "@pipeline().parameters.TaskDetails.SourceServer",
										"type": "Expression"
									},
									"tableName": "erch",
									"schemaName": "dbo"
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Task Log Failure-Watermark Values",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get-Table-Values",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CTL].[UpdateTaskLog]",
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": {
										"value": "An Error Occurred",
										"type": "Expression"
									},
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Status": {
									"value": "Failure",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"BatchLogId": {
						"type": "int"
					},
					"TaskDetails": {
						"type": "object"
					},
					"TaskExecutionLogId": {
						"type": "int"
					},
					"ProjectRunID": {
						"type": "string"
					}
				},
				"variables": {
					"OutputFileName": {
						"type": "String"
					},
					"DeltaSQL": {
						"type": "String"
					},
					"WatermarkValue": {
						"type": "String"
					}
				},
				"folder": {
					"name": "z_Archive"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/pipelines/04-SQLServer-Generate-Source-Schema')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/datasets/SRC_SQLSERVER')]",
				"[concat(variables('factoryId'), '/pipelines/04-SQLServer-B-Source-Copy_Bak')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/04-SQLServer-B-Source-Copy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SP-Record-Manifest_copy1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set-ExtractDateTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CTL].[CreateManifestRecord]",
							"storedProcedureParameters": {
								"BatchExecutionLogID": {
									"value": {
										"value": "@pipeline().parameters.BatchExecutionLogID",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Container": {
									"value": "raw",
									"type": "String"
								},
								"EndCounter": {
									"value": {
										"value": "@json(string(pipeline().parameters.ValidationDetails)).ReturnValue",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.TargetBLOBName",
										"type": "Expression"
									},
									"type": "String"
								},
								"FolderName": {
									"value": {
										"value": "@pipeline().parameters.TargetBLOBFolder",
										"type": "Expression"
									},
									"type": "String"
								},
								"Records": {
									"value": {
										"value": "@pipeline().parameters.ValidationDetails.RecordCount",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"SourceObject": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.SourceName",
										"type": "Expression"
									},
									"type": "String"
								},
								"StartCounter": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.Watermarks",
										"type": "Expression"
									},
									"type": "String"
								},
								"TaskExecutionLogID": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"DeltaColumn": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.WatermarkColumn",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"SourceFileName": {
									"value": "SQL",
									"type": "String"
								},
								"SourceFileDateStamp": {
									"value": {
										"value": "@variables('ExtractDateTime')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SP-Update-Manifest-Delta-Records",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Switch-SLT-Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CTL].[UpdateManifestDeltaRecords]",
							"storedProcedureParameters": {
								"BatchExecutionLogID": {
									"value": {
										"value": "@pipeline().parameters.BatchExecutionLogID",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"TaskExecutionLogID": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"RecordsDeltaTable": {
									"value": {
										"value": "@variables('RowCount')",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"SourceFileDateStamp": {
									"value": {
										"value": "@variables('ExtractDateTime')",
										"type": "Expression"
									},
									"type": "String"
								},
								"RecordsTargetTable": {
									"value": {
										"value": "@variables('RowCount')",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "EP-Record-Validation",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "SP-Update-Manifest-Delta-Records",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "recon-record-validation",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ProjectRunID": {
									"value": "@pipeline().parameters.ProjectRunID",
									"type": "Expression"
								},
								"ValidationDetails": {
									"value": "@pipeline().parameters.ValidationDetails",
									"type": "Expression"
								},
								"SourceID": {
									"value": "@pipeline().parameters.TaskDetails.SourceID",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Copy-TriggerFile-DataLake",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SP-Record-Manifest_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"additionalColumns": [
									{
										"name": "BatchExecutionId",
										"value": {
											"value": "@string(pipeline().parameters.BatchExecutionLogID)",
											"type": "Expression"
										}
									},
									{
										"name": "TaskExecutionLogId",
										"value": {
											"value": "@string(pipeline().parameters.TaskExecutionLogID)",
											"type": "Expression"
										}
									},
									{
										"name": "RawZonePipelineRunID",
										"value": {
											"value": "@pipeline().parameters.ProjectRunID",
											"type": "Expression"
										}
									},
									{
										"name": "WatermarkValue",
										"value": {
											"value": "@pipeline().parameters.WatermarkColumn",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['BatchExecutionId']"
										},
										"sink": {
											"path": "BatchExecutionId"
										}
									},
									{
										"source": {
											"path": "$['TaskExecutionLogId']"
										},
										"sink": {
											"path": "TaskExecutionLogId"
										}
									},
									{
										"source": {
											"path": "$['RawZonePipelineRunID']"
										},
										"sink": {
											"path": "RawZonePipelineRunID"
										}
									},
									{
										"source": {
											"path": "$['WatermarkValue']"
										},
										"sink": {
											"path": "WatermarkValue"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "RAW_ADLS_JSON_v2_NOCOMP",
								"type": "DatasetReference",
								"parameters": {
									"BlobPath": "triggers",
									"BlobName": "template.json"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RAW_ADLS_JSON_v2_NOCOMP",
								"type": "DatasetReference",
								"parameters": {
									"BlobPath": "triggers",
									"BlobName": "trigger_batch_daily_sapslt.json"
								}
							}
						]
					},
					{
						"name": "SP-Update-Manifest-Value",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Switch-SLT-Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CTL].[UpdateManifestValue]",
							"storedProcedureParameters": {
								"BatchExecutionLogID": {
									"value": {
										"value": "@pipeline().parameters.BatchExecutionLogID",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"M_DeltaRecordCount": {
									"value": {
										"value": "@variables('RowCount')",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"SourceFileDateStamp": {
									"value": {
										"value": "@variables('ExtractDateTime')",
										"type": "Expression"
									},
									"type": "String"
								},
								"TaskExecutionLogID": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogID",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"M_TotalNoRows": {
									"value": {
										"value": "@pipeline().parameters.ValidationDetails.RecordCount",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"M_Message": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Switch-SLT-Tables",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "SP-Record-Manifest_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.TaskDetails.SourceName",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "isu_AUSP",
									"activities": [
										{
											"name": "Copy-Source-DataLake-AUSP",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 2,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "_DLRawZoneTimeStamp",
															"value": {
																"value": "@formatDateTime(convertFromUtc(utcnow(),'AUS Eastern Standard Time'),'yyyy-MM-dd HH:mm:ss')",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@pipeline().parameters.SQLCommand",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "DynamicRange",
													"partitionSettings": {
														"partitionColumnName": {
															"value": "@{pipeline().parameters.TaskDetails.PartitionColumn}",
															"type": "Expression"
														},
														"partitionUpperBound": "",
														"partitionLowerBound": ""
													}
												},
												"sink": {
													"type": "AzureDatabricksDeltaLakeSink",
													"importSettings": {
														"type": "AzureDatabricksDeltaLakeImportCommand",
														"dateFormat": "yyyy-MM-dd HH:mm:ss",
														"timestampFormat": "yyyy-MM-dd HH:mm:ss"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "LS_AzureDatalake",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@concat('raw/landing/isu_data/', pipeline().parameters.TaskDetails.TargetName)",
														"type": "Expression"
													},
													"enableCompression": false
												},
												"parallelCopies": 32,
												"dataIntegrationUnits": 8,
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "OBJEK",
																"type": "String"
															},
															"sink": {
																"name": "OBJEK",
																"type": "string"
															}
														},
														{
															"source": {
																"name": "ATINN",
																"type": "String"
															},
															"sink": {
																"name": "ATINN",
																"type": "string"
															}
														},
														{
															"source": {
																"name": "ATZHL",
																"type": "String"
															},
															"sink": {
																"name": "ATZHL",
																"type": "string"
															}
														},
														{
															"source": {
																"name": "MAFID",
																"type": "String"
															},
															"sink": {
																"name": "MAFID",
																"type": "string"
															}
														},
														{
															"source": {
																"name": "KLART",
																"type": "String"
															},
															"sink": {
																"name": "KLART",
																"type": "string"
															}
														},
														{
															"source": {
																"name": "ADZHL",
																"type": "String"
															},
															"sink": {
																"name": "ADZHL",
																"type": "string"
															}
														},
														{
															"source": {
																"name": "ATWRT",
																"type": "String"
															},
															"sink": {
																"name": "ATWRT",
																"type": "string"
															}
														},
														{
															"source": {
																"name": "ATFLV",
																"type": "Double"
															},
															"sink": {
																"name": "ATFLV",
																"type": "Double"
															}
														},
														{
															"source": {
																"name": "ATAWE",
																"type": "String"
															},
															"sink": {
																"name": "ATAWE",
																"type": "string"
															}
														},
														{
															"source": {
																"name": "ATFLB",
																"type": "Double"
															},
															"sink": {
																"name": "ATFLB",
																"type": "Double"
															}
														},
														{
															"source": {
																"name": "ATAW1",
																"type": "String"
															},
															"sink": {
																"name": "ATAW1",
																"type": "string"
															}
														},
														{
															"source": {
																"name": "ATCOD",
																"type": "String"
															},
															"sink": {
																"name": "ATCOD",
																"type": "string"
															}
														},
														{
															"source": {
																"name": "ATTLV",
																"type": "Double"
															},
															"sink": {
																"name": "ATTLV",
																"type": "Double"
															}
														},
														{
															"source": {
																"name": "ATTLB",
																"type": "Double"
															},
															"sink": {
																"name": "ATTLB",
																"type": "Double"
															}
														},
														{
															"source": {
																"name": "ATPRZ",
																"type": "String"
															},
															"sink": {
																"name": "ATPRZ",
																"type": "string"
															}
														},
														{
															"source": {
																"name": "ATINC",
																"type": "Double"
															},
															"sink": {
																"name": "ATINC",
																"type": "Double"
															}
														},
														{
															"source": {
																"name": "ATAUT",
																"type": "String"
															},
															"sink": {
																"name": "ATAUT",
																"type": "string"
															}
														},
														{
															"source": {
																"name": "AENNR",
																"type": "String"
															},
															"sink": {
																"name": "AENNR",
																"type": "string"
															}
														},
														{
															"source": {
																"name": "DATUV",
																"type": "String"
															},
															"sink": {
																"name": "DATUV",
																"type": "string"
															}
														},
														{
															"source": {
																"name": "LKENZ",
																"type": "String"
															},
															"sink": {
																"name": "LKENZ",
																"type": "string"
															}
														},
														{
															"source": {
																"name": "ATIMB",
																"type": "String"
															},
															"sink": {
																"name": "ATIMB",
																"type": "string"
															}
														},
														{
															"source": {
																"name": "ATZIS",
																"type": "String"
															},
															"sink": {
																"name": "ATZIS",
																"type": "string"
															}
														},
														{
															"source": {
																"name": "ATSRT",
																"type": "String"
															},
															"sink": {
																"name": "ATSRT",
																"type": "string"
															}
														},
														{
															"source": {
																"name": "ATVGLART",
																"type": "String"
															},
															"sink": {
																"name": "ATVGLART",
																"type": "string"
															}
														},
														{
															"source": {
																"name": "DATUB",
																"type": "String"
															},
															"sink": {
																"name": "DATUB",
																"type": "string"
															}
														},
														{
															"source": {
																"name": "DEC_VALUE_FROM",
																"type": "Decimal"
															},
															"sink": {
																"name": "DEC_VALUE_FROM"
															}
														},
														{
															"source": {
																"name": "DEC_VALUE_TO",
																"type": "Decimal"
															},
															"sink": {
																"name": "DEC_VALUE_TO"
															}
														},
														{
															"source": {
																"name": "CURR_VALUE_FROM",
																"type": "Decimal"
															},
															"sink": {
																"name": "CURR_VALUE_FROM"
															}
														},
														{
															"source": {
																"name": "CURR_VALUE_TO",
																"type": "Decimal"
															},
															"sink": {
																"name": "CURR_VALUE_TO"
															}
														},
														{
															"source": {
																"name": "CURRENCY",
																"type": "String"
															},
															"sink": {
																"name": "CURRENCY",
																"type": "string"
															}
														},
														{
															"source": {
																"name": "DATE_FROM",
																"type": "String"
															},
															"sink": {
																"name": "DATE_FROM",
																"type": "string"
															}
														},
														{
															"source": {
																"name": "DATE_TO",
																"type": "String"
															},
															"sink": {
																"name": "DATE_TO",
																"type": "string"
															}
														},
														{
															"source": {
																"name": "TIME_FROM",
																"type": "String"
															},
															"sink": {
																"name": "TIME_FROM",
																"type": "string"
															}
														},
														{
															"source": {
																"name": "TIME_TO",
																"type": "String"
															},
															"sink": {
																"name": "TIME_TO",
																"type": "string"
															}
														},
														{
															"source": {
																"name": "ATINN_INT",
																"type": "Int16"
															},
															"sink": {
																"name": "ATINN_INT",
																"type": "Int"
															}
														},
														{
															"source": {
																"name": "DELTA_TS",
																"type": "Decimal"
															},
															"sink": {
																"name": "DELTA_TS"
															}
														},
														{
															"source": {
																"name": "_DLRawZoneTimeStamp"
															},
															"sink": {
																"name": "_DLRawZoneTimeStamp",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "SRC_SQLSERVER",
													"type": "DatasetReference",
													"parameters": {
														"kvSecret": {
															"value": "@pipeline().parameters.TaskDetails.SourceServer",
															"type": "Expression"
														},
														"tableName": "AUSP",
														"schemaName": "dbo"
													}
												}
											],
											"outputs": [
												{
													"referenceName": "DS_RAW_ADLS_DELTALAKE",
													"type": "DatasetReference",
													"parameters": {
														"TableName": {
															"value": "@pipeline().parameters.TaskDetails.TargetName",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "Set-RowCount-AUSP",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Copy-Source-DataLake-AUSP",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RowCount",
												"value": {
													"value": "@string(activity('Copy-Source-DataLake-AUSP').output.rowsCopied)",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Set-DeltaRowsReadCount-AUSP",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Copy-Source-DataLake-AUSP",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RowsRead",
												"value": {
													"value": "@string(activity('Copy-Source-DataLake-AUSP').output.rowsRead)",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Set-ErrorMesage-AUSP",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Set-DeltaRowsReadCount-AUSP",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "ErrorMessage",
												"value": {
													"value": "@string(activity('Copy-Source-DataLake-AUSP').output.errors[0].Message)",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Set-ErrorCode-AUSP",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Set-ErrorMesage-AUSP",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "ErrorCode",
												"value": {
													"value": "@string(activity('Copy-Source-DataLake-AUSP').output.errors[0].Code)",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "Copy-Source-DataLake",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"additionalColumns": [
												{
													"name": "_DLRawZoneTimeStamp",
													"value": {
														"value": "@formatDateTime(convertFromUtc(utcnow(),'AUS Eastern Standard Time'),'yyyy-MM-dd HH:mm:ss')",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": {
												"value": "@pipeline().parameters.SQLCommand",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "DynamicRange",
											"partitionSettings": {
												"partitionColumnName": {
													"value": "@{pipeline().parameters.TaskDetails.PartitionColumn}",
													"type": "Expression"
												},
												"partitionUpperBound": "",
												"partitionLowerBound": ""
											}
										},
										"sink": {
											"type": "AzureDatabricksDeltaLakeSink",
											"importSettings": {
												"type": "AzureDatabricksDeltaLakeImportCommand",
												"dateFormat": "yyyy-MM-dd HH:mm:ss",
												"timestampFormat": "yyyy-MM-dd HH:mm:ss"
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "LS_AzureDatalake",
												"type": "LinkedServiceReference"
											},
											"path": {
												"value": "@concat('raw/landing/isu_data/', pipeline().parameters.TaskDetails.TargetName)",
												"type": "Expression"
											},
											"enableCompression": false
										},
										"parallelCopies": 32,
										"dataIntegrationUnits": 8
									},
									"inputs": [
										{
											"referenceName": "SRC_SQLSERVER",
											"type": "DatasetReference",
											"parameters": {
												"kvSecret": {
													"value": "@pipeline().parameters.TaskDetails.SourceServer",
													"type": "Expression"
												},
												"tableName": "erch",
												"schemaName": "eq1"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_RAW_ADLS_DELTALAKE",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@pipeline().parameters.TaskDetails.TargetName",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set-RowCount",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Copy-Source-DataLake",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "RowCount",
										"value": {
											"value": "@string(activity('Copy-Source-DataLake').output.rowsCopied)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set-DeltaRowsReadCount",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Copy-Source-DataLake",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "RowsRead",
										"value": {
											"value": "@string(activity('Copy-Source-DataLake').output.rowsRead)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set-ErrorMesage",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set-DeltaRowsReadCount",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "ErrorMessage",
										"value": {
											"value": "@string(activity('Copy-Source-DataLake').output.errors[0].Message)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set-ErrorCode",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set-ErrorMesage",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "ErrorCode",
										"value": {
											"value": "@string(activity('Copy-Source-DataLake').output.errors[0].Code)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Check-if-Zero-Delta-Records",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Switch-SLT-Tables",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('RowsRead'),'0')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Fail-SLT-Raw-Load",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@variables('ErrorMessage')",
											"type": "Expression"
										},
										"errorCode": {
											"value": "@variables('ErrorCode')",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SP-Update-Manifest-Value-ZeroRecords",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[UpdateManifestValue]",
										"storedProcedureParameters": {
											"BatchExecutionLogID": {
												"value": {
													"value": "@pipeline().parameters.BatchExecutionLogID",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"M_DeltaRecordCount": {
												"value": {
													"value": "@variables('RowsRead')",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"SourceFileDateStamp": {
												"value": {
													"value": "@variables('ExtractDateTime')",
													"type": "Expression"
												},
												"type": "String"
											},
											"TaskExecutionLogID": {
												"value": {
													"value": "@pipeline().parameters.TaskExecutionLogID",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"M_TotalNoRows": {
												"value": {
													"value": "@pipeline().parameters.ValidationDetails.RecordCount",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"M_Message": {
												"value": null,
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "SP-Update-Manifest-Delta-Zero-Records",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[UpdateManifestDeltaRecords]",
										"storedProcedureParameters": {
											"BatchExecutionLogID": {
												"value": {
													"value": "@pipeline().parameters.BatchExecutionLogID",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"TaskExecutionLogID": {
												"value": {
													"value": "@pipeline().parameters.TaskExecutionLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"RecordsDeltaTable": {
												"value": {
													"value": "@variables('RowsRead')",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"SourceFileDateStamp": {
												"value": {
													"value": "@variables('ExtractDateTime')",
													"type": "Expression"
												},
												"type": "String"
											},
											"RecordsTargetTable": {
												"value": {
													"value": "@variables('RowsRead')",
													"type": "Expression"
												},
												"type": "Int64"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "EP-Record-Validation-Zero-Delta",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "SP-Update-Manifest-Delta-Zero-Records",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "recon-record-validation",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ProjectRunID": {
												"value": "@pipeline().parameters.ProjectRunID",
												"type": "Expression"
											},
											"ValidationDetails": {
												"value": "@pipeline().parameters.ValidationDetails",
												"type": "Expression"
											},
											"SourceID": {
												"value": "@pipeline().parameters.TaskDetails.SourceID",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Dummy1UponSkip",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "EP-Record-Validation",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Dummy2UponSkip",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "SP-Update-Manifest-Value",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Set-ExtractDateTime",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ExtractDateTime",
							"value": {
								"value": "@formatDateTime(convertFromUtc(utcnow(),'AUS Eastern Standard Time'), 'yyyyMMddHHmmss')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SQLCommand": {
						"type": "string"
					},
					"BatchExecutionLogID": {
						"type": "int"
					},
					"TaskExecutionLogID": {
						"type": "int"
					},
					"WatermarkColumn": {
						"type": "string"
					},
					"TargetBLOBName": {
						"type": "string"
					},
					"TargetBLOBFolder": {
						"type": "string"
					},
					"TaskDetails": {
						"type": "object"
					},
					"ValidationDetails": {
						"type": "object"
					},
					"ProjectRunID": {
						"type": "string"
					},
					"SourceFileDateStamp": {
						"type": "string"
					}
				},
				"variables": {
					"RecordsWritten": {
						"type": "String"
					},
					"RecordsRead": {
						"type": "String"
					},
					"sltTimestamp": {
						"type": "String"
					},
					"RowCount": {
						"type": "String"
					},
					"ErrorMessage": {
						"type": "String"
					},
					"ErrorCode": {
						"type": "String"
					},
					"RowsRead": {
						"type": "String"
					},
					"ExtractDateTime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "SQL Server"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/pipelines/recon-record-validation')]",
				"[concat(variables('factoryId'), '/datasets/RAW_ADLS_JSON_v2_NOCOMP')]",
				"[concat(variables('factoryId'), '/datasets/SRC_SQLSERVER')]",
				"[concat(variables('factoryId'), '/datasets/DS_RAW_ADLS_DELTALAKE')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/04-SQLServer-B-Source-Copy_Bak')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy-Source-DataLake",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "@pipeline().parameters.SourceSQL",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SRC_SQLSERVER",
								"type": "DatasetReference",
								"parameters": {
									"kvSecret": {
										"value": "@pipeline().parameters.TaskDetails.SourceServer",
										"type": "Expression"
									},
									"tableName": "erch",
									"schemaName": "dbo"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RAW_ADLS_JSON_v2",
								"type": "DatasetReference",
								"parameters": {
									"BlobPath": {
										"value": "@pipeline().parameters.TargetBLOBFolder",
										"type": "Expression"
									},
									"BlobName": {
										"value": "@pipeline().parameters.TargetBLOBName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "If-RecordCount",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Copy-Source-DataLake",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Copy-Source-DataLake').output.rowsCopied, 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "SP-Record-Manifest",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[CreateManifestRecord]",
										"storedProcedureParameters": {
											"BatchExecutionLogID": {
												"value": {
													"value": "@pipeline().parameters.BatchLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Container": {
												"value": "raw",
												"type": "String"
											},
											"EndCounter": {
												"value": {
													"value": "@json(string(pipeline().parameters.ValidationDetails)).ReturnValue",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@pipeline().parameters.TargetBLOBName",
													"type": "Expression"
												},
												"type": "String"
											},
											"FolderName": {
												"value": {
													"value": "@pipeline().parameters.TargetBLOBFolder",
													"type": "Expression"
												},
												"type": "String"
											},
											"Records": {
												"value": {
													"value": "@string(activity('Copy-Source-DataLake').output.rowsCopied)",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"SourceObject": {
												"value": {
													"value": "@pipeline().parameters.TaskDetails.SourceName",
													"type": "Expression"
												},
												"type": "String"
											},
											"StartCounter": {
												"value": {
													"value": "@pipeline().parameters.TaskDetails.Watermarks",
													"type": "Expression"
												},
												"type": "String"
											},
											"TaskExecutionLogID": {
												"value": {
													"value": "@pipeline().parameters.TaskExecutionLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"DeltaColumn": {
												"value": {
													"value": "@pipeline().parameters.TaskDetails.WatermarkColumn",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineRunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceFileName": {
												"value": "SQL",
												"type": "String"
											},
											"SourceFileDateStamp": {
												"value": "1",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Execute-DB-Load-Delta-Table",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "SP-Record-Manifest",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "04-DL-Load-Raw-to-Delta-Table",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"BatchLogID": {
												"value": "@pipeline().parameters.BatchLogId",
												"type": "Expression"
											},
											"TaskExecutionLogId": {
												"value": "@pipeline().parameters.TaskExecutionLogId",
												"type": "Expression"
											},
											"TaskDetails": {
												"value": "@pipeline().parameters.TaskDetails",
												"type": "Expression"
											},
											"TargetBLOBFolder": {
												"value": "@pipeline().parameters.TargetBLOBFolder",
												"type": "Expression"
											},
											"TargetBLOBName": {
												"value": "@pipeline().parameters.TargetBLOBName",
												"type": "Expression"
											},
											"ProjectRunID": {
												"value": "@pipeline().parameters.ProjectRunID",
												"type": "Expression"
											},
											"SourceFileName": "SQL",
											"SourceFileDateTimeStamp": "1"
										}
									}
								},
								{
									"name": "EP-Record-Validation",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Execute-DB-Load-Delta-Table",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "recon-record-validation",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ProjectRunID": {
												"value": "@pipeline().parameters.ProjectRunID",
												"type": "Expression"
											},
											"ValidationDetails": {
												"value": "@pipeline().parameters.ValidationDetails",
												"type": "Expression"
											},
											"SourceID": {
												"value": "@pipeline().parameters.TaskDetails.SourceID",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"BatchLogId": {
						"type": "int"
					},
					"TaskDetails": {
						"type": "object"
					},
					"TaskExecutionLogId": {
						"type": "securestring"
					},
					"SourceSQL": {
						"type": "string"
					},
					"TargetBLOBFolder": {
						"type": "string"
					},
					"TargetBLOBName": {
						"type": "string"
					},
					"ValidationDetails": {
						"type": "object"
					},
					"ProjectRunID": {
						"type": "string"
					}
				},
				"folder": {
					"name": "z_Archive"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SRC_SQLSERVER')]",
				"[concat(variables('factoryId'), '/datasets/RAW_ADLS_JSON_v2')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/pipelines/04-DL-Load-Raw-to-Delta-Table')]",
				"[concat(variables('factoryId'), '/pipelines/recon-record-validation')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/04-SQLServer-Generate-Source-Schema')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Generate Schema",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set-Schema",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Table",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-File",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "@replace(replace(variables('SQL'), '<<TABLE>>', variables('Table')), '<<SCHEMA>>', variables('Schema'))",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SRC_SQLSERVER",
								"type": "DatasetReference",
								"parameters": {
									"kvSecret": {
										"value": "@pipeline().parameters.TaskDetails.SourceServer",
										"type": "Expression"
									},
									"tableName": "erch",
									"schemaName": "dbo"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RAW_ADLS_Schema",
								"type": "DatasetReference",
								"parameters": {
									"BlobPath": {
										"value": "@variables('Folder')",
										"type": "Expression"
									},
									"BlobName": {
										"value": "@variables('File')",
										"type": "Expression"
									},
									"Compression": "none",
									"ColumnDelim": ",",
									"HeaderRow": false
								}
							}
						]
					},
					{
						"name": "Generate Schema Original",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Generate Schema",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "@replace(replace(variables('SQL-Original'), '<<TABLE>>', variables('Table')), '<<SCHEMA>>', variables('Schema'))",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SRC_SQLSERVER",
								"type": "DatasetReference",
								"parameters": {
									"kvSecret": {
										"value": "@pipeline().parameters.TaskDetails.SourceServer",
										"type": "Expression"
									},
									"tableName": "erch",
									"schemaName": "dbo"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RAW_ADLS_Schema",
								"type": "DatasetReference",
								"parameters": {
									"BlobPath": {
										"value": "@concat(variables('Folder'), '/original/')",
										"type": "Expression"
									},
									"BlobName": {
										"value": "@concat(variables('File'), '.csv')",
										"type": "Expression"
									},
									"Compression": "none",
									"ColumnDelim": ",",
									"HeaderRow": true
								}
							}
						]
					},
					{
						"name": "If-Empty-Delete",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Generate Schema Original",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Generate Schema').output.rowsCopied, 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete-Empty-File",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "BINARY_ADLS",
											"type": "DatasetReference",
											"parameters": {
												"File": {
													"value": "@variables('File')",
													"type": "Expression"
												},
												"Container": "raw",
												"Folder": {
													"value": "@variables('Folder')",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "LS_AzureDatalake",
												"type": "LinkedServiceReference"
											},
											"path": "log"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true
										}
									}
								}
							]
						}
					},
					{
						"name": "Set-Folder",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Folder",
							"value": {
								"value": "@toLower(concat(pipeline().parameters.TaskDetails.SourceGroup, '//', 'schema'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-File",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "File",
							"value": {
								"value": "@toLower(concat(pipeline().parameters.TaskDetails.SourceName, '.', 'schema'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Table",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Table",
							"value": {
								"value": "@split(pipeline().parameters.TaskDetails.SourceLocation,'.')[1]",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Schema",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Schema",
							"value": {
								"value": "@split(pipeline().parameters.TaskDetails.SourceLocation,'.')[0]",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TaskDetails": {
						"type": "object"
					}
				},
				"variables": {
					"Schema": {
						"type": "String"
					},
					"Table": {
						"type": "String"
					},
					"SQL": {
						"type": "String",
						"defaultValue": "SELECT column_name,     CASE \t\tWHEN data_type = 'bit' THEN 'boolean' \t\tWHEN data_type = 'bigint' THEN 'long' \t\tWHEN data_type IN ( 'int', 'smallint' ) THEN 'integer' \t\tWHEN data_type IN ( 'float', 'double', 'money', 'smallmoney' ) THEN 'double' \t\tWHEN data_type IN ( 'numeric' ) THEN 'decimal'  \t\tWHEN data_type IN ( 'nvarchar', 'varchar', 'char', 'nchar' ) THEN 'string' \t\tWHEN data_type IN ( 'date', 'datetime', 'datetime2', 'smalldatetime') THEN 'timestamp' \t\tELSE 'string'          \tEND AS fieldtype,     data_type,     COALESCE(datetime_precision, numeric_precision, character_maximum_length) precision,     numeric_scale scale, \ttable_name, \ttable_schema FROM information_schema.columns   WHERE table_name = '<<TABLE>>'          AND table_schema = '<<SCHEMA>>'  ORDER BY ORDINAL_POSITION"
					},
					"SQL-Original": {
						"type": "String",
						"defaultValue": "SELECT * FROM information_schema.columns WHERE table_name = '<<TABLE>>' AND table_schema = '<<SCHEMA>>'"
					},
					"Folder": {
						"type": "String"
					},
					"File": {
						"type": "String"
					}
				},
				"folder": {
					"name": "SQL Server"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SRC_SQLSERVER')]",
				"[concat(variables('factoryId'), '/datasets/RAW_ADLS_Schema')]",
				"[concat(variables('factoryId'), '/datasets/BINARY_ADLS')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/04-SQLServer-Generate-Source-Schema_Bak')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Generate Schema",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set-Schema",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Table",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-File",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "@replace(replace(variables('SQL'), '<<TABLE>>', variables('Table')), '<<SCHEMA>>', variables('Schema'))",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SRC_SQLSERVER",
								"type": "DatasetReference",
								"parameters": {
									"kvSecret": {
										"value": "@pipeline().parameters.TaskDetails.SourceServer",
										"type": "Expression"
									},
									"tableName": "erch",
									"schemaName": "dbo"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RAW_ADLS_Schema",
								"type": "DatasetReference",
								"parameters": {
									"BlobPath": {
										"value": "@variables('Folder')",
										"type": "Expression"
									},
									"BlobName": {
										"value": "@variables('File')",
										"type": "Expression"
									},
									"Compression": "none",
									"ColumnDelim": ",",
									"HeaderRow": false
								}
							}
						]
					},
					{
						"name": "Generate Schema Original",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Generate Schema",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "@replace(replace(variables('SQL-Original'), '<<TABLE>>', variables('Table')), '<<SCHEMA>>', variables('Schema'))",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SRC_SQLSERVER",
								"type": "DatasetReference",
								"parameters": {
									"kvSecret": {
										"value": "@pipeline().parameters.TaskDetails.SourceServer",
										"type": "Expression"
									},
									"tableName": "erch",
									"schemaName": "dbo"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RAW_ADLS_Schema",
								"type": "DatasetReference",
								"parameters": {
									"BlobPath": {
										"value": "@concat(variables('Folder'), '/original/')",
										"type": "Expression"
									},
									"BlobName": {
										"value": "@concat(variables('File'), '.csv')",
										"type": "Expression"
									},
									"Compression": "none",
									"ColumnDelim": ",",
									"HeaderRow": true
								}
							}
						]
					},
					{
						"name": "If-Empty-Delete",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Generate Schema Original",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Generate Schema').output.rowsCopied, 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete-Empty-File",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "BINARY_ADLS",
											"type": "DatasetReference",
											"parameters": {
												"File": {
													"value": "@variables('File')",
													"type": "Expression"
												},
												"Container": "raw",
												"Folder": {
													"value": "@variables('Folder')",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "LS_AzureDatalake",
												"type": "LinkedServiceReference"
											},
											"path": "log"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true
										}
									}
								}
							]
						}
					},
					{
						"name": "Set-Folder",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Folder",
							"value": {
								"value": "@toLower(concat(pipeline().parameters.TaskDetails.SourceGroup, '//', 'schema'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-File",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "File",
							"value": {
								"value": "@toLower(concat(pipeline().parameters.TaskDetails.SourceName, '.', 'schema'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Table",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Table",
							"value": {
								"value": "@split(pipeline().parameters.TaskDetails.SourceLocation,'.')[1]",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-Schema",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Schema",
							"value": {
								"value": "@split(pipeline().parameters.TaskDetails.SourceLocation,'.')[0]",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TaskDetails": {
						"type": "object"
					}
				},
				"variables": {
					"Schema": {
						"type": "String"
					},
					"Table": {
						"type": "String"
					},
					"SQL": {
						"type": "String",
						"defaultValue": "SELECT column_name,     CASE \t\tWHEN data_type = 'bit' THEN 'boolean' \t\tWHEN data_type = 'bigint' THEN 'long' \t\tWHEN data_type IN ( 'int', 'smallint' ) THEN 'integer' \t\tWHEN data_type IN ( 'float', 'double', 'money', 'smallmoney' ) THEN 'double' \t\tWHEN data_type IN ( 'numeric' ) THEN 'decimal'  \t\tWHEN data_type IN ( 'nvarchar', 'varchar', 'char', 'nchar' ) THEN 'string' \t\tWHEN data_type IN ( 'date', 'datetime', 'datetime2', 'smalldatetime') THEN 'timestamp' \t\tELSE 'string'          \tEND AS fieldtype,     data_type,     COALESCE(datetime_precision, numeric_precision, character_maximum_length) precision,     numeric_scale scale, \ttable_name, \ttable_schema FROM information_schema.columns   WHERE table_name = '<<TABLE>>'          AND table_schema = '<<SCHEMA>>'  ORDER BY ORDINAL_POSITION"
					},
					"SQL-Original": {
						"type": "String",
						"defaultValue": "SELECT * FROM information_schema.columns WHERE table_name = '<<TABLE>>' AND table_schema = '<<SCHEMA>>'"
					},
					"Folder": {
						"type": "String"
					},
					"File": {
						"type": "String"
					}
				},
				"folder": {
					"name": "z_Archive"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SRC_SQLSERVER')]",
				"[concat(variables('factoryId'), '/datasets/RAW_ADLS_Schema')]",
				"[concat(variables('factoryId'), '/datasets/BINARY_ADLS')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/05-DL-Load-Cleansed-to-Curated')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Log Failure DL Curated",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SwitchCluster",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[CTL].[UpdateTaskLog]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": "Error Occurred during Curated Zone load",
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": null
								},
								"Status": {
									"value": "Failure",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Log Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SwitchCluster",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[CTL].[UpdateTaskLog]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.LastLoadedFile",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "Success",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set-ClusterType",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ClusterType",
							"value": {
								"value": "@toLower(last(split(pipeline().parameters.TaskDetails.Processor,'|')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SwitchCluster",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "Set-ClusterType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@variables('ClusterType')",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "clusterpool",
									"activities": [
										{
											"name": "Load-To-Curated-Zone-ClusterPool",
											"type": "DatabricksNotebook",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"notebookPath": {
													"value": "@pipeline().parameters.TaskDetails.Command",
													"type": "Expression"
												}
											},
											"linkedServiceName": {
												"referenceName": "LS_AzureDatabricks_InstancePool",
												"type": "LinkedServiceReference",
												"parameters": {
													"kvSecret": {
														"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
														"type": "Expression"
													},
													"PoolId": {
														"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[1]",
														"type": "Expression"
													},
													"DatabricksVersion": {
														"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[3]",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "jobcluster",
									"activities": [
										{
											"name": "Load-To-Curated-Zone-Job",
											"type": "DatabricksNotebook",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"notebookPath": {
													"value": "@pipeline().parameters.TaskDetails.Command",
													"type": "Expression"
												}
											},
											"linkedServiceName": {
												"referenceName": "LS-AzureDatabricks_JobCluster",
												"type": "LinkedServiceReference",
												"parameters": {
													"kvSecret": {
														"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
														"type": "Expression"
													},
													"DataBricksClusterType": {
														"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[2]",
														"type": "Expression"
													},
													"DataBricksClusterVersion": {
														"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[3]",
														"type": "Expression"
													},
													"DataBricksWorkerNodes": {
														"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[4]",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "interactive",
									"activities": [
										{
											"name": "Load-To-Curated-Zone-Interactive",
											"type": "DatabricksNotebook",
											"dependsOn": [],
											"policy": {
												"timeout": "0.02:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"notebookPath": {
													"value": "@pipeline().parameters.TaskDetails.Command",
													"type": "Expression"
												}
											},
											"linkedServiceName": {
												"referenceName": "LS-AzureDatabricks_DefinedCluster",
												"type": "LinkedServiceReference",
												"parameters": {
													"kvSecret": {
														"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
														"type": "Expression"
													},
													"clusterId": {
														"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[1]",
														"type": "Expression"
													}
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Set-RunBusinessRecon",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Log Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunBusinessRecon",
							"value": {
								"value": "@if(or(equals(toLower(last(split(pipeline().parameters.TaskDetails.Command,'/'))), 'billedwaterconsumption'), equals(toLower(last(split(pipeline().parameters.TaskDetails.Command,'/'))), 'billedwaterconsumptiondaily')), 'yes', 'no')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If-RunBusinessRecon",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set-RunBusinessRecon",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('RunBusinessRecon'), 'yes')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Business-Reconciliation",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Business-Reconciliation",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"BatchLogId": {
												"value": "@pipeline().parameters.BatchLogId",
												"type": "Expression"
											},
											"TaskExecutionLogId": {
												"value": "@pipeline().parameters.TaskExecutionLogId",
												"type": "Expression"
											},
											"ProjectRunId": {
												"value": "@pipeline().parameters.ProjectRunID",
												"type": "Expression"
											},
											"BusinessReconGroup": "Water Consumption Reconciliation",
											"TaskDetails": {
												"value": "@pipeline().parameters.TaskDetails",
												"type": "Expression"
											},
											"TargetObject": {
												"value": "@last(split(pipeline().parameters.TaskDetails.Command,'/'))",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TaskDetails": {
						"type": "object"
					},
					"BatchLogId": {
						"type": "int",
						"defaultValue": 1
					},
					"TaskExecutionLogId": {
						"type": "int",
						"defaultValue": 1
					},
					"ProjectRunID": {
						"type": "string"
					}
				},
				"variables": {
					"ReturnValue": {
						"type": "String"
					},
					"ClusterType": {
						"type": "String",
						"defaultValue": "interactive"
					},
					"SourceContainer": {
						"type": "String",
						"defaultValue": "cleansed"
					},
					"SourceDirectory": {
						"type": "String"
					},
					"SourceFileName": {
						"type": "String"
					},
					"TargetContainer": {
						"type": "String",
						"defaultValue": "curated"
					},
					"TargetDirectory": {
						"type": "String"
					},
					"TargetFileName": {
						"type": "String"
					},
					"RunBusinessRecon": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Data Lake"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-21T11:04:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/pipelines/Business-Reconciliation')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatabricks_InstancePool')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureDatabricks_JobCluster')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureDatabricks_DefinedCluster')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/05-DL-Load-Raw-to-Cleansed')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LU-Manifest",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[CTL].[GetManifestCleansed]",
								"storedProcedureParameters": {
									"SourceObject": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TaskDetails.SourceName",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabase_Ctrldb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Loop Manifest",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LU-Manifest",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LU-Manifest').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SP-Update-Manifest-DL-Cleansed",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "SwitchCluster",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[UpdateManifestDLCleansed]",
										"storedProcedureParameters": {
											"BatchExecutionLogID": {
												"value": {
													"value": "@item().BatchExecutionLogID",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"SourceObject": {
												"value": {
													"value": "@item().SourceObject",
													"type": "Expression"
												},
												"type": "String"
											},
											"StartCounter": {
												"value": {
													"value": "@item().StartCounter",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineRunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Set-ClusterType",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "ClusterType",
										"value": {
											"value": "@toLower(last(split(pipeline().parameters.TaskDetails.Processor,'|')))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SwitchCluster",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "Set-ClusterType",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@variables('ClusterType')",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "clusterpool",
												"activities": [
													{
														"name": "Set-ReturnValue-Pool",
														"type": "SetVariable",
														"dependsOn": [
															{
																"activity": "Load-To-Cleansed-Zone-ClusterPool",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"variableName": "ReturnValue",
															"value": {
																"value": "@string(activity('Load-To-Cleansed-Zone-ClusterPool').output.runOutput)",
																"type": "Expression"
															}
														}
													},
													{
														"name": "Load-To-Cleansed-Zone-ClusterPool",
														"type": "DatabricksNotebook",
														"dependsOn": [],
														"policy": {
															"timeout": "0.02:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"notebookPath": {
																"value": "@pipeline().parameters.TaskDetails.Command",
																"type": "Expression"
															},
															"baseParameters": {
																"source_object": {
																	"value": "@pipeline().parameters.TaskDetails.SourceName",
																	"type": "Expression"
																},
																"start_counter": {
																	"value": "@item().StartCounter",
																	"type": "Expression"
																},
																"end_counter": {
																	"value": "@item().EndCounter",
																	"type": "Expression"
																},
																"delta_column": {
																	"value": "@item().DeltaColumn",
																	"type": "Expression"
																},
																"source_param": {
																	"value": "@string(pipeline().parameters.TaskDetails)",
																	"type": "Expression"
																}
															},
															"libraries": [
																{
																	"maven": {
																		"coordinates": "com.microsoft.azure:azure-sqldb-spark:1.0.2"
																	}
																}
															]
														},
														"linkedServiceName": {
															"referenceName": "LS_AzureDatabricks_InstancePool",
															"type": "LinkedServiceReference",
															"parameters": {
																"kvSecret": {
																	"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
																	"type": "Expression"
																},
																"PoolId": {
																	"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[1]",
																	"type": "Expression"
																},
																"DatabricksVersion": {
																	"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[3]",
																	"type": "Expression"
																}
															}
														}
													}
												]
											},
											{
												"value": "jobcluster",
												"activities": [
													{
														"name": "Set-ReturnValue-JobCluster",
														"type": "SetVariable",
														"dependsOn": [
															{
																"activity": "Load-To-Cleansed-Zone-JobCluster",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"variableName": "ReturnValue",
															"value": {
																"value": "@string(activity('Load-To-Cleansed-Zone-JobCluster').output.runOutput)",
																"type": "Expression"
															}
														}
													},
													{
														"name": "Load-To-Cleansed-Zone-JobCluster",
														"type": "DatabricksNotebook",
														"dependsOn": [],
														"policy": {
															"timeout": "0.02:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"notebookPath": {
																"value": "@pipeline().parameters.TaskDetails.Command",
																"type": "Expression"
															},
															"baseParameters": {
																"source_object": {
																	"value": "@pipeline().parameters.TaskDetails.SourceName",
																	"type": "Expression"
																},
																"start_counter": {
																	"value": "@item().StartCounter",
																	"type": "Expression"
																},
																"end_counter": {
																	"value": "@item().EndCounter",
																	"type": "Expression"
																},
																"delta_column": {
																	"value": "@item().DeltaColumn",
																	"type": "Expression"
																},
																"source_param": {
																	"value": "@string(pipeline().parameters.TaskDetails)",
																	"type": "Expression"
																}
															},
															"libraries": [
																{
																	"maven": {
																		"coordinates": "com.microsoft.azure:azure-sqldb-spark:1.0.2"
																	}
																}
															]
														},
														"linkedServiceName": {
															"referenceName": "LS-AzureDatabricks_JobCluster",
															"type": "LinkedServiceReference",
															"parameters": {
																"kvSecret": {
																	"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
																	"type": "Expression"
																},
																"DataBricksClusterType": {
																	"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[2]",
																	"type": "Expression"
																},
																"DataBricksClusterVersion": {
																	"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[3]",
																	"type": "Expression"
																},
																"DataBricksWorkerNodes": {
																	"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[4]",
																	"type": "Expression"
																}
															}
														}
													}
												]
											},
											{
												"value": "interactive",
												"activities": [
													{
														"name": "Set-Return-Interactive",
														"type": "SetVariable",
														"dependsOn": [
															{
																"activity": "Load-To-Cleansed-Zone-Interactive",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"variableName": "ReturnValue",
															"value": {
																"value": "@string(activity('Load-To-Cleansed-Zone-Interactive').output.runOutput)",
																"type": "Expression"
															}
														}
													},
													{
														"name": "Load-To-Cleansed-Zone-Interactive",
														"type": "DatabricksNotebook",
														"dependsOn": [],
														"policy": {
															"timeout": "0.02:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"notebookPath": {
																"value": "@pipeline().parameters.TaskDetails.Command",
																"type": "Expression"
															},
															"baseParameters": {
																"source_object": {
																	"value": "@pipeline().parameters.TaskDetails.SourceName",
																	"type": "Expression"
																},
																"start_counter": {
																	"value": "@item().StartCounter",
																	"type": "Expression"
																},
																"end_counter": {
																	"value": "@item().EndCounter",
																	"type": "Expression"
																},
																"delta_column": {
																	"value": "@pipeline().parameters.TaskDetails.WatermarkColumn",
																	"type": "Expression"
																},
																"source_param": {
																	"value": "@string(pipeline().parameters.TaskDetails)",
																	"type": "Expression"
																}
															},
															"libraries": [
																{
																	"maven": {
																		"coordinates": "com.microsoft.azure:azure-sqldb-spark:1.0.2"
																	}
																}
															]
														},
														"linkedServiceName": {
															"referenceName": "LS-AzureDatabricks_DefinedCluster",
															"type": "LinkedServiceReference",
															"parameters": {
																"kvSecret": {
																	"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
																	"type": "Expression"
																},
																"clusterId": {
																	"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[1]",
																	"type": "Expression"
																}
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Log Failure DL Cleansed",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Loop Manifest",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[CTL].[UpdateTaskLog]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": "Error Occurred during Trusted Zone load",
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": null
								},
								"Status": {
									"value": "Failure",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Log Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "If Tech Reconciliation Required",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[CTL].[UpdateTaskLog]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.LastLoadedFile",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "Success",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "If Tech Reconciliation Required",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Loop Manifest",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(and(equals(pipeline().parameters.TaskDetails.SourceType,'BLOB Storage (json)'),equals(pipeline().parameters.TaskDetails.ControlStageId,2)),greater(activity('LU-Manifest').output.count,0))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute-Technical-Reconciliation",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Technical-Reconciliation",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"TaskDetails": {
												"value": "@pipeline().parameters.TaskDetails",
												"type": "Expression"
											},
											"BatchLogId": {
												"value": "@pipeline().parameters.BatchLogId",
												"type": "Expression"
											},
											"TaskExecutionLogId": {
												"value": "@pipeline().parameters.TaskExecutionLogId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Log Failure Tech Rec",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Execute-Technical-Reconciliation",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[UpdateTaskLog]",
										"storedProcedureParameters": {
											"BatchLogId": {
												"value": {
													"value": "@pipeline().parameters.BatchLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"TaskId": {
												"value": {
													"value": "@pipeline().parameters.TaskDetails.TaskId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"ExecutionLogId": {
												"value": {
													"value": "@pipeline().parameters.TaskExecutionLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Status": {
												"value": "Failure",
												"type": "String"
											},
											"ErrorMessage": {
												"value": "Error Occurred during Cleansed Zone load technical reconciliation",
												"type": "String"
											},
											"Output": {
												"value": null
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TaskDetails": {
						"type": "object"
					},
					"BatchLogId": {
						"type": "int"
					},
					"TaskExecutionLogId": {
						"type": "int"
					},
					"ProjectRunID": {
						"type": "string"
					}
				},
				"variables": {
					"ReturnValue": {
						"type": "String"
					},
					"ClusterType": {
						"type": "String"
					},
					"SourceContainer": {
						"type": "String",
						"defaultValue": "raw"
					},
					"SourceDirectory": {
						"type": "String"
					},
					"SourceFileName": {
						"type": "String"
					},
					"TargetContainer": {
						"type": "String",
						"defaultValue": "cleansed"
					},
					"TargetDirectory": {
						"type": "String"
					},
					"TargetFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Data Lake"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-21T11:04:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/pipelines/Technical-Reconciliation')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatabricks_InstancePool')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureDatabricks_JobCluster')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureDatabricks_DefinedCluster')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/05-DL-Load-Raw-to-Cleansed_Bak')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Log Failure DL Cleansed",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "If-ClusterType",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[CTL].[UpdateTaskLog]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": "Error Occurred during Trusted Zone load",
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": null
								},
								"Status": {
									"value": "Failure",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {}
						}
					},
					{
						"name": "Log Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "If-ClusterType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[CTL].[UpdateTaskLog]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"BatchLogId": {
									"value": {
										"value": "@pipeline().parameters.BatchLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"ExecutionLogId": {
									"value": {
										"value": "@pipeline().parameters.TaskExecutionLogId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Output": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.LastLoadedFile",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "Success",
									"type": "String"
								},
								"TaskId": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.TaskId",
										"type": "Expression"
									},
									"type": "Int64"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference",
							"parameters": {}
						}
					},
					{
						"name": "Set-ClusterType",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ClusterType",
							"value": {
								"value": "@toLower(last(split(pipeline().parameters.TaskDetails.Processor,'|')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If-ClusterType",
						"description": "",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set-ClusterType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('ClusterType'), 'interactive')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Load-To-Cleansed-Zone-Job",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": {
											"value": "@pipeline().parameters.TaskDetails.Command",
											"type": "Expression"
										},
										"baseParameters": {
											"source_object": {
												"value": "@pipeline().parameters.TaskDetails.SourceName",
												"type": "Expression"
											},
											"source_param": {
												"value": "@string(pipeline().parameters.TaskDetails)",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureDatabricks_JobCluster",
										"type": "LinkedServiceReference",
										"parameters": {
											"kvSecret": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
												"type": "Expression"
											},
											"DataBricksClusterType": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[2]",
												"type": "Expression"
											},
											"DataBricksClusterVersion": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[3]",
												"type": "Expression"
											},
											"DataBricksWorkerNodes": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[4]",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "LoadToCleansed-Zone-Interactive",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": {
											"value": "@pipeline().parameters.TaskDetails.Command",
											"type": "Expression"
										},
										"baseParameters": {
											"source_object": {
												"value": "@pipeline().parameters.TaskDetails.SourceName",
												"type": "Expression"
											},
											"source_param": {
												"value": "@string(pipeline().parameters.TaskDetails)",
												"type": "Expression"
											},
											"delta_column": {
												"value": "@pipeline().parameters.TaskDetails.WatermarkColumn",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureDatabricks_DefinedCluster",
										"type": "LinkedServiceReference",
										"parameters": {
											"kvSecret": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
												"type": "Expression"
											},
											"clusterId": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[1]",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TaskDetails": {
						"type": "object"
					},
					"BatchLogId": {
						"type": "int"
					},
					"TaskExecutionLogId": {
						"type": "int"
					},
					"ProjectRunID": {
						"type": "string"
					}
				},
				"variables": {
					"ReturnValue": {
						"type": "String"
					},
					"ClusterType": {
						"type": "String"
					},
					"SourceContainer": {
						"type": "String",
						"defaultValue": "raw"
					},
					"SourceDirectory": {
						"type": "String"
					},
					"SourceFileName": {
						"type": "String"
					},
					"TargetContainer": {
						"type": "String",
						"defaultValue": "trusted"
					},
					"TargetDirectory": {
						"type": "String"
					},
					"TargetFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "z_Archive"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-21T11:04:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureDatabricks_JobCluster')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureDatabricks_DefinedCluster')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Business-Reconciliation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Business Recon Queries",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[CTL].[GetBusinessRecCurated]",
								"storedProcedureParameters": {
									"BusinessReconGroup": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.BusinessReconGroup",
											"type": "Expression"
										}
									},
									"TargetObject": {
										"type": "String",
										"value": {
											"value": "@last(split(pipeline().parameters.TaskDetails.Command,'/'))",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabase_Ctrldb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Business Rec",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Business Recon Queries",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Business Recon Queries').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "SP-Update-Business-Rec-Curated",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Notebook-GetDeltaTableRecordTargetMeasure-Interactive",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[UpdateBusinessRecCurated]",
										"storedProcedureParameters": {
											"TargetMeasureValue": {
												"value": {
													"value": "@activity('Notebook-GetDeltaTableRecordTargetMeasure-Interactive').output.runOutput",
													"type": "Expression"
												},
												"type": "Decimal"
											},
											"BusinessRecId": {
												"value": {
													"value": "@item().BusinessRecId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"UpdatedBatchExecutionId": {
												"value": {
													"value": "@pipeline().parameters.BatchLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"UpdatedTaskExecutionLogId": {
												"value": {
													"value": "@pipeline().parameters.TaskExecutionLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"CuratedPipelineRunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"UpdatedDateTime": {
												"value": {
													"value": "@convertFromUtc(getFutureTime(0,'Day'),'AUS Eastern Standard Time')",
													"type": "Expression"
												},
												"type": "Datetime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Notebook-GetDeltaTableRecordTargetMeasure-Interactive",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": {
											"value": "@variables('NotebookURL')",
											"type": "Expression"
										},
										"baseParameters": {
											"target_query": {
												"value": "@item().TargetQuery",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureDatabricks_DefinedCluster",
										"type": "LinkedServiceReference",
										"parameters": {
											"kvSecret": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
												"type": "Expression"
											},
											"clusterId": {
												"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[1]",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Delete-Trigger-File",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "ForEach Business Rec",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "RAW_ADLS_JSON_v2_NOCOMP",
								"type": "DatasetReference",
								"parameters": {
									"BlobPath": "triggers",
									"BlobName": "trigger_batch_daily_sapslt.json"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"BatchLogId": {
						"type": "int",
						"defaultValue": 1
					},
					"TaskExecutionLogId": {
						"type": "int",
						"defaultValue": 2
					},
					"ProjectRunId": {
						"type": "string"
					},
					"WatermarkValue": {
						"type": "string"
					},
					"BusinessReconGroup": {
						"type": "string",
						"defaultValue": "Water Consumption Reconciliation"
					},
					"MeasureName": {
						"type": "string",
						"defaultValue": "Billing Document Count"
					},
					"TaskDetails": {
						"type": "object"
					},
					"TargetObject": {
						"type": "string"
					}
				},
				"variables": {
					"TargetQuery": {
						"type": "String"
					},
					"NotebookURL": {
						"type": "String",
						"defaultValue": "/build/curated/utility/getDeltaTableRecordTargetMeasure"
					}
				},
				"folder": {
					"name": "Validation"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/datasets/RAW_ADLS_JSON_v2_NOCOMP')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureDatabricks_DefinedCluster')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Business-Reconciliation_Bak')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Business Recon Queries",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[CTL].[GetBusinessRecCurated]",
								"storedProcedureParameters": {
									"BusinessReconGroup": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.BusinessReconGroup",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabase_Ctrldb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Business Rec",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Business Recon Queries",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Business Recon Queries').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy-DeltaLake-RecordMeasure",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set Bus Rec Query",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureDatabricksDeltaLakeSource",
											"query": {
												"value": "@variables('TargetQuery')",
												"type": "Expression"
											},
											"exportSettings": {
												"type": "AzureDatabricksDeltaLakeExportCommand"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": "truncate table ctl.BusinessRecStage",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "LS_AzureDatalake",
												"type": "LinkedServiceReference"
											},
											"path": "raw/landing/isu_data",
											"enableCompression": false
										},
										"parallelCopies": 32,
										"dataIntegrationUnits": 8
									},
									"inputs": [
										{
											"referenceName": "DS_CURATED_ADLS_DELTALAKE",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "curated.dimdate"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSqlDatabase_Ctrl_db_businessrecstage",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Set Bus Rec Query",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "TargetQuery",
										"value": {
											"value": "@item().TargetQuery",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup_copy_rec",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Copy-DeltaLake-RecordMeasure",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "AzureSqlDatabase_Ctrl_db_businessrecstage",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "SP-Update-Business-Rec-Curated",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Lookup_copy_rec",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[UpdateBusinessRecCurated]",
										"storedProcedureParameters": {
											"TargetMeasureValue": {
												"value": {
													"value": "@activity('Lookup_copy_rec').output.firstRow.TargetMeasure",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"BusinessRecId": {
												"value": {
													"value": "@item().BusinessRecId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"UpdatedBatchExecutionId": {
												"value": {
													"value": "@pipeline().parameters.BatchLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"UpdatedTaskExecutionLogId": {
												"value": {
													"value": "@pipeline().parameters.TaskExecutionLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"CuratedPipelineRunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"UpdatedDateTime": {
												"value": {
													"value": "@convertFromUtc(getFutureTime(0,'Day'),'AUS Eastern Standard Time')",
													"type": "Expression"
												},
												"type": "Datetime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Delete-Trigger-File",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "ForEach Business Rec",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "RAW_ADLS_JSON_v2_NOCOMP",
								"type": "DatasetReference",
								"parameters": {
									"BlobPath": "triggers",
									"BlobName": "trigger_batch_daily_sapslt.json"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"BatchLogId": {
						"type": "int",
						"defaultValue": 1
					},
					"TaskExecutionLogId": {
						"type": "int",
						"defaultValue": 2
					},
					"ProjectRunId": {
						"type": "string"
					},
					"WatermarkValue": {
						"type": "string"
					},
					"BusinessReconGroup": {
						"type": "string",
						"defaultValue": "Water Consumption Reconciliation"
					},
					"MeasureName": {
						"type": "string",
						"defaultValue": "Billing Document Count"
					}
				},
				"variables": {
					"TargetQuery": {
						"type": "String"
					}
				},
				"folder": {
					"name": "z_Archive"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/datasets/RAW_ADLS_JSON_v2_NOCOMP')]",
				"[concat(variables('factoryId'), '/datasets/DS_CURATED_ADLS_DELTALAKE')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlDatabase_Ctrl_db_businessrecstage')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Curated-Parallel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "for-each-curated",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@array(pipeline().parameters.taskList)",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 4,
							"activities": [
								{
									"name": "execute-curated",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Curated",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"task": {
												"value": "@item()",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"taskList": {
						"type": "object"
					}
				},
				"variables": {
					"var1": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MDP-Framework/Zone"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Curated')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Curated')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "switch-processor",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "log-status-start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.task.ProcessorType",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "databricks-notebook",
									"activities": [
										{
											"name": "curated-databricks",
											"type": "DatabricksNotebook",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"notebookPath": {
													"value": "/ELT-Framework/@{pipeline().parameters.task.Command}",
													"type": "Expression"
												},
												"baseParameters": {
													"task": {
														"value": "@{pipeline().parameters.task}",
														"type": "Expression"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "LS-AzureDatabricks_DefinedCluster",
												"type": "LinkedServiceReference",
												"parameters": {
													"kvSecret": "databricks-token",
													"clusterId": "1103-023442-me8nqcm9"
												}
											}
										},
										{
											"name": "log-databricks",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "curated-databricks",
													"dependencyConditions": [
														"Completed"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "log-message",
													"type": "PipelineReference"
												},
												"waitOnCompletion": false,
												"parameters": {
													"ID": {
														"value": "@pipeline().parameters.task.ID",
														"type": "Expression"
													},
													"ActivityType": "curated-databricks",
													"Message": {
														"value": "@{activity('curated-databricks')}",
														"type": "Expression"
													},
													"IsTransform": true
												}
											}
										},
										{
											"name": "set-properties",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "curated-databricks",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RunOutputProperties",
												"value": {
													"value": "@string(activity('curated-databricks').output.runOutput.Counts)",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "synapse-stored-procedure",
									"activities": [
										{
											"name": "log-databricks_copy-synapse",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "synapse-stored-procedure",
													"dependencyConditions": [
														"Completed"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "log-message",
													"type": "PipelineReference"
												},
												"waitOnCompletion": false,
												"parameters": {
													"ID": {
														"value": "@pipeline().parameters.task.ID",
														"type": "Expression"
													},
													"ActivityType": "curated-databricks",
													"Message": {
														"value": "@{activity('synapse-stored-procedure')}",
														"type": "Expression"
													},
													"IsTransform": true
												}
											}
										},
										{
											"name": "set-properties_synapse",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "synapse-stored-procedure",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RunOutputProperties",
												"value": {
													"value": "@string(activity('synapse-stored-procedure').output.firstRow.JsonOutput)",
													"type": "Expression"
												}
											}
										},
										{
											"name": "synapse-stored-procedure",
											"type": "Lookup",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"sqlReaderStoredProcedureName": {
														"value": "@{pipeline().parameters.task.Command}",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"dataset": {
													"referenceName": "SQL_Server",
													"type": "DatasetReference",
													"parameters": {
														"kvSecret": {
															"value": "@{pipeline().parameters.task.TargetKeyVaultSecret}",
															"type": "Expression"
														}
													}
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "log-status-start",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-status-update",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"Property": "StartDTS",
								"Value": {
									"value": "@formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'yyyy-MM-dd HH:mm:ss')",
									"type": "Expression"
								},
								"TableName": "TransformStatus"
							}
						}
					},
					{
						"name": "log-status-end",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "switch-processor",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-status-update",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"Property": "EndDTS",
								"Value": {
									"value": "@formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'yyyy-MM-dd HH:mm:ss')",
									"type": "Expression"
								},
								"TableName": "TransformStatus"
							}
						}
					},
					{
						"name": "log-status-fail",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "switch-processor",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-status-update",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"Property": "Status",
								"Value": "Failed",
								"TableName": "TransformStatus"
							}
						}
					},
					{
						"name": "log-status-success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "switch-processor",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-status-update",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"Property": "Status",
								"Value": "Success",
								"TableName": "TransformStatus"
							}
						}
					},
					{
						"name": "for-each-property",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "switch-processor",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@split(replace(replace(\nvariables('RunOutputProperties')\n, '}', '')\n, '{', '')\n, ',')",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "log-property",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "log-status-update",
											"type": "PipelineReference"
										},
										"waitOnCompletion": false,
										"parameters": {
											"ID": {
												"value": "@pipeline().parameters.task.ID",
												"type": "Expression"
											},
											"Property": {
												"value": "@replace(split(item(), ':')[0], '\"', '')",
												"type": "Expression"
											},
											"Value": {
												"value": "@split(item(), ':')[1]",
												"type": "Expression"
											},
											"TableName": "TransformStatus"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"task": {
						"type": "object"
					}
				},
				"variables": {
					"RunOutputProperties": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MDP-Framework/Zone"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/log-status-update')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureDatabricks_DefinedCluster')]",
				"[concat(variables('factoryId'), '/pipelines/log-message')]",
				"[concat(variables('factoryId'), '/datasets/SQL_Server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GetSchemaFromOracle')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetSchemaFromMaximo",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT \n    obj.object_name, \n    atc.column_name, \n    atc.data_type, \n    atc.data_length \nFROM \n    all_tab_columns atc,\n    (SELECT \n        * \n     FROM \n         all_objects\n     WHERE \n      --  object_name like 'GL_JE%'\n        -- owner = 'maximo'\n         object_type in ('TABLE','VIEW')   \n    ) obj\nWHERE \n    atc.table_name = obj.object_name\nORDER BY \n    obj.object_name, \n    atc.column_name;",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "OBJECT_NAME"
										},
										"sink": {
											"name": "OBJECT_NAME",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "COLUMN_NAME"
										},
										"sink": {
											"name": "COLUMN_NAME",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DATA_TYPE"
										},
										"sink": {
											"name": "DATA_TYPE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DATA_LENGTH"
										},
										"sink": {
											"name": "DATA_LENGTH",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SRC_Oracle",
								"type": "DatasetReference",
								"parameters": {
									"kvSecret": "daf-oracle-Maximo-connectionstring"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "MDP-Framework/Setup"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SRC_Oracle')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/JsonFileSplitTest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy-Blob-Raw-Json-Test",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SRC_BLOB_JSON_copy1",
								"type": "DatasetReference",
								"parameters": {
									"BlobName": "0COMP_CODE_TEXT_20210826164331.json"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RAW_ADLS_JSON_v2",
								"type": "DatasetReference",
								"parameters": {
									"BlobPath": "sapisu/0comp_code_text/json/year=2021/month=08/day=26/",
									"BlobName": "0COMP_CODE_TEXT_2021-08-26_164331_987.json"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "z_Archive/Test"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SRC_BLOB_JSON_copy1')]",
				"[concat(variables('factoryId'), '/datasets/RAW_ADLS_JSON_v2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get-extract-load",
						"description": " ",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "set-parent-batch",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DECLARE @SystemCodes VARCHAR(50) = '@{pipeline().parameters.SystemCodes}';\nWITH [_SystemCodes] AS (\n\tSELECT DISTINCT TRIM(value) [SystemCode] FROM STRING_SPLIT(IIF(LEN(TRIM(@SystemCodes))=0, NULL, @SystemCodes), ',')\n)\nSELECT \nDISTINCT\nLEFT([SourceID], 2) [Order], M.[SystemCode]\nFROM [dbo].[ExtractLoadManifest] M\nJOIN [_SystemCodes] C ON C.[SystemCode] = M.[SystemCode] \nWHERE [Enabled] = 1 \nUNION \nSELECT \nDISTINCT\nLEFT([SourceID], 2) [Order], M.[SystemCode]\nFROM [dbo].[ExtractLoadManifest] M\nWHERE [Enabled] = 1 AND (SELECT COUNT(*) FROM [_SystemCodes]) = 0\nORDER BY 1",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQL_ControlDB",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "for-each-source",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get-extract-load",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get-extract-load').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 4,
							"activities": [
								{
									"name": "execute-system",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "System",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SystemCode": {
												"value": "@item().SystemCode",
												"type": "Expression"
											},
											"ParentBatchID": {
												"value": "@variables('ParentBatchID')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "set-parent-batch",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ParentBatchID",
							"value": {
								"value": "@substring(pipeline().GroupId, 0,8)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "if-transform",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "for-each-source",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "set-transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('Transform')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "execute-transform",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Transform",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ParentBatchID": {
												"value": "@variables('ParentBatchID')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "get-transform-default",
						"description": " ",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT COALESCE((SELECT [Value] FROM [dbo].[Config] WHERE [KeyGroup] = 'LoadDefault' AND [Key] = 'Transform'), 0) [TransformDefault]",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQL_ControlDB",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "set-transform",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "get-transform-default",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Transform",
							"value": {
								"value": "@bool(activity('get-transform-default').output.value[0].TransformDefault)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SystemCodes": {
						"type": "string"
					}
				},
				"variables": {
					"SystemCode": {
						"type": "String"
					},
					"ParentBatchID": {
						"type": "String"
					},
					"Transform": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "MDP-Framework"
				},
				"annotations": [],
				"lastPublishTime": "2021-07-08T02:50:54Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SQL_ControlDB')]",
				"[concat(variables('factoryId'), '/pipelines/System')]",
				"[concat(variables('factoryId'), '/pipelines/Transform')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Raw')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "switch-source-handler",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "log-status-start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@split(pipeline().parameters.task.SourceHandler, '/')[0]",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "sql-load",
									"activities": [
										{
											"name": "execute-sql-load",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "sql-load",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"task": {
														"value": "@pipeline().parameters.task",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "csv-load",
									"activities": [
										{
											"name": "execute-csv-load",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "csv-load",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"TaskDetails": {
														"value": "@pipeline().parameters.task",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "file-binary-load",
									"activities": [
										{
											"name": "execute-file-binary-load",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "file-binary-load",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"task": {
														"value": "@pipeline().parameters.task",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "blob-folder-load",
									"activities": [
										{
											"name": "execute-blob-folder-load",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "blob-folder-load",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"task": {
														"value": "@pipeline().parameters.task",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "qualtrics-load",
									"activities": [
										{
											"name": "execute-qualtrics-load",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "qualtrics-load",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"task": {
														"value": "@pipeline().parameters.task",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "qualtrics-responses-load",
									"activities": [
										{
											"name": "execute-qualtrics-responses-load",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "qualtircs-responses-load",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"task": {
														"value": "@pipeline().parameters.task",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "http-binary-load",
									"activities": [
										{
											"name": "execute-http-binary-load",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "http-binary-load",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"task": {
														"value": "@pipeline().parameters.task",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "oracle-load",
									"activities": [
										{
											"name": "execute-oracle-load",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "oracle-load",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"task": {
														"value": "@pipeline().parameters.task",
														"type": "Expression"
													}
												}
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "no-handler-found",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "'No handler found @{split(pipeline().parameters.task.SourceHandler, '/')[0]}!'",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							]
						}
					},
					{
						"name": "if-raw-handler",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "switch-source-handler",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(empty(pipeline().parameters.task.RawHandler))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "raw-databricks",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "task-status",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": {
											"value": "/MDP-Framework/Zone/@{pipeline().parameters.task.RawHandler}",
											"type": "Expression"
										},
										"baseParameters": {
											"rawPath": {
												"value": "@activity('task-status').output.firstRow.RawPath",
												"type": "Expression"
											},
											"task": {
												"value": "@{pipeline().parameters.task}",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureDatabricks_DefinedCluster",
										"type": "LinkedServiceReference",
										"parameters": {
											"kvSecret": "databricks-token",
											"clusterId": "0517-025528-mkzhqnk1"
										}
									}
								},
								{
									"name": "task-status",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT * FROM [dbo].[ExtractLoadStatus] WHERE [BatchID] = '@{pipeline().parameters.task.BatchID}' AND [SourceID] = '@{pipeline().parameters.task.SourceID}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQL_ControlDB",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "log-databricks",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "raw-databricks",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "log-message",
											"type": "PipelineReference"
										},
										"waitOnCompletion": false,
										"parameters": {
											"ID": {
												"value": "@pipeline().parameters.task.ID",
												"type": "Expression"
											},
											"ActivityType": "raw-databricks",
											"Message": {
												"value": "@{activity('raw-databricks')}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "raw-databricks-fail",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "raw-databricks",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw-databricks').output.Error",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							]
						}
					},
					{
						"name": "log-status-start",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-status-update",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"Property": "RawStartDTS",
								"Value": {
									"value": "@formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'yyyy-MM-dd HH:mm:ss')",
									"type": "Expression"
								},
								"TableName": "ExtractLoadStatus"
							}
						}
					},
					{
						"name": "log-status-end",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "if-raw-handler",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-status-update",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"Property": "RawEndDTS",
								"Value": {
									"value": "@formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'yyyy-MM-dd HH:mm:ss')",
									"type": "Expression"
								},
								"TableName": "ExtractLoadStatus"
							}
						}
					},
					{
						"name": "log-status-fail",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "if-raw-handler",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-status-update",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"Property": "RawStatus",
								"Value": "Fail",
								"TableName": "ExtractLoadStatus"
							}
						}
					},
					{
						"name": "log-status-success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "if-raw-handler",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-status-update",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"Property": "RawStatus",
								"Value": "Success",
								"TableName": "ExtractLoadStatus"
							}
						}
					},
					{
						"name": "log-status-end-fail",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "if-raw-handler",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-status-update",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"Property": "RawEndDTS",
								"Value": {
									"value": "@formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'yyyy-MM-dd HH:mm:ss')",
									"type": "Expression"
								},
								"TableName": "ExtractLoadStatus"
							}
						}
					},
					{
						"name": "log-status-fail-source",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "switch-source-handler",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-status-update",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"Property": "RawStatus",
								"Value": "Fail",
								"TableName": "ExtractLoadStatus"
							}
						}
					},
					{
						"name": "log-status-end-fail-source",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "switch-source-handler",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-status-update",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"Property": "RawEndDTS",
								"Value": {
									"value": "@formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'yyyy-MM-dd HH:mm:ss')",
									"type": "Expression"
								},
								"TableName": "ExtractLoadStatus"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"task": {
						"type": "object"
					}
				},
				"folder": {
					"name": "MDP-Framework/Zone"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/log-status-update')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureDatabricks_DefinedCluster')]",
				"[concat(variables('factoryId'), '/datasets/SQL_ControlDB')]",
				"[concat(variables('factoryId'), '/pipelines/log-message')]",
				"[concat(variables('factoryId'), '/pipelines/sql-load')]",
				"[concat(variables('factoryId'), '/pipelines/csv-load')]",
				"[concat(variables('factoryId'), '/pipelines/file-binary-load')]",
				"[concat(variables('factoryId'), '/pipelines/blob-folder-load')]",
				"[concat(variables('factoryId'), '/pipelines/qualtrics-load')]",
				"[concat(variables('factoryId'), '/pipelines/qualtircs-responses-load')]",
				"[concat(variables('factoryId'), '/pipelines/http-binary-load')]",
				"[concat(variables('factoryId'), '/pipelines/oracle-load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/System')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get-tasks",
						"description": "",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "set-parent-batch",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[ExtractLoadInit]",
								"storedProcedureParameters": {
									"BatchID": {
										"value": {
											"value": "@variables('ParentBatchID')",
											"type": "Expression"
										}
									},
									"SystemCode": {
										"value": {
											"value": "@pipeline().parameters.SystemCode",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQL_ControlDB",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "for-each-raw",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get-tasks",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get-tasks').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 10,
							"activities": [
								{
									"name": "execute-raw",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Raw",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"task": {
												"value": "@item()",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "set-parent-batch",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ParentBatchID",
							"value": {
								"value": "@substring(coalesce(pipeline().parameters.ParentBatchID, pipeline().GroupId), 0,8)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "for-each-trusted",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "for-each-raw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get-tasks').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 10,
							"activities": [
								{
									"name": "execute-trusted",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Trusted",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"task": {
												"value": "@item()",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "end-system",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "for-each-trusted",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "UPDATE U\nSET [EndedDTS] = CONVERT(DATETIME, CONVERT(DATETIMEOFFSET, GETDATE()) AT TIME ZONE 'AUS Eastern Standard Time')\nFROM [dbo].[ExtractLoadStatus] U\nWHERE BatchID = '@{variables('ParentBatchID')}'\nAND SystemCode = '@{pipeline().parameters.SystemCode}'\nSELECT 1 A",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQL_ControlDB",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SystemCode": {
						"type": "string",
						"defaultValue": "System"
					},
					"ParentBatchID": {
						"type": "string"
					}
				},
				"variables": {
					"ParentBatchID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MDP-Framework"
				},
				"annotations": [],
				"lastPublishTime": "2021-07-08T02:50:54Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SQL_ControlDB')]",
				"[concat(variables('factoryId'), '/pipelines/Raw')]",
				"[concat(variables('factoryId'), '/pipelines/Trusted')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Technical-Reconciliation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SwitchCluster",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@toLower(last(split(pipeline().parameters.TaskDetails.Processor,'|')))",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "clusterpool",
									"activities": [
										{
											"name": "Notebook-GetDeltaTableRecordCount-ClusterPool",
											"type": "DatabricksNotebook",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"notebookPath": {
													"value": "@variables('NotbookURL')",
													"type": "Expression"
												},
												"baseParameters": {
													"target_table": {
														"value": "@pipeline().parameters.TaskDetails.TargetName",
														"type": "Expression"
													},
													"filter_clause": {
														"value": "@if(equals(pipeline().parameters.TaskDetails.WhereClause,null),'',pipeline().parameters.TaskDetails.WhereClause)",
														"type": "Expression"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "LS_AzureDatabricks_InstancePool",
												"type": "LinkedServiceReference",
												"parameters": {
													"kvSecret": {
														"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
														"type": "Expression"
													},
													"PoolId": {
														"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[1]",
														"type": "Expression"
													},
													"DatabricksVersion": {
														"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[3]",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "SP-CreateTechRecRawToCleansed-ClusterPool",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [
												{
													"activity": "Notebook-GetDeltaTableRecordCount-ClusterPool",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "CTL.CreateTechRecRawToCleansed",
												"storedProcedureParameters": {
													"BatchExecutionId": {
														"value": {
															"value": "@pipeline().parameters.BatchLogId",
															"type": "Expression"
														},
														"type": "Int64"
													},
													"TaskExecutionLogId": {
														"value": {
															"value": "@pipeline().parameters.TaskExecutionLogId",
															"type": "Expression"
														},
														"type": "Int64"
													},
													"TaskId": {
														"value": {
															"value": "@pipeline().parameters.TaskDetails.TaskId",
															"type": "Expression"
														},
														"type": "Int64"
													},
													"SourceObject": {
														"value": {
															"value": "@pipeline().parameters.TaskDetails.SourceName",
															"type": "Expression"
														},
														"type": "String"
													},
													"TargetName": {
														"value": {
															"value": "@pipeline().parameters.TaskDetails.TargetName",
															"type": "Expression"
														},
														"type": "String"
													},
													"TotalNoRecords": {
														"value": {
															"value": "@activity('Notebook-GetDeltaTableRecordCount-ClusterPool').output.runOutput",
															"type": "Expression"
														},
														"type": "Int64"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "LS-AzureSqlDatabase_Ctrldb",
												"type": "LinkedServiceReference"
											}
										}
									]
								},
								{
									"value": "jobcluster",
									"activities": [
										{
											"name": "Notebook-GetDeltaTableRecordCount-JobCluster",
											"type": "DatabricksNotebook",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"notebookPath": {
													"value": "@variables('NotbookURL')",
													"type": "Expression"
												},
												"baseParameters": {
													"target_table": {
														"value": "@pipeline().parameters.TaskDetails.TargetName",
														"type": "Expression"
													},
													"filter_clause": {
														"value": "@if(equals(pipeline().parameters.TaskDetails.WhereClause,null),'',pipeline().parameters.TaskDetails.WhereClause)",
														"type": "Expression"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "LS-AzureDatabricks_JobCluster",
												"type": "LinkedServiceReference",
												"parameters": {
													"kvSecret": {
														"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
														"type": "Expression"
													},
													"DataBricksClusterType": {
														"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[2]",
														"type": "Expression"
													},
													"DataBricksClusterVersion": {
														"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[3]",
														"type": "Expression"
													},
													"DataBricksWorkerNodes": {
														"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[4]",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "SP-CreateTechRecRawToCleansed-JobCluster",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [
												{
													"activity": "Notebook-GetDeltaTableRecordCount-JobCluster",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "CTL.CreateTechRecRawToCleansed",
												"storedProcedureParameters": {
													"BatchExecutionId": {
														"value": {
															"value": "@pipeline().parameters.BatchLogId",
															"type": "Expression"
														},
														"type": "Int64"
													},
													"TaskExecutionLogId": {
														"value": {
															"value": "@pipeline().parameters.TaskExecutionLogId",
															"type": "Expression"
														},
														"type": "Int64"
													},
													"TaskId": {
														"value": {
															"value": "@pipeline().parameters.TaskDetails.TaskId",
															"type": "Expression"
														},
														"type": "Int64"
													},
													"SourceObject": {
														"value": {
															"value": "@pipeline().parameters.TaskDetails.SourceName",
															"type": "Expression"
														},
														"type": "String"
													},
													"TargetName": {
														"value": {
															"value": "@pipeline().parameters.TaskDetails.TargetName",
															"type": "Expression"
														},
														"type": "String"
													},
													"TotalNoRecords": {
														"value": {
															"value": "@activity('Notebook-GetDeltaTableRecordCount-JobCluster').output.runOutput",
															"type": "Expression"
														},
														"type": "Int64"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "LS-AzureSqlDatabase_Ctrldb",
												"type": "LinkedServiceReference"
											}
										}
									]
								},
								{
									"value": "interactive",
									"activities": [
										{
											"name": "Notebook-GetDeltaTableRecordCount-Interactive",
											"type": "DatabricksNotebook",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"notebookPath": {
													"value": "@variables('NotbookURL')",
													"type": "Expression"
												},
												"baseParameters": {
													"target_table": {
														"value": "@pipeline().parameters.TaskDetails.TargetName",
														"type": "Expression"
													},
													"filter_clause": {
														"value": "@if(equals(pipeline().parameters.TaskDetails.WhereClause,null),'',pipeline().parameters.TaskDetails.WhereClause)",
														"type": "Expression"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "LS-AzureDatabricks_DefinedCluster",
												"type": "LinkedServiceReference",
												"parameters": {
													"kvSecret": {
														"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[0]",
														"type": "Expression"
													},
													"clusterId": {
														"value": "@split(pipeline().parameters.TaskDetails.Processor,'|')[1]",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "SP-CreateTechRecRawToCleansed-Interactive",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [
												{
													"activity": "Notebook-GetDeltaTableRecordCount-Interactive",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "CTL.CreateTechRecRawToCleansed",
												"storedProcedureParameters": {
													"BatchExecutionId": {
														"value": {
															"value": "@pipeline().parameters.BatchLogId",
															"type": "Expression"
														},
														"type": "Int64"
													},
													"TaskExecutionLogId": {
														"value": {
															"value": "@pipeline().parameters.TaskExecutionLogId",
															"type": "Expression"
														},
														"type": "Int64"
													},
													"TaskId": {
														"value": {
															"value": "@pipeline().parameters.TaskDetails.TaskId",
															"type": "Expression"
														},
														"type": "Int64"
													},
													"SourceObject": {
														"value": {
															"value": "@pipeline().parameters.TaskDetails.SourceName",
															"type": "Expression"
														},
														"type": "String"
													},
													"TargetName": {
														"value": {
															"value": "@pipeline().parameters.TaskDetails.TargetName",
															"type": "Expression"
														},
														"type": "String"
													},
													"TotalNoRecords": {
														"value": {
															"value": "@activity('Notebook-GetDeltaTableRecordCount-Interactive').output.runOutput",
															"type": "Expression"
														},
														"type": "Int64"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "LS-AzureSqlDatabase_Ctrldb",
												"type": "LinkedServiceReference"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TaskDetails": {
						"type": "object"
					},
					"BatchLogId": {
						"type": "int"
					},
					"TaskExecutionLogId": {
						"type": "int"
					}
				},
				"variables": {
					"NotbookURL": {
						"type": "String",
						"defaultValue": "/build/cleansed/utility/getDeltaTableRecordCount"
					}
				},
				"folder": {
					"name": "Validation"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatabricks_InstancePool')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureDatabricks_JobCluster')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureDatabricks_DefinedCluster')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Transform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get-transform",
						"description": "",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "set-parent-batch",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[TransformInit]",
								"storedProcedureParameters": {
									"BatchID": {
										"value": {
											"value": "@variables('ParentBatchID')",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQL_ControlDB",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "set-list",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "get-transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "list",
							"value": {
								"value": "@activity('get-transform').output.value",
								"type": "Expression"
							}
						}
					},
					{
						"name": "for-each-group",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "distinct-processors",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@split(string(variables('list')[0].List), ',')",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "if-failed",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(variables('has-failed'), bool(1))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "filter-grouping",
												"type": "Filter",
												"dependsOn": [
													{
														"activity": "set-current-group",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"items": {
														"value": "@variables('list')",
														"type": "Expression"
													},
													"condition": {
														"value": "@equals(int(item().ParallelGroup), int(variables('current-group')))",
														"type": "Expression"
													}
												}
											},
											{
												"name": "set-current-group",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "current-group",
													"value": {
														"value": "@item()",
														"type": "Expression"
													}
												}
											},
											{
												"name": "execute-curated-parallel",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "filter-grouping",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Curated-Parallel",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"taskList": {
															"value": "@activity('filter-grouping').output.value",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "set-has-failed",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "execute-curated-parallel",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "has-failed",
													"value": true
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "if-fail-pipeline",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "for-each-group",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('has-failed'), bool(1))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "fail-pipeline",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "Inner pipeline failed",
										"errorCode": "-1"
									}
								}
							]
						}
					},
					{
						"name": "distinct-processors",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "set-list",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get-transform').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "if-synapse-processing",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@and(contains(item().ProcessorType, 'synapse')\n,not(contains(variables('list'), item().ProcessorType)))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "append-list",
												"type": "AppendVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "distinct-list",
													"value": {
														"value": "@item().ProcessorType",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "set-parent-batch",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ParentBatchID",
							"value": {
								"value": "@substring(coalesce(pipeline().parameters.ParentBatchID, pipeline().GroupId), 0,8)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ParentBatchID": {
						"type": "string"
					}
				},
				"variables": {
					"list": {
						"type": "Array"
					},
					"current-group": {
						"type": "String"
					},
					"filtered-list": {
						"type": "Array"
					},
					"has-failed": {
						"type": "Boolean",
						"defaultValue": false
					},
					"distinct-list": {
						"type": "Array"
					},
					"ParentBatchID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MDP-Framework"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SQL_ControlDB')]",
				"[concat(variables('factoryId'), '/pipelines/Curated-Parallel')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trusted')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "if-trusted-handler",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "log-status-start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(empty(pipeline().parameters.task.TrustedHandler))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "trusted-databricks",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": {
											"value": "/MDP-Framework/Zone/@{pipeline().parameters.task.TrustedHandler}",
											"type": "Expression"
										},
										"baseParameters": {
											"task": {
												"value": "@{pipeline().parameters.task}",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureDatabricks_DefinedCluster",
										"type": "LinkedServiceReference",
										"parameters": {
											"kvSecret": "databricks-token",
											"clusterId": "0517-025528-mkzhqnk1"
										}
									}
								},
								{
									"name": "log-databricks",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "trusted-databricks",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "log-message",
											"type": "PipelineReference"
										},
										"waitOnCompletion": false,
										"parameters": {
											"ID": {
												"value": "@pipeline().parameters.task.ID",
												"type": "Expression"
											},
											"ActivityType": "trusted-databricks",
											"Message": {
												"value": "@{activity('trusted-databricks')}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "log-status-start",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-status-update",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"Property": "TrustedStartDTS",
								"Value": {
									"value": "@formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'yyyy-MM-dd HH:mm:ss')",
									"type": "Expression"
								},
								"TableName": "ExtractLoadStatus"
							}
						}
					},
					{
						"name": "log-status-end",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "if-trusted-handler",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-status-update",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"Property": "TrustedEndDTS",
								"Value": {
									"value": "@formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'yyyy-MM-dd HH:mm:ss')",
									"type": "Expression"
								},
								"TableName": "ExtractLoadStatus"
							}
						}
					},
					{
						"name": "log-status-fail",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "if-trusted-handler",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-status-update",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"Property": "TrustedStatus",
								"Value": "Fail",
								"TableName": "ExtractLoadStatus"
							}
						}
					},
					{
						"name": "log-status-success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "if-trusted-handler",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-status-update",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"Property": "TrustedStatus",
								"Value": "Success",
								"TableName": "ExtractLoadStatus"
							}
						}
					},
					{
						"name": "log-status-end-fail",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "if-trusted-handler",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-status-update",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"Property": "TrustedEndDTS",
								"Value": {
									"value": "@formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'yyyy-MM-dd HH:mm:ss')",
									"type": "Expression"
								},
								"TableName": "ExtractLoadStatus"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"task": {
						"type": "object"
					}
				},
				"folder": {
					"name": "MDP-Framework/Zone"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/log-status-update')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureDatabricks_DefinedCluster')]",
				"[concat(variables('factoryId'), '/pipelines/log-message')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/add-ingestion')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "add-ingestion-sp",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[AddIngestion]",
							"storedProcedureParameters": {
								"ExtendedProperties": {
									"value": null,
									"type": "String"
								},
								"KeyVaultSecret": {
									"value": "daf-sql-controldb-connectionstring",
									"type": "String"
								},
								"Query": {
									"value": null,
									"type": "String"
								},
								"RawFileExtension": {
									"value": null,
									"type": "String"
								},
								"Schema": {
									"value": "dbo",
									"type": "String"
								},
								"SourceHandler": {
									"value": "sql-load",
									"type": "String"
								},
								"SystemCode": {
									"value": "System",
									"type": "String"
								},
								"Table": {
									"value": "ExtractLoadManifest",
									"type": "String"
								},
								"WatermarkColumn": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "MDP-Framework/Setup"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureSqlDatabase_Ctrldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob-folder-load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copy-folder-binary",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "set-output-full-path",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "set-source-file-path",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "set-delete-source-files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Destination",
								"value": "raw/Cewa Financials/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"deleteFilesAfterCompletion": {
										"value": "@variables('DeleteSourceFiles')",
										"type": "Expression"
									}
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "BLOB_Binary_Folder",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@variables('SourceFilePath')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DLS_Binary_Folder",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@variables('OutputFullPath')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "set-source-file-path",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceFilePath",
							"value": {
								"value": "@pipeline().parameters.task.SourceQuery",
								"type": "Expression"
							}
						}
					},
					{
						"name": "set-output-full-path",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "OutputFullPath",
							"value": {
								"value": "@replace(replace(replace(replace(replace(replace(\npipeline().parameters.task.RawPath\n,'$yyyy$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'yyyy'))\n,'$MM$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'MM'))\n,'$dd$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'dd'))\n,'$HH$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'HH'))\n,'$mm$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'mm'))\n,'$guid$', guid())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "task-raw-path",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "copy-folder-binary",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-status-update",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"Property": "RawPath",
								"Value": {
									"value": "@variables('OutputFullPath')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "log-copy",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "copy-folder-binary",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-message",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"ActivityType": "copy-data",
								"Message": {
									"value": "@{activity('copy-folder-binary')}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "fail-folder-copy",
						"type": "Fail",
						"dependsOn": [
							{
								"activity": "copy-folder-binary",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"message": "fail-folder-copy",
							"errorCode": "500"
						}
					},
					{
						"name": "set-delete-source-files",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "DeleteSourceFiles",
							"value": {
								"value": "@if(contains(coalesce(pipeline().parameters.task.ExtendedProperties, ''), 'DeleteSourceFiles'), bool(json(coalesce(pipeline().parameters.task.ExtendedProperties, '{}')).DeleteSourceFiles),false)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"task": {
						"type": "object"
					}
				},
				"variables": {
					"OutputFullPath": {
						"type": "String"
					},
					"SourceFilePath": {
						"type": "String"
					},
					"DeleteSourceFiles": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "MDP-Framework/SourceHandler/BLOB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/BLOB_Binary_Folder')]",
				"[concat(variables('factoryId'), '/datasets/DLS_Binary_Folder')]",
				"[concat(variables('factoryId'), '/pipelines/log-status-update')]",
				"[concat(variables('factoryId'), '/pipelines/log-message')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bom-solar-load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copy-http-zip",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "generate-bom-file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Destination",
								"value": "raw/Cewa Financials/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "HTTP_Binary",
								"type": "DatasetReference",
								"parameters": {
									"httpUrl": "http://www.bom.gov.au/tmp/cdio/IDCJAC0016_066124_2022.zip"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DLS_Binary",
								"type": "DatasetReference",
								"parameters": {
									"filePath": "/raw/bom_1/file.zip"
								}
							}
						]
					},
					{
						"name": "unzip-to-path",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "copy-http-zip",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Destination",
								"value": "raw/Cewa Financials/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings",
									"compressionProperties": {
										"type": "ZipDeflateReadSettings",
										"preserveZipFileNameAsFolder": false
									}
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DLS_Binary_Zip",
								"type": "DatasetReference",
								"parameters": {
									"filePath": "/raw/bom_1/file.zip"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DLS_Binary_Folder",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "raw/bom_1/unzip"
								}
							}
						]
					},
					{
						"name": "generate-bom-file",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "http://www.bom.gov.au/jsp/ncc/cdio/weatherData/av?p_nccObsCode=193&p_display_type=dailyDataFile&p_startYear=&p_c=&p_stn_num=066124",
							"method": "GET",
							"headers": {
								"User-Agent": "PostmanRuntime/7.29.2"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TaskDetails": {
						"type": "object"
					}
				},
				"variables": {
					"OutputFullPath": {
						"type": "String"
					},
					"Url": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MDP-Framework/SourceHandler/BoM"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/HTTP_Binary')]",
				"[concat(variables('factoryId'), '/datasets/DLS_Binary')]",
				"[concat(variables('factoryId'), '/datasets/DLS_Binary_Zip')]",
				"[concat(variables('factoryId'), '/datasets/DLS_Binary_Folder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv-load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "set-filename",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "OutputFileName",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "set-path",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "OutputPath",
							"value": {
								"value": "@pipeline().parameters.TaskDetails.RawPath",
								"type": "Expression"
							}
						}
					},
					{
						"name": "set-full-path",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "set-filename",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "set-path",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "OutputFullPath",
							"value": {
								"value": "@replace(replace(replace(replace(replace(\nconcat(variables('OutputPath'), if(endswith(variables('OutputPath'), '/'), '', '/'), variables('OutputFileName'), '.parquet')\n,'$yyyy$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'yyyy'))\n,'$MM$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'MM'))\n,'$dd$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'dd'))\n,'$HH$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'HH'))\n,'$mm$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'mm'))\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Input-Folderpath",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "InputFolderPath",
							"value": {
								"value": "@pipeline().parameters.TaskDetails.SourceFolderPath",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Input-Filepath",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "InputFilePath",
							"value": {
								"value": "@pipeline().parameters.TaskDetails.SourceFileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-full-inputpath",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Input-Folderpath",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Input-Filepath",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Input-Filepath_ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "InputFullPath",
							"value": {
								"value": "@concat(variables('InputFolderPath'),'/',variables('InputFilePath'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "copy-CSV",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "set-full-path",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-full-inputpath",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Destination",
								"value": "raw/Cewa Financials/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DLS_Csv",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@variables('InputFullPath')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DLS_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"BlobPath": {
										"value": "@variables('OutputFullPath')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "task-raw-path",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "copy-CSV",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-status-update",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.TaskDetails.ID",
									"type": "Expression"
								},
								"Property": "RawPath",
								"Value": {
									"value": "@variables('OutputFullPath')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "log-copy",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "copy-CSV",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-message",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.TaskDetails.ID",
									"type": "Expression"
								},
								"ActivityType": "copy-data",
								"Message": {
									"value": "@{activity('copy-CSV')}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Input-Filepath_ID",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "InputID",
							"value": {
								"value": "@string(pipeline().parameters.TaskDetails.ID)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TaskDetails": {
						"type": "object"
					}
				},
				"variables": {
					"OutputFileName": {
						"type": "String"
					},
					"OutputPath": {
						"type": "String"
					},
					"OutputFullPath": {
						"type": "String"
					},
					"InputFolderPath": {
						"type": "String"
					},
					"InputFilePath": {
						"type": "String"
					},
					"InputFullPath": {
						"type": "String"
					},
					"InputID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MDP-Framework/SourceHandler/DLS"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DLS_Csv')]",
				"[concat(variables('factoryId'), '/datasets/DLS_Parquet')]",
				"[concat(variables('factoryId'), '/pipelines/log-status-update')]",
				"[concat(variables('factoryId'), '/pipelines/log-message')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/file-binary-load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copy-file-binary",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "set-output-full-path",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "set-source-file-path",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Destination",
								"value": "raw/Cewa Financials/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DLS_Binary",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@variables('SourceFilePath')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DLS_Binary",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@variables('OutputFullPath')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "set-source-file-path",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceFilePath",
							"value": {
								"value": "@pipeline().parameters.task.SourceQuery",
								"type": "Expression"
							}
						}
					},
					{
						"name": "set-output-full-path",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "OutputFullPath",
							"value": {
								"value": "@replace(replace(replace(replace(replace(replace(\npipeline().parameters.task.RawPath\n,'$yyyy$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'yyyy'))\n,'$MM$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'MM'))\n,'$dd$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'dd'))\n,'$HH$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'HH'))\n,'$mm$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'mm'))\n,'$guid$', guid())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "task-raw-path",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "copy-file-binary",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-status-update",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"Property": "RawPath",
								"Value": {
									"value": "@variables('OutputFullPath')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "log-copy",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "copy-file-binary",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-message",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"ActivityType": "copy-data",
								"Message": {
									"value": "@{activity('copy-file-binary')}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "fail-copy-binary",
						"type": "Fail",
						"dependsOn": [
							{
								"activity": "copy-file-binary",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"message": "failed-copy-file-binary",
							"errorCode": "500"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"task": {
						"type": "object"
					}
				},
				"variables": {
					"OutputFullPath": {
						"type": "String"
					},
					"SourceFilePath": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MDP-Framework/SourceHandler/DLS"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DLS_Binary')]",
				"[concat(variables('factoryId'), '/pipelines/log-status-update')]",
				"[concat(variables('factoryId'), '/pipelines/log-message')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/http-binary-load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "set-full-path",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "OutputFullPath",
							"value": {
								"value": "@replace(replace(replace(replace(replace(replace(\npipeline().parameters.task.RawPath\n,'$yyyy$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'yyyy'))\n,'$MM$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'MM'))\n,'$dd$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'dd'))\n,'$HH$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'HH'))\n,'$mm$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'mm'))\n,'$guid$', guid())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "set-url",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Url",
							"value": {
								"value": "@pipeline().parameters.task.SourceQuery",
								"type": "Expression"
							}
						}
					},
					{
						"name": "copy-http-binary",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "set-full-path",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "set-url",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Destination",
								"value": "raw/Cewa Financials/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "HTTP_Binary",
								"type": "DatasetReference",
								"parameters": {
									"httpUrl": {
										"value": "@variables('Url')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DLS_Binary",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@variables('OutputFullPath')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "task-raw-path",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "copy-http-binary",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-status-update",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"Property": "RawPath",
								"Value": {
									"value": "@variables('OutputFullPath')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "log-copy",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "copy-http-binary",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-message",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"ActivityType": "copy-data",
								"Message": {
									"value": "@{activity('copy-http-binary')}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "http-failed",
						"type": "Fail",
						"dependsOn": [
							{
								"activity": "copy-http-binary",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"message": {
								"value": "@activity('copy-http-binary').output.error",
								"type": "Expression"
							},
							"errorCode": {
								"value": "@activity('copy-http-binary').output.ErrorCode",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"task": {
						"type": "object"
					}
				},
				"variables": {
					"OutputFullPath": {
						"type": "String"
					},
					"Url": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MDP-Framework/SourceHandler/HTTP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/HTTP_Binary')]",
				"[concat(variables('factoryId'), '/datasets/DLS_Binary')]",
				"[concat(variables('factoryId'), '/pipelines/log-status-update')]",
				"[concat(variables('factoryId'), '/pipelines/log-message')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/import-ingestion-csv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "for-each-ingestion",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "import-file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@take(activity('import-file').output.value, if(equals(int(activity('get-config').output.firstRow.Limit), 0), 999, int(activity('get-config').output.firstRow.Limit)))",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "add-ingestion",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[AddIngestion]",
										"storedProcedureParameters": {
											"SystemCode": {
												"value": {
													"value": "@item().SystemCode",
													"type": "Expression"
												},
												"type": "String"
											},
											"Schema": {
												"value": {
													"value": "@item().TableSchema",
													"type": "Expression"
												},
												"type": "String"
											},
											"Table": {
												"value": {
													"value": "@item().TableName",
													"type": "Expression"
												},
												"type": "String"
											},
											"Query": {
												"value": {
													"value": "@item().SourceQuery",
													"type": "Expression"
												},
												"type": "String"
											},
											"WatermarkColumn": {
												"value": {
													"value": "@item().WatermarkColumn",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceHandler": {
												"value": {
													"value": "@item().SourceHandler",
													"type": "Expression"
												},
												"type": "String"
											},
											"RawFileExtension": {
												"value": {
													"value": "@item().RawFileExtension",
													"type": "Expression"
												},
												"type": "String"
											},
											"KeyVaultSecret": {
												"value": {
													"value": "@item().KeyVaultSecret",
													"type": "Expression"
												},
												"type": "String"
											},
											"ExtendedProperties": {
												"value": {
													"value": "@item().ExtendedProperties",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "import-file",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "get-config",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DLS_Csv",
								"type": "DatasetReference",
								"parameters": {
									"filePath": "@activity('get-config').output.firstRow.Path"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "get-config",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT [Path], [Index], [Limit] FROM   \n( \n\tSELECT * FROM [dbo].[Config]\n\tWHERE [KeyGroup] = 'IngestionSheet'\n) T\nPIVOT(\n\tMAX([Value]) \n\tFOR [Key] IN (\n\t\t[Index], \n\t\t[Path],\n\t\t[Limit]\n\t)\n) T;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQL_ControlDB",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "MDP-Framework/Setup"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DLS_Csv')]",
				"[concat(variables('factoryId'), '/datasets/SQL_ControlDB')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureSqlDatabase_Ctrldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/log-message')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "log-copy",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[LogMessage]",
							"storedProcedureParameters": {
								"ID": {
									"value": {
										"value": "@pipeline().parameters.ID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"ActivityType": {
									"value": {
										"value": "@pipeline().parameters.ActivityType",
										"type": "Expression"
									},
									"type": "String"
								},
								"Message": {
									"value": {
										"value": "@pipeline().parameters.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsTransform": {
									"value": {
										"value": "@pipeline().parameters.IsTransform",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ID": {
						"type": "int"
					},
					"ActivityType": {
						"type": "string"
					},
					"Message": {
						"type": "string"
					},
					"IsTransform": {
						"type": "bool"
					}
				},
				"folder": {
					"name": "MDP-Framework/Common/Logging"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureSqlDatabase_Ctrldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/log-status-update')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "log-status-update",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[StatusUpdate]",
							"storedProcedureParameters": {
								"ID": {
									"value": {
										"value": "@pipeline().parameters.ID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"Property": {
									"value": {
										"value": "@pipeline().parameters.Property",
										"type": "Expression"
									},
									"type": "String"
								},
								"Value": {
									"value": {
										"value": "@pipeline().parameters.Value",
										"type": "Expression"
									},
									"type": "String"
								},
								"TableName": {
									"value": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS-AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ID": {
						"type": "int"
					},
					"Property": {
						"type": "string"
					},
					"Value": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "MDP-Framework/Common/Logging"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureSqlDatabase_Ctrldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/oracle-load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "set-base-query",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "BaseQuery",
							"value": {
								"value": "@coalesce(pipeline().parameters.task.SourceQuery, \nreplace(replace('SELECT * FROM $A$.$B$'\n,'$A$'\n,pipeline().parameters.task.SourceSchema)\n,'$B$'\n,pipeline().parameters.task.SourceTableName)\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "row-count",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "set-query",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "set-full-path",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": {
									"value": "SELECT COUNT(*) RowCount FROM (@{variables('Query')}) T",
									"type": "Expression"
								},
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "SRC_Oracle",
								"type": "DatasetReference",
								"parameters": {
									"kvSecret": "daf-oracle-Maximo-connectionstring"
								}
							}
						}
					},
					{
						"name": "set-full-path",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "OutputFullPath",
							"value": {
								"value": "@replace(replace(replace(replace(replace(replace(\ncoalesce(pipeline().parameters.task.RawPath, '')\n,'$yyyy$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'yyyy'))\n,'$MM$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'MM'))\n,'$dd$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'dd'))\n,'$HH$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'HH'))\n,'$mm$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'mm'))\n,'$guid$', guid())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "set-query",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "if-delta",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Query",
							"value": {
								"value": "@if(variables('IsDelta')\n,replace(replace(\n'SELECT * FROM ($Q$) T $W$'\n,'$Q$', variables('BaseQuery'))\n,'$W$', variables('QueryClause'))\n,variables('BaseQuery'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "if-delta",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "set-base-query",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "set-is-delta",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('IsDelta')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "low-high-watermark",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "set-watermark-column",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "@replace(replace(replace(\n'SELECT COALESCE($PLW$, MIN($WC$)) LowWatermark,  MAX($WC$) HighWatermark FROM $Q$ T'\n,'$PLW$', if(empty(pipeline().parameters.task.LowWatermark), 'NULL', concat('''', pipeline().parameters.task.LowWatermark, '''')))\n,'$WC$', variables('WatermarkColumn'))\n,'$Q$', concat('(',variables('BaseQuery'),')'))",
												"type": "Expression"
											},
											"partitionOption": "None",
											"queryTimeout": "02:00:00"
										},
										"dataset": {
											"referenceName": "SRC_Oracle",
											"type": "DatasetReference",
											"parameters": {
												"kvSecret": "daf-oracle-Maximo-connectionstring"
											}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "set-watermark-column",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "WatermarkColumn",
										"value": {
											"value": "@pipeline().parameters.task.WatermarkColumn",
											"type": "Expression"
										}
									}
								},
								{
									"name": "set-query-clause",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "low-high-watermark",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "QueryClause",
										"value": {
											"value": "WHERE @{variables('WatermarkColumn')} > @{activity('low-high-watermark').output.firstRow.LowWatermark} AND @{variables('WatermarkColumn')} <= @{activity('low-high-watermark').output.firstRow.HighWatermark}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "task-low-watermark",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "low-high-watermark",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "log-status-update",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ID": {
												"value": "@pipeline().parameters.task.ID",
												"type": "Expression"
											},
											"Property": "LowWatermark",
											"Value": {
												"value": "@{activity('low-high-watermark').output.firstRow.LowWatermark}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "task-high-watermark",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "low-high-watermark",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "log-status-update",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ID": {
												"value": "@pipeline().parameters.task.ID",
												"type": "Expression"
											},
											"Property": "HighWatermark",
											"Value": {
												"value": "@{activity('low-high-watermark').output.firstRow.HighWatermark}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "set-is-delta",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "IsDelta",
							"value": {
								"value": "@not(empty(pipeline().parameters.task.WatermarkColumn))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "switch-copy-sql",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "task-source-row-count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@if(equals(length(split(pipeline().parameters.task.SourceHandler, '/')), 1), pipeline().parameters.task.SourceHandler, split(pipeline().parameters.task.SourceHandler, '/')[1])",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "none",
									"activities": [
										{
											"name": "not-implemented",
											"type": "Fail",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"message": "not-implemented",
												"errorCode": "500"
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "copy-sql",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Destination",
											"value": "raw/Cewa Financials/"
										}
									],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "@variables('Query')",
												"type": "Expression"
											},
											"partitionOption": "None",
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "SRC_Oracle",
											"type": "DatasetReference",
											"parameters": {
												"kvSecret": "daf-oracle-Maximo-connectionstring"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DLS_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"BlobPath": {
													"value": "@variables('OutputFullPath')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "task-raw-path",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "copy-sql",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "log-status-update",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ID": {
												"value": "@pipeline().parameters.task.ID",
												"type": "Expression"
											},
											"Property": "RawPath",
											"Value": {
												"value": "@variables('OutputFullPath')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "task-sink-row-count",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "copy-sql",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "log-status-update",
											"type": "PipelineReference"
										},
										"waitOnCompletion": false,
										"parameters": {
											"ID": {
												"value": "@pipeline().parameters.task.ID",
												"type": "Expression"
											},
											"Property": "SinkRowCount",
											"Value": {
												"value": "@{activity('copy-sql').output.rowsCopied}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "log-copy",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "copy-sql",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "log-message",
											"type": "PipelineReference"
										},
										"waitOnCompletion": false,
										"parameters": {
											"ID": {
												"value": "@pipeline().parameters.task.ID",
												"type": "Expression"
											},
											"ActivityType": "copy-data",
											"Message": {
												"value": "@{activity('copy-sql')}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "task-source-row-count",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "row-count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-status-update",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"Property": "SourceRowCount",
								"Value": {
									"value": "@{activity('row-count').output.firstRow.RowCount}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "log-count",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "row-count",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-message",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"ActivityType": "row-count",
								"Message": {
									"value": "@{activity('row-count')}",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"task": {
						"type": "object"
					}
				},
				"variables": {
					"Query": {
						"type": "String"
					},
					"OutputFullPath": {
						"type": "String"
					},
					"WatermarkColumn": {
						"type": "String"
					},
					"BaseQuery": {
						"type": "String"
					},
					"QueryClause": {
						"type": "String"
					},
					"IsDelta": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "MDP-Framework/SourceHandler/Oracle"
				},
				"annotations": [],
				"lastPublishTime": "2021-07-08T10:40:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SRC_Oracle')]",
				"[concat(variables('factoryId'), '/pipelines/log-status-update')]",
				"[concat(variables('factoryId'), '/pipelines/log-message')]",
				"[concat(variables('factoryId'), '/datasets/DLS_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "attachments",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "sewercctv/cctv_kaltura_attachments",
									"wildcardFileName": "*.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Parquet2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable3",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "flavors",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "attachments",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "sewercctv/cctv_kaltura_flavors",
									"wildcardFileName": "*.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "flavors_src",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "flavors_dst",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "metadata",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "flavors",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "sewercctv/cctv_kaltura_metadata",
									"wildcardFileName": "*.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "metadata_src",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "metadata_Dst",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "mediaentry",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "sewercctv/cctv_kaltura_mediaentry",
									"wildcardFileName": "*.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "media_entry_src",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "mediaentry_Dst",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "z_Archive"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Parquet2')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable3')]",
				"[concat(variables('factoryId'), '/datasets/flavors_src')]",
				"[concat(variables('factoryId'), '/datasets/flavors_dst')]",
				"[concat(variables('factoryId'), '/datasets/metadata_src')]",
				"[concat(variables('factoryId'), '/datasets/metadata_Dst')]",
				"[concat(variables('factoryId'), '/datasets/media_entry_src')]",
				"[concat(variables('factoryId'), '/datasets/mediaentry_Dst')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/qualtircs-responses-load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get-keyvault-clientid",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://@{pipeline().globalParameters.keyVaultName}.vault.azure.net/secrets/qualtrics-auth-clientId?api-version=7.0",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "set-clientid",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "get-keyvault-clientid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "client-id",
							"value": {
								"value": "@activity('get-keyvault-clientid').output.value",
								"type": "Expression"
							}
						}
					},
					{
						"name": "get-bearer-token",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "set-clientid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://syd1.qualtrics.com/oauth2/token",
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"body": {
								"value": "grant_type=client_credentials&scope=read:survey_responses",
								"type": "Expression"
							},
							"authentication": {
								"type": "Basic",
								"username": {
									"value": "@variables('client-id')",
									"type": "Expression"
								},
								"password": {
									"type": "AzureKeyVaultSecret",
									"store": {
										"referenceName": "LS-AzureKeyVault",
										"type": "LinkedServiceReference"
									},
									"secretName": "qualtrics-auth-clientSecret"
								}
							}
						}
					},
					{
						"name": "set-bearer-token",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "get-bearer-token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "bearer-token",
							"value": {
								"value": "@activity('get-bearer-token').output.access_token",
								"type": "Expression"
							}
						}
					},
					{
						"name": "trigger-export",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "set-bearer-token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@pipeline().parameters.task.SourceQuery",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {
								"Content-Type": "application/json",
								"Authorization": {
									"value": "bearer @{variables('bearer-token')}",
									"type": "Expression"
								}
							},
							"body": {
								"value": "{\n\"format\": \"json\",\n\"compress\": false,\n\"allowContinuation\": true\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "set-progress-id",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "trigger-export",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "progress-id",
							"value": {
								"value": "@activity('trigger-export').output.result.progressId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "until-export-complete",
						"description": "Check status of export until status is \"complete\"",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "set-progress-id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@bool(variables('export-status'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "get-export-status",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "https://syd1.qualtrics.com/API/v3/surveys/SV_bkGwmzYr5TJGFpk/export-responses/@{variables('progress-id')}",
											"type": "Expression"
										},
										"method": "GET",
										"headers": {
											"Authorization": {
												"value": "bearer @{variables('bearer-token')}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "if-status-complete",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "get-export-status",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(\n    activity('get-export-status').output.result.status, \n    'complete'\n)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "wait",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 2
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "get-file-id",
												"type": "WebActivity",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"url": {
														"value": "https://syd1.qualtrics.com/API/v3/surveys/SV_bkGwmzYr5TJGFpk/export-responses/@{variables('progress-id')}",
														"type": "Expression"
													},
													"method": "GET",
													"headers": {
														"Authorization": {
															"value": "Bearer @{variables('bearer-token')}",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "complete-status-true",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "export-status",
													"value": {
														"value": "@bool(true)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "set-file-id",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "get-file-id",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "file-id",
													"value": {
														"value": "@activity('get-file-id').output.result.fileId",
														"type": "Expression"
													}
												}
											},
											{
												"name": "set-continuation-token",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "get-file-id",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "continuation-token",
													"value": {
														"value": "@activity('get-file-id').output.result.continuationToken",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							],
							"timeout": "0.10:00:00"
						}
					},
					{
						"name": "export-survey",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "until-export-complete",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "set-full-path",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"Authorization": {
										"value": "bearer @{variables('bearer-token')}",
										"type": "Expression"
									}
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "REST_Binary",
								"type": "DatasetReference",
								"parameters": {
									"url": {
										"value": "@{pipeline().parameters.task.SourceQuery}/@{variables('file-id')}/file",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DLS_Json",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@variables('OutputFullPath')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "set-full-path",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "OutputFullPath",
							"value": {
								"value": "@replace(replace(replace(replace(replace(replace(\npipeline().parameters.task.RawPath\n,'$yyyy$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'yyyy'))\n,'$MM$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'MM'))\n,'$dd$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'dd'))\n,'$HH$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'HH'))\n,'$mm$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'mm'))\n,'$guid$', guid())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "log-copy",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "export-survey",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-message",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"ActivityType": "copy-data",
								"Message": {
									"value": "@{activity('export-survey')}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "task-raw-path",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "export-survey",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-status-update",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"Property": "RawPath",
								"Value": {
									"value": "@variables('OutputFullPath')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "qualtrics-failed",
						"type": "Fail",
						"dependsOn": [
							{
								"activity": "export-survey",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"message": {
								"value": "@activity('export-survey').output.error",
								"type": "Expression"
							},
							"errorCode": {
								"value": "@activity('export-survey').output.ErrorCode",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"task": {
						"type": "object"
					}
				},
				"variables": {
					"client-id": {
						"type": "String"
					},
					"bearer-token": {
						"type": "String"
					},
					"url": {
						"type": "String"
					},
					"continuation-token": {
						"type": "String"
					},
					"progress-id": {
						"type": "String"
					},
					"export-status": {
						"type": "Boolean"
					},
					"file-id": {
						"type": "String"
					},
					"OutputFullPath": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MDP-Framework/SourceHandler/Qualtrics"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/REST_Binary')]",
				"[concat(variables('factoryId'), '/datasets/DLS_Json')]",
				"[concat(variables('factoryId'), '/pipelines/log-message')]",
				"[concat(variables('factoryId'), '/pipelines/log-status-update')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/qualtrics-load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get-keyvault-clientId",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://@{pipeline().globalParameters.keyVaultName}.vault.azure.net/secrets/qualtrics-auth-clientId?api-version=7.0",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "set-keyvault-clientId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "get-keyvault-clientId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "auth-client-id",
							"value": {
								"value": "@activity('get-keyvault-clientId').output.value",
								"type": "Expression"
							}
						}
					},
					{
						"name": "create-bearer-token",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "set-keyvault-clientId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://syd1.qualtrics.com/oauth2/token",
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"body": {
								"value": "grant_type=client_credentials&scope=read:surveys",
								"type": "Expression"
							},
							"authentication": {
								"type": "Basic",
								"username": {
									"value": "@variables('auth-client-id')",
									"type": "Expression"
								},
								"password": {
									"type": "AzureKeyVaultSecret",
									"store": {
										"referenceName": "LS-AzureKeyVault",
										"type": "LinkedServiceReference"
									},
									"secretName": "qualtrics-auth-clientSecret"
								}
							}
						}
					},
					{
						"name": "var-bearer-token",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "create-bearer-token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "bearer-token",
							"value": {
								"value": "@activity('create-bearer-token').output.access_token",
								"type": "Expression"
							}
						}
					},
					{
						"name": "copy-entity-list",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "var-bearer-token",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "set-root-folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"authorization": {
										"value": "bearer @{variables('bearer-token')}",
										"type": "Expression"
									}
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "REST_Binary",
								"type": "DatasetReference",
								"parameters": {
									"url": {
										"value": "@pipeline().parameters.task.SourceQuery",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DLS_Json",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@variables('OutputFullPath')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "set-root-folder",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "OutputFullPath",
							"value": {
								"value": "@replace(replace(replace(replace(replace(replace(\npipeline().parameters.task.RawPath\n,'$yyyy$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'yyyy'))\n,'$MM$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'MM'))\n,'$dd$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'dd'))\n,'$HH$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'HH'))\n,'$mm$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'mm'))\n,'$guid$', guid())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "log-copy",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "copy-entity-list",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-message",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"ActivityType": "copy-data",
								"Message": {
									"value": "@{activity('copy-entity-list')}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "task-raw-path",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "copy-entity-list",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-status-update",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"Property": "RawPath",
								"Value": {
									"value": "@variables('OutputFullPath')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "qualtrics-failed",
						"type": "Fail",
						"dependsOn": [
							{
								"activity": "copy-entity-list",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"message": {
								"value": "@activity('copy-entity-list').output.error",
								"type": "Expression"
							},
							"errorCode": {
								"value": "@activity('copy-entity-list').output.ErrorCode",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"task": {
						"type": "object",
						"defaultValue": {
							"BatchID": "559d7276",
							"ID": 42,
							"LowWatermark": null,
							"SourceID": 26004,
							"SystemCode": "Qualtrics",
							"SourceSchema": "dbo",
							"SourceTableName": "FeedbackTabGoLive",
							"SourceQuery": "https://syd1.qualtrics.com/API/v3/survey-definitions/SV_9GrGuXTjnyQqqpM/questions",
							"SourceFolderPath": null,
							"SourceFileName": null,
							"SourceKeyVaultSecret": "qualtrics-auth-clientId",
							"SourceHandler": "qualtrics-load",
							"LoadType": null,
							"BusinessKeyColumn": null,
							"WatermarkColumn": null,
							"RawHandler": "raw-load",
							"RawPath": "/raw/Qualtrics/dbo_FeedbackTabGoLive/$yyyy$/$MM$/$dd$/$HH$$mm$/$guid$.json",
							"TrustedHandler": "trusted-load",
							"TrustedPath": "/cleansed/Qualtrics/dbo_FeedbackTabGoLive/",
							"DestinationSchema": "dbo",
							"DestinationTableName": "FeedbackTabGoLive",
							"DestinationKeyVaultSecret": null,
							"ExtendedProperties": null
						}
					}
				},
				"variables": {
					"auth-client-id": {
						"type": "String"
					},
					"survey-list": {
						"type": "String"
					},
					"bearer-token": {
						"type": "String"
					},
					"export-status": {
						"type": "String"
					},
					"progress-id": {
						"type": "String"
					},
					"OutputFullPath": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MDP-Framework/SourceHandler/Qualtrics"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/REST_Binary')]",
				"[concat(variables('factoryId'), '/datasets/DLS_Json')]",
				"[concat(variables('factoryId'), '/pipelines/log-message')]",
				"[concat(variables('factoryId'), '/pipelines/log-status-update')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/recon-record-validation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If-Check",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "LU-Source",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('LU-Source').output.firstRow.IsAuditTable,false)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "SP-Update-Validation",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[RecordDataValidation]",
										"storedProcedureParameters": {
											"HighWatermark": {
												"value": {
													"value": "@json(string(pipeline().parameters.ValidationDetails)).ReturnValue",
													"type": "Expression"
												},
												"type": "String"
											},
											"MaxValue": {
												"value": {
													"value": "@json(string(pipeline().parameters.ValidationDetails)).MaximumValue",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"MinValue": {
												"value": {
													"value": "@json(string(pipeline().parameters.ValidationDetails)).MinimumValue",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"RecordCount": {
												"value": {
													"value": "@json(string(pipeline().parameters.ValidationDetails)).RecordCount",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"TotalValue": {
												"value": {
													"value": "@json(string(pipeline().parameters.ValidationDetails)).TotalValue",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"ValidationType": {
												"value": {
													"value": "@json(string(pipeline().parameters.ValidationDetails)).ValidationType",
													"type": "Expression"
												},
												"type": "String"
											},
											"ProjectRunID": {
												"value": {
													"value": "@pipeline().parameters.ProjectRunID",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceID": {
												"value": {
													"value": "@pipeline().parameters.SourceID",
													"type": "Expression"
												},
												"type": "Int64"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS-AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference",
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "LU-Source",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT * FROM CTL.vw_ControlConfiguration WHERE SourceID = ', string(pipeline().parameters.SourceID))",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabase_Ctrldb",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ProjectRunID": {
						"type": "string",
						"defaultValue": "0b6110e9-8d68-4a0a-8ee8-0182a03289ef"
					},
					"ValidationDetails": {
						"type": "object",
						"defaultValue": {
							"SOURCECOLUMN": "COALESCE (UPDATED_DATE, CREATED_DATE)",
							"RETURNVALUE": "2020-11-08 17:58:04",
							"RECORDCOUNT": 52254,
							"TOTALVALUE": 3361637939,
							"MAXVALUE": 133557,
							"MINVALUE": 2,
							"VALIDATIONTYPE": "SOURCE"
						}
					},
					"SourceID": {
						"type": "int"
					}
				},
				"folder": {
					"name": "Validation"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureSqlDatabase_Ctrldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/recon-target')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If-Exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "LU-GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(activity('LU-GetSourceID').output,'firstRow')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Get-SQL",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[CTL].[GetTableDetails]",
											"storedProcedureParameters": {
												"SourceId": {
													"type": "Int64",
													"value": {
														"value": "@activity('LU-GetSourceID').output.firstRow.SourceID",
														"type": "Expression"
													}
												},
												"ValidationType": {
													"type": "String",
													"value": "TARGET"
												}
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "AzureSqlDatabase_Ctrldb",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Get-Values",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Get-SQL",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@activity('Get-SQL').output.firstrow.SQLStatement",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SRC_SQLSERVER",
											"type": "DatasetReference",
											"parameters": {
												"kvSecret": "daf-sql-slt-connectionstring",
												"tableName": "erch",
												"schemaName": "dbo"
											}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "EP-Record-Validation",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Get-Values",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "recon-record-validation",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ProjectRunID": {
												"value": "@pipeline().parameters.ProjectRunID",
												"type": "Expression"
											},
											"ValidationDetails": {
												"value": "@activity('Get-Values').output.firstRow",
												"type": "Expression"
											},
											"SourceID": {
												"value": "@activity('LU-GetSourceID').output.firstRow.SourceID",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "LU-GetSourceID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT SourceId FROM CTL.vw_ControlConfiguration WHERE TaskName = ''', pipeline().parameters.SourceName, ''' AND ControlStageID = 1')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabase_Ctrldb",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ProjectID": {
						"type": "int",
						"defaultValue": 1
					},
					"ProjectRunID": {
						"type": "string",
						"defaultValue": "c1ff545d-e875-4b1b-a579-975f86dbaf21"
					},
					"SourceName": {
						"type": "string",
						"defaultValue": "OneEBS_EBS_0165_LOCATIONS"
					}
				},
				"folder": {
					"name": "Validation"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlDatabase_Ctrldb')]",
				"[concat(variables('factoryId'), '/datasets/SRC_SQLSERVER')]",
				"[concat(variables('factoryId'), '/pipelines/recon-record-validation')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/rest-api-load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get-token",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "get-client-id",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "get-secret",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://auth.go1.com/oauth/token",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"client_id\":\"@{activity('get-client-id').output.value}\"\n,\"client_secret\":\"@{activity('get-secret').output.value}\"\n,\"grant_type\":\"client_credentials\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "set-token",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "get-token",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "set-url",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "set-root-folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "token",
							"value": {
								"value": "@activity('get-token').output.access_token",
								"type": "Expression"
							}
						}
					},
					{
						"name": "get-count",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "set-token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@{variables('url')}?limit=0",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {
								"Authorization": {
									"value": "Bearer @{variables('token')}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "while-next-offset",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "set-total",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greaterOrEquals(int(variables('counter')), int(variables('total')))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "copy-data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Authorization": {
													"value": "Bearer @{variables('token')}",
													"type": "Expression"
												}
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "REST_Binary",
											"type": "DatasetReference",
											"parameters": {
												"url": {
													"value": "@{variables('url')}?limit=@{variables('offset-size')}&offset=@{variables('counter')}",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DLS_Json",
											"type": "DatasetReference",
											"parameters": {
												"filePath": {
													"value": "@replace(replace(\n'$ROOT$/$guid$.json'\n,'$ROOT$', variables('rootFolder'))\n,'$guid$', guid())",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "set-counter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "set-last",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "counter",
										"value": {
											"value": "@{add(int(variables('last')), int(variables('offset-size')))}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "set-last",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "copy-data",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "last",
										"value": {
											"value": "@variables('counter')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "break-counter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "copy-data",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "counter",
										"value": "999999999"
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					},
					{
						"name": "set-total",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "get-count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "total",
							"value": {
								"value": "@{activity('get-count').output.total}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "get-client-id",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://@{pipeline().globalParameters.keyVaultName}.vault.azure.net/secrets/CompliSpace-ClientID?api-version=7.0",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "get-secret",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://@{pipeline().globalParameters.keyVaultName}.vault.azure.net/secrets/CompliSpace-Secret?api-version=7.0",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "set-url",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "url",
							"value": {
								"value": "@pipeline().parameters.task.SourceQuery",
								"type": "Expression"
							}
						}
					},
					{
						"name": "set-root-folder",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "rootFolder",
							"value": {
								"value": "@replace(replace(replace(replace(replace(replace(\npipeline().parameters.task.RawPath\n,'$yyyy$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'yyyy'))\n,'$MM$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'MM'))\n,'$dd$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'dd'))\n,'$HH$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'HH'))\n,'$mm$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'mm'))\n,'$guid$.json', '')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "task-raw-path",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "set-root-folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-status-update",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"Property": "RawPath",
								"Value": {
									"value": "@variables('rootFolder')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"task": {
						"type": "object"
					}
				},
				"variables": {
					"token": {
						"type": "String"
					},
					"total": {
						"type": "String"
					},
					"counter": {
						"type": "String",
						"defaultValue": "0"
					},
					"last": {
						"type": "String",
						"defaultValue": "0"
					},
					"offset-size": {
						"type": "String",
						"defaultValue": "50"
					},
					"url": {
						"type": "String"
					},
					"rootFolder": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MDP-Framework/SourceHandler/REST"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/log-status-update')]",
				"[concat(variables('factoryId'), '/datasets/REST_Binary')]",
				"[concat(variables('factoryId'), '/datasets/DLS_Json')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql-load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "set-base-query",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "BaseQuery",
							"value": {
								"value": "@coalesce(pipeline().parameters.task.SourceQuery, \nreplace(replace('SELECT * FROM [$A$].[$B$]'\n,'$A$'\n,pipeline().parameters.task.SourceSchema)\n,'$B$'\n,pipeline().parameters.task.SourceTableName)\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "row-count",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "set-query",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "set-full-path",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT COUNT(*) [RowCount] FROM (@{variables('Query')}) T",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQL_Server",
								"type": "DatasetReference",
								"parameters": {
									"kvSecret": "@pipeline().parameters.task.SourceKeyVaultSecret"
								}
							}
						}
					},
					{
						"name": "set-full-path",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "OutputFullPath",
							"value": {
								"value": "@replace(replace(replace(replace(replace(replace(\ncoalesce(pipeline().parameters.task.RawPath, '')\n,'$yyyy$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'yyyy'))\n,'$MM$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'MM'))\n,'$dd$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'dd'))\n,'$HH$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'HH'))\n,'$mm$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'mm'))\n,'$guid$', guid())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "set-query",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "if-delta",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Query",
							"value": {
								"value": "@if(variables('IsDelta')\n,replace(replace(\n'SELECT * FROM ($Q$) T $W$'\n,'$Q$', variables('BaseQuery'))\n,'$W$', variables('QueryClause'))\n,variables('BaseQuery'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "if-delta",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "set-base-query",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "set-is-delta",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('IsDelta')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "low-high-watermark",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "set-watermark-column",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@replace(replace(replace(\n'SELECT COALESCE($PLW$, MIN([$WC$])) [LowWatermark],  MAX([$WC$]) [HighWatermark] FROM ($Q$) T'\n,'$PLW$', if(empty(pipeline().parameters.task.LowWatermark), 'NULL', concat('''', pipeline().parameters.task.LowWatermark, '''')))\n,'$WC$', variables('WatermarkColumn'))\n,'$Q$', variables('BaseQuery'))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQL_Server",
											"type": "DatasetReference",
											"parameters": {
												"kvSecret": "@pipeline().parameters.task.SourceKeyVaultSecret"
											}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "set-watermark-column",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "WatermarkColumn",
										"value": {
											"value": "@pipeline().parameters.task.WatermarkColumn",
											"type": "Expression"
										}
									}
								},
								{
									"name": "set-query-clause",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "low-high-watermark",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "QueryClause",
										"value": {
											"value": "WHERE @{variables('WatermarkColumn')} > @{activity('low-high-watermark').output.firstRow.LowWatermark} AND @{variables('WatermarkColumn')} <= @{activity('low-high-watermark').output.firstRow.HighWatermark}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "task-low-watermark",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "low-high-watermark",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "log-status-update",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ID": {
												"value": "@pipeline().parameters.task.ID",
												"type": "Expression"
											},
											"Property": "LowWatermark",
											"Value": {
												"value": "@{activity('low-high-watermark').output.firstRow.LowWatermark}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "task-high-watermark",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "low-high-watermark",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "log-status-update",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ID": {
												"value": "@pipeline().parameters.task.ID",
												"type": "Expression"
											},
											"Property": "LowWatermark",
											"Value": {
												"value": "@{activity('low-high-watermark').output.firstRow.HighWatermark}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "set-is-delta",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "IsDelta",
							"value": {
								"value": "@not(empty(pipeline().parameters.task.WatermarkColumn))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "switch-copy-sql",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "task-source-row-count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@if(equals(length(split(pipeline().parameters.task.SourceHandler, '/')), 1), pipeline().parameters.task.SourceHandler, split(pipeline().parameters.task.SourceHandler, '/')[1])",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "sink-sql",
									"activities": [
										{
											"name": "copy-sink-sql",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 3,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [
												{
													"name": "Destination",
													"value": "raw/Cewa Financials/"
												}
											],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"sqlReaderQuery": {
														"value": "@variables('Query')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SqlServerSink",
													"preCopyScript": {
														"value": "BEGIN TRY EXEC('TRUNCATE TABLE [@{pipeline().parameters.task.SourceSchema}].[@{pipeline().parameters.task.SourceTableName}]') END TRY BEGIN CATCH END CATCH",
														"type": "Expression"
													},
													"writeBehavior": "insert",
													"tableOption": "autoCreate"
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "SQL_Server",
													"type": "DatasetReference",
													"parameters": {
														"kvSecret": {
															"value": "@pipeline().parameters.task.SourceKeyVaultSecret",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "SQL_Server_Table",
													"type": "DatasetReference",
													"parameters": {
														"kvSecret": {
															"value": "@json(pipeline().parameters.task.ExtendedProperties).TargetKeyVaultSecret",
															"type": "Expression"
														},
														"schemaName": {
															"value": "@pipeline().parameters.task.DestinationSchema",
															"type": "Expression"
														},
														"tableName": {
															"value": "@pipeline().parameters.task.DestinationTableName",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "sink-sql-task-sink-row-count",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "copy-sink-sql",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "log-status-update",
													"type": "PipelineReference"
												},
												"waitOnCompletion": false,
												"parameters": {
													"BatchID": {
														"value": "@pipeline().parameters.task.BatchID",
														"type": "Expression"
													},
													"SourceID": {
														"value": "@pipeline().parameters.task.SourceID",
														"type": "Expression"
													},
													"Property": "SinkRowCount",
													"Value": {
														"value": "@{activity('copy-sink-sql').output.rowsCopied}",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sink-sql-log-copy",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "copy-sink-sql",
													"dependencyConditions": [
														"Completed"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "log-message",
													"type": "PipelineReference"
												},
												"waitOnCompletion": false,
												"parameters": {
													"BatchStatusID": {
														"value": "@pipeline().parameters.task.ID",
														"type": "Expression"
													},
													"ActivityType": "copy-data",
													"Message": {
														"value": "@{activity('copy-sink-sql')}",
														"type": "Expression"
													}
												}
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "copy-sql",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Destination",
											"value": "raw/Cewa Financials/"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@variables('Query')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "SQL_Server",
											"type": "DatasetReference",
											"parameters": {
												"kvSecret": {
													"value": "@pipeline().parameters.task.SourceKeyVaultSecret",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DLS_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"BlobPath": {
													"value": "@variables('OutputFullPath')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "task-raw-path",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "copy-sql",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "log-status-update",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ID": {
												"value": "@pipeline().parameters.task.ID",
												"type": "Expression"
											},
											"Property": "RawPath",
											"Value": {
												"value": "@variables('OutputFullPath')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "task-sink-row-count",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "copy-sql",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "log-status-update",
											"type": "PipelineReference"
										},
										"waitOnCompletion": false,
										"parameters": {
											"ID": {
												"value": "@pipeline().parameters.task.ID",
												"type": "Expression"
											},
											"Property": "SinkRowCount",
											"Value": {
												"value": "@{activity('copy-sql').output.rowsCopied}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "log-copy",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "copy-sql",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "log-message",
											"type": "PipelineReference"
										},
										"waitOnCompletion": false,
										"parameters": {
											"ID": {
												"value": "@pipeline().parameters.task.ID",
												"type": "Expression"
											},
											"ActivityType": "copy-data",
											"Message": {
												"value": "@{activity('copy-sql')}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "task-source-row-count",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "row-count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-status-update",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"Property": "SourceRowCount",
								"Value": {
									"value": "@{activity('row-count').output.firstRow.RowCount}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "log-count",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "row-count",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-message",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"ActivityType": "row-count",
								"Message": {
									"value": "@{activity('row-count')}",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"task": {
						"type": "object"
					}
				},
				"variables": {
					"Query": {
						"type": "String"
					},
					"OutputFullPath": {
						"type": "String"
					},
					"WatermarkColumn": {
						"type": "String"
					},
					"BaseQuery": {
						"type": "String"
					},
					"QueryClause": {
						"type": "String"
					},
					"IsDelta": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "MDP-Framework/SourceHandler/SQL"
				},
				"annotations": [],
				"lastPublishTime": "2021-07-08T10:40:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SQL_Server')]",
				"[concat(variables('factoryId'), '/pipelines/log-status-update')]",
				"[concat(variables('factoryId'), '/pipelines/log-message')]",
				"[concat(variables('factoryId'), '/datasets/DLS_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/SQL_Server_Table')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/util-datalake-move-file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get File Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BINARY_ADLS",
								"type": "DatasetReference",
								"parameters": {
									"File": {
										"value": "@pipeline().parameters.SourceFile",
										"type": "Expression"
									},
									"Container": {
										"value": "@pipeline().parameters.SourceContainer",
										"type": "Expression"
									},
									"Folder": {
										"value": "@pipeline().parameters.SourceFolder",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "If-File-Exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get File Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Get File Metadata').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Move File",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"deleteFilesAfterCompletion": {
													"value": "@pipeline().parameters.DeleteFile",
													"type": "Expression"
												}
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "BINARY_ADLS",
											"type": "DatasetReference",
											"parameters": {
												"File": {
													"value": "@pipeline().parameters.SourceFile",
													"type": "Expression"
												},
												"Container": {
													"value": "@pipeline().parameters.SourceContainer",
													"type": "Expression"
												},
												"Folder": {
													"value": "@pipeline().parameters.SourceFolder",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "BINARY_ADLS",
											"type": "DatasetReference",
											"parameters": {
												"File": {
													"value": "@pipeline().parameters.TargetFile",
													"type": "Expression"
												},
												"Container": {
													"value": "@pipeline().parameters.TargetContainer",
													"type": "Expression"
												},
												"Folder": {
													"value": "@pipeline().parameters.TargetFolder",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "If-DeleteFile",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "If-File-Exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.DeleteFile",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete-File",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "BINARY_ADLS",
											"type": "DatasetReference",
											"parameters": {
												"File": {
													"value": "@pipeline().parameters.SourceFile",
													"type": "Expression"
												},
												"Container": {
													"value": "@pipeline().parameters.SourceContainer",
													"type": "Expression"
												},
												"Folder": {
													"value": "@pipeline().parameters.SourceFolder",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFolder": {
						"type": "string"
					},
					"SourceFile": {
						"type": "string"
					},
					"SourceContainer": {
						"type": "string"
					},
					"TargetContainer": {
						"type": "string"
					},
					"DeleteFile": {
						"type": "bool",
						"defaultValue": true
					},
					"TargetFolder": {
						"type": "string"
					},
					"TargetFile": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Utility"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/BINARY_ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ARCHIVE_BLOB_BINARY')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"BlobContainer": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Source - Blob"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().BlobContainer",
							"type": "Expression"
						},
						"container": "archive"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ARCHIVE_BLOB_CSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"BlobContainer": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Source - Blob"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().BlobContainer",
							"type": "Expression"
						},
						"container": "archive"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ARCHIVE_BLOB_JSON')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"BlobContainer": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Source - Blob"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().BlobContainer",
							"type": "Expression"
						},
						"container": "archive"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ArchiveVideoFolder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "Archive",
						"container": "sewercctvvideos"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase_Ctrl_db_businessrecstage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS-AzureSqlDatabase_Ctrldb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "CTL",
					"table": "BusinessRecStage"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureSqlDatabase_Ctrldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase_Ctrldb')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS-AzureSqlDatabase_Ctrldb",
					"type": "LinkedServiceReference",
					"parameters": {}
				},
				"folder": {
					"name": "Control"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureSqlDatabase_Ctrldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azure_Sql_sewercctv",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "VIDEO_ID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "DEFECT",
						"type": "varchar"
					},
					{
						"name": "AVG_PROBABILITY",
						"type": "decimal",
						"precision": 18,
						"scale": 15
					},
					{
						"name": "SCORE",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "START_TIME",
						"type": "varchar"
					},
					{
						"name": "END_TIME",
						"type": "varchar"
					},
					{
						"name": "START_DISTANCE",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "END_DISTANCE",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "OUTCOME_CLASSIFICATION",
						"type": "bit"
					},
					{
						"name": "DEFECT_SUGGESTED",
						"type": "varchar"
					},
					{
						"name": "CREATED_TIMESTAMP",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "UPDATED_TIMESTAMP",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "CCTVPortal",
					"table": "VIDEO_AI_IDENTIFIED_DEFECT"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azure_Sql_sewercctv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureSqlDatabase_Sewercctv",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "cctv_kaltura_attachments"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureSqlDatabase_Sewercctv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BINARY_ADLS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureDatalake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"File": {
						"type": "string"
					},
					"Container": {
						"type": "string"
					},
					"Folder": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Data Lake"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().File",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Folder",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLOB_Binary_Folder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "string"
					}
				},
				"folder": {
					"name": "MDP-Framework/BLOB"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DLS_Binary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureDatalake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filePath": {
						"type": "string"
					}
				},
				"folder": {
					"name": "MDP-Framework/DLS"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filePath",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DLS_Binary_Folder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureDatalake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "string"
					}
				},
				"folder": {
					"name": "MDP-Framework/DLS"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DLS_Binary_Zip')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureDatalake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filePath": {
						"type": "string"
					}
				},
				"folder": {
					"name": "MDP-Framework/DLS"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filePath",
							"type": "Expression"
						}
					},
					"compression": {
						"type": "ZipDeflate",
						"level": "Optimal"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DLS_Csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureDatalake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filePath": {
						"type": "string"
					}
				},
				"folder": {
					"name": "MDP-Framework/DLS"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filePath",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": {
						"value": "@bool(true)",
						"type": "Expression"
					},
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DLS_Excel_index')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureDatalake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filePath": {
						"type": "string"
					},
					"sheetIndex": {
						"type": "int",
						"defaultValue": 0
					}
				},
				"folder": {
					"name": "MDP-Framework/DLS"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filePath",
							"type": "Expression"
						}
					},
					"sheetIndex": {
						"value": "@dataset().sheetIndex",
						"type": "Expression"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DLS_Folder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureDatalake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "string"
					}
				},
				"folder": {
					"name": "MDP-Framework/DLS"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DLS_Json')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureDatalake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filePath": {
						"type": "string"
					}
				},
				"folder": {
					"name": "MDP-Framework/DLS"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filePath",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DLS_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureDatalake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"BlobPath": {
						"type": "string"
					}
				},
				"folder": {
					"name": "MDP-Framework/DLS"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().BlobPath",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DST_RAW_ADLS_CSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureDatalake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"BlobPath": {
						"type": "string"
					},
					"BlobName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Data Lake"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().BlobName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().BlobPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"columnDelimiter": "|",
					"compressionCodec": "gzip",
					"compressionLevel": "Optimal",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_CSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureDatalake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"LakeContainer": {
						"type": "string",
						"defaultValue": "raw"
					},
					"LakeDirectory": {
						"type": "string"
					},
					"LakeFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Data Lake"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().LakeFileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().LakeDirectory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().LakeContainer",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_JSON')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureDatalake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"LakeContainer": {
						"type": "string"
					},
					"LakeDirectory": {
						"type": "string"
					},
					"LakeFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Data Lake"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().LakeFileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().LakeDirectory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().LakeContainer",
							"type": "Expression"
						}
					},
					"compression": {
						"type": "gzip",
						"level": "Optimal"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_SRC_CSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Dataset for access reference data",
				"linkedServiceName": {
					"referenceName": "LS_AzureDatalake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"LakeContainer": {
						"type": "string",
						"defaultValue": "raw"
					},
					"LakeDirectory": {
						"type": "string"
					},
					"LakeFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Data Lake"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().LakeFileName",
							"type": "Expression"
						},
						"folderPath": "access data/Z309_TPROPERTY",
						"fileSystem": "raw"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_CURATED_ADLS_DELTALAKE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_DeltaLake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureDatabricksDeltaLakeDataset",
				"typeProperties": {
					"database": "CURATED",
					"table": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_DeltaLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_RAW_ADLS_DELTALAKE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_DeltaLake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Data Lake"
				},
				"annotations": [],
				"type": "AzureDatabricksDeltaLakeDataset",
				"typeProperties": {
					"database": "raw",
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_DeltaLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "maximo_schema.csv",
						"container": "test"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HTTP_Binary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_HTTP_Anonymous",
					"type": "LinkedServiceReference",
					"parameters": {
						"url": {
							"value": "@dataset().httpUrl",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"httpUrl": {
						"type": "string"
					}
				},
				"folder": {
					"name": "MDP-Framework/HTTP"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_HTTP_Anonymous')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HTTP_Binary_Zip')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_HTTP_Anonymous",
					"type": "LinkedServiceReference",
					"parameters": {
						"url": {
							"value": "@dataset().httpUrl",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"httpUrl": {
						"type": "string"
					}
				},
				"folder": {
					"name": "MDP-Framework/HTTP"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					},
					"compression": {
						"type": "ZipDeflate",
						"level": "Optimal"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_HTTP_Anonymous')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/KalturaDestn')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "ARCHIVE",
						"container": "kaltura"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureDatalake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "sewercctv/cctv_kaltura_attachments",
						"fileSystem": "cleansed"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "attachments_id",
						"type": "UTF8"
					},
					{
						"name": "attachments_entryId",
						"type": "UTF8"
					},
					{
						"name": "attachments_partnerId",
						"type": "INT64"
					},
					{
						"name": "attachments_version",
						"type": "INT64"
					},
					{
						"name": "attachments_size",
						"type": "INT64"
					},
					{
						"name": "attachments_tags",
						"type": "UTF8"
					},
					{
						"name": "attachments_fileExt",
						"type": "UTF8"
					},
					{
						"name": "attachments_createdAt",
						"type": "INT64"
					},
					{
						"name": "attachments_updatedAt",
						"type": "INT64"
					},
					{
						"name": "attachments_description",
						"type": "UTF8"
					},
					{
						"name": "attachments_partnerDescription",
						"type": "UTF8"
					},
					{
						"name": "attachments_sizeInBytes",
						"type": "INT64"
					},
					{
						"name": "attachments_filename",
						"type": "UTF8"
					},
					{
						"name": "attachments_title",
						"type": "UTF8"
					},
					{
						"name": "attachments_format",
						"type": "UTF8"
					},
					{
						"name": "attachments_status",
						"type": "UTF8"
					},
					{
						"name": "processed_timestamp",
						"type": "INT96"
					},
					{
						"name": "_DLCleansedZoneTimeStamp",
						"type": "INT96"
					},
					{
						"name": "_RecordStart",
						"type": "INT96"
					},
					{
						"name": "_RecordEnd",
						"type": "INT96"
					},
					{
						"name": "_RecordDeleted",
						"type": "INT32"
					},
					{
						"name": "_RecordCurrent",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RAW_ADLS_CSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureDatalake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"BlobPath": {
						"type": "string"
					},
					"BlobName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Data Lake"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().BlobName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().BlobPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"columnDelimiter": "|",
					"compressionCodec": "gzip",
					"compressionLevel": "Optimal",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RAW_ADLS_JSON_v2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureDatalake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"BlobPath": {
						"type": "string"
					},
					"BlobName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Data Lake"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().BlobName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().BlobPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"compression": {
						"type": "gzip",
						"level": "Optimal"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RAW_ADLS_JSON_v2_NOCOMP')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureDatalake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"BlobPath": {
						"type": "string"
					},
					"BlobName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Data Lake"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().BlobName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().BlobPath",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RAW_ADLS_Schema')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureDatalake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"BlobPath": {
						"type": "string"
					},
					"BlobName": {
						"type": "string"
					},
					"Compression": {
						"type": "string"
					},
					"ColumnDelim": {
						"type": "string",
						"defaultValue": ","
					},
					"HeaderRow": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "z_Archive"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().BlobName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().BlobPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"columnDelimiter": {
						"value": "@dataset().ColumnDelim",
						"type": "Expression"
					},
					"compressionCodec": {
						"value": "@dataset().Compression",
						"type": "Expression"
					},
					"compressionLevel": "Optimal",
					"escapeChar": "\\",
					"firstRowAsHeader": {
						"value": "@dataset().HeaderRow",
						"type": "Expression"
					},
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RAW_PARQUET')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureDatalake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"BlobPath": {
						"type": "string"
					},
					"BlobName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "z_Archive"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().BlobName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().BlobPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/REST_Binary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_REST_Anonymous",
					"type": "LinkedServiceReference",
					"parameters": {
						"url": {
							"value": "@dataset().url",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"url": {
						"type": "string"
					}
				},
				"folder": {
					"name": "MDP-Framework/REST"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_REST_Anonymous')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_ControlDB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS-AzureSqlDatabase_Ctrldb",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "MDP-Framework/SQL"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureSqlDatabase_Ctrldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_Server')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SQLServer",
					"type": "LinkedServiceReference",
					"parameters": {
						"kvSecret": {
							"value": "@dataset().kvSecret",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"kvSecret": {
						"type": "string"
					}
				},
				"folder": {
					"name": "MDP-Framework/SQL"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SQLServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_Server_Table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SQLServer",
					"type": "LinkedServiceReference",
					"parameters": {
						"kvSecret": {
							"value": "@dataset().kvSecret",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"kvSecret": {
						"type": "string"
					},
					"schemaName": {
						"type": "string"
					},
					"tableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "MDP-Framework/SQL"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SQLServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SRC_BLOB_BINARY')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"BlobContainer": {
						"type": "string"
					},
					"BlobName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Source - Blob"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().BlobName",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().BlobContainer",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SRC_BLOB_CSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"BlobContainer": {
						"type": "string"
					},
					"BlobName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Source - Blob"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().BlobName",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().BlobContainer",
							"type": "Expression"
						}
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SRC_BLOB_CSV_NO_QUOTE_CHAR')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Quote Character is set to default(No quote character)",
				"linkedServiceName": {
					"referenceName": "LS_AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"BlobContainer": {
						"type": "string"
					},
					"BlobName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Source - Blob"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().BlobName",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().BlobContainer",
							"type": "Expression"
						}
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SRC_BLOB_JSON')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Source - Blob"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "bods"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SRC_BLOB_JSON_copy1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"BlobName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Source - Blob"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().BlobName",
							"type": "Expression"
						},
						"container": "bods"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SRC_BLOB_JSON_v2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"BlobContainer": {
						"type": "string"
					},
					"BlobName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Source - Blob"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().BlobName",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().BlobContainer",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SRC_Oracle')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Oracle",
					"type": "LinkedServiceReference",
					"parameters": {
						"kvSecret": "daf-oracle-Maximo-connectionstring"
					}
				},
				"parameters": {
					"kvSecret": {
						"type": "string"
					}
				},
				"folder": {
					"name": "z_Archive"
				},
				"annotations": [],
				"type": "OracleTable",
				"structure": [
					{
						"name": "OBJECT_NAME",
						"type": "String"
					},
					{
						"name": "COLUMN_NAME",
						"type": "String"
					},
					{
						"name": "DATA_TYPE",
						"type": "String"
					},
					{
						"name": "DATA_LENGTH",
						"type": "Double"
					}
				],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Oracle')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SRC_RAW_LANDING_ADLS_CSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureDatalake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"BlobPath": {
						"type": "string"
					},
					"BlobName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Data Lake"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().BlobName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat('landing/',dataset().BlobPath)",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SRC_SQLSERVER')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SQLServer",
					"type": "LinkedServiceReference",
					"parameters": {
						"kvSecret": {
							"value": "@dataset().kvSecret",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"kvSecret": {
						"type": "string"
					},
					"tableName": {
						"type": "string"
					},
					"schemaName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "SQL Server"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SQLServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceVideoFolder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "Inbound",
						"container": "sewercctvvideos"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cctv_kaltura_attachments')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureDatalake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "sewercctv/cctv_kaltura_attachments",
						"fileSystem": "cleansed"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "attachments_id",
						"type": "UTF8"
					},
					{
						"name": "attachments_entryId",
						"type": "UTF8"
					},
					{
						"name": "attachments_partnerId",
						"type": "INT64"
					},
					{
						"name": "attachments_version",
						"type": "INT64"
					},
					{
						"name": "attachments_size",
						"type": "INT64"
					},
					{
						"name": "attachments_tags",
						"type": "UTF8"
					},
					{
						"name": "attachments_fileExt",
						"type": "UTF8"
					},
					{
						"name": "attachments_createdAt",
						"type": "INT64"
					},
					{
						"name": "attachments_updatedAt",
						"type": "INT64"
					},
					{
						"name": "attachments_description",
						"type": "UTF8"
					},
					{
						"name": "attachments_partnerDescription",
						"type": "UTF8"
					},
					{
						"name": "attachments_sizeInBytes",
						"type": "INT64"
					},
					{
						"name": "attachments_filename",
						"type": "UTF8"
					},
					{
						"name": "attachments_title",
						"type": "UTF8"
					},
					{
						"name": "attachments_format",
						"type": "UTF8"
					},
					{
						"name": "attachments_status",
						"type": "UTF8"
					},
					{
						"name": "processed_timestamp",
						"type": "INT96"
					},
					{
						"name": "_DLCleansedZoneTimeStamp",
						"type": "INT96"
					},
					{
						"name": "_RecordStart",
						"type": "INT96"
					},
					{
						"name": "_RecordEnd",
						"type": "INT96"
					},
					{
						"name": "_RecordDeleted",
						"type": "INT32"
					},
					{
						"name": "_RecordCurrent",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/flavors_dst')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureSqlDatabase_Sewercctv",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "cctv_kaltura_flavors"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureSqlDatabase_Sewercctv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/flavors_src')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureDatalake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "sewercctv/cctv_kaltura_flavors",
						"fileSystem": "cleansed"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "flavors_id",
						"type": "UTF8"
					},
					{
						"name": "flavors_entryId",
						"type": "UTF8"
					},
					{
						"name": "flavors_partnerId",
						"type": "INT64"
					},
					{
						"name": "flavors_version",
						"type": "INT64"
					},
					{
						"name": "flavors_size",
						"type": "INT64"
					},
					{
						"name": "flavors_tags",
						"type": "UTF8"
					},
					{
						"name": "flavors_fileExt",
						"type": "UTF8"
					},
					{
						"name": "flavors_createdAt",
						"type": "INT64"
					},
					{
						"name": "flavors_updatedAt",
						"type": "INT64"
					},
					{
						"name": "flavors_description",
						"type": "UTF8"
					},
					{
						"name": "flavors_sizeInBytes",
						"type": "INT64"
					},
					{
						"name": "flavors_flavorParamsId",
						"type": "INT64"
					},
					{
						"name": "flavors_width",
						"type": "INT64"
					},
					{
						"name": "flavors_height",
						"type": "INT64"
					},
					{
						"name": "flavors_bitrate",
						"type": "INT64"
					},
					{
						"name": "flavors_frameRate",
						"type": "DOUBLE"
					},
					{
						"name": "flavors_isOriginal",
						"type": "BOOLEAN"
					},
					{
						"name": "flavors_isWeb",
						"type": "BOOLEAN"
					},
					{
						"name": "flavors_containerFormat",
						"type": "UTF8"
					},
					{
						"name": "flavors_videoCodecId",
						"type": "UTF8"
					},
					{
						"name": "flavors_status",
						"type": "UTF8"
					},
					{
						"name": "flavors_isDefault",
						"type": "BOOLEAN"
					},
					{
						"name": "flavors_language",
						"type": "UTF8"
					},
					{
						"name": "processed_timestamp",
						"type": "INT96"
					},
					{
						"name": "_DLCleansedZoneTimeStamp",
						"type": "INT96"
					},
					{
						"name": "_RecordStart",
						"type": "INT96"
					},
					{
						"name": "_RecordEnd",
						"type": "INT96"
					},
					{
						"name": "_RecordDeleted",
						"type": "INT32"
					},
					{
						"name": "_RecordCurrent",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/kalturaSourceFolder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "Inbound",
						"container": "kaltura"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/media_entry_src')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureDatalake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "sewercctv/cctv_kaltura_mediaentry",
						"fileSystem": "cleansed"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "id",
						"type": "UTF8"
					},
					{
						"name": "name",
						"type": "UTF8"
					},
					{
						"name": "description",
						"type": "UTF8"
					},
					{
						"name": "partnerId",
						"type": "INT64"
					},
					{
						"name": "userId",
						"type": "UTF8"
					},
					{
						"name": "creatorId",
						"type": "UTF8"
					},
					{
						"name": "tags",
						"type": "UTF8"
					},
					{
						"name": "categories",
						"type": "UTF8"
					},
					{
						"name": "categoriesIds",
						"type": "UTF8"
					},
					{
						"name": "status",
						"type": "UTF8"
					},
					{
						"name": "moderationStatus",
						"type": "UTF8"
					},
					{
						"name": "moderationCount",
						"type": "INT64"
					},
					{
						"name": "type",
						"type": "UTF8"
					},
					{
						"name": "createdAt",
						"type": "INT64"
					},
					{
						"name": "updatedAt",
						"type": "INT64"
					},
					{
						"name": "rank",
						"type": "DOUBLE"
					},
					{
						"name": "totalRank",
						"type": "INT64"
					},
					{
						"name": "votes",
						"type": "INT64"
					},
					{
						"name": "downloadUrl",
						"type": "UTF8"
					},
					{
						"name": "searchText",
						"type": "UTF8"
					},
					{
						"name": "licenseType",
						"type": "UTF8"
					},
					{
						"name": "version",
						"type": "INT64"
					},
					{
						"name": "thumbnailUrl",
						"type": "UTF8"
					},
					{
						"name": "replacementStatus",
						"type": "UTF8"
					},
					{
						"name": "partnerSortValue",
						"type": "INT64"
					},
					{
						"name": "conversionProfileId",
						"type": "INT64"
					},
					{
						"name": "rootEntryId",
						"type": "UTF8"
					},
					{
						"name": "entitledUsersEdit",
						"type": "UTF8"
					},
					{
						"name": "entitledUsersPublish",
						"type": "UTF8"
					},
					{
						"name": "entitledUsersView",
						"type": "UTF8"
					},
					{
						"name": "capabilities",
						"type": "UTF8"
					},
					{
						"name": "displayInSearch",
						"type": "UTF8"
					},
					{
						"name": "blockAutoTranscript",
						"type": "BOOLEAN"
					},
					{
						"name": "plays",
						"type": "INT64"
					},
					{
						"name": "views",
						"type": "INT64"
					},
					{
						"name": "lastPlayedAt",
						"type": "DOUBLE"
					},
					{
						"name": "width",
						"type": "INT64"
					},
					{
						"name": "height",
						"type": "INT64"
					},
					{
						"name": "duration",
						"type": "INT64"
					},
					{
						"name": "msDuration",
						"type": "INT64"
					},
					{
						"name": "mediaType",
						"type": "UTF8"
					},
					{
						"name": "conversionQuality",
						"type": "UTF8"
					},
					{
						"name": "sourceType",
						"type": "UTF8"
					},
					{
						"name": "dataUrl",
						"type": "UTF8"
					},
					{
						"name": "flavorParamsIds",
						"type": "UTF8"
					},
					{
						"name": "adminTags",
						"type": "UTF8"
					},
					{
						"name": "_DLCleansedZoneTimeStamp",
						"type": "INT96"
					},
					{
						"name": "_RecordStart",
						"type": "INT96"
					},
					{
						"name": "_RecordEnd",
						"type": "INT96"
					},
					{
						"name": "_RecordCurrent",
						"type": "INT32"
					},
					{
						"name": "_RecordDeleted",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/mediaentry_Dst')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureSqlDatabase_Sewercctv",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "cctv_kaltura_mediaentry"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureSqlDatabase_Sewercctv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/metadata_Dst')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureSqlDatabase_Sewercctv",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "cctv_kaltura_metadata"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureSqlDatabase_Sewercctv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/metadata_src')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureDatalake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "sewercctv/cctv_kaltura_metadata",
						"fileSystem": "cleansed"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "metadata_id",
						"type": "INT64"
					},
					{
						"name": "metadata_partnerId",
						"type": "INT64"
					},
					{
						"name": "metadata_metadataProfileId",
						"type": "INT64"
					},
					{
						"name": "metadata_metadataProfileVersion",
						"type": "INT64"
					},
					{
						"name": "metadata_metadataObjectType",
						"type": "UTF8"
					},
					{
						"name": "metadata_objectId",
						"type": "UTF8"
					},
					{
						"name": "metadata_version",
						"type": "INT64"
					},
					{
						"name": "metadata_createdAt",
						"type": "INT64"
					},
					{
						"name": "metadata_updatedAt",
						"type": "INT64"
					},
					{
						"name": "metadata_status",
						"type": "UTF8"
					},
					{
						"name": "metadata_jsonData.AssessedByName",
						"type": "UTF8"
					},
					{
						"name": "metadata_jsonData.AssessedByDate",
						"type": "UTF8"
					},
					{
						"name": "metadata_jsonData.ParentWorkOrderNumber",
						"type": "UTF8"
					},
					{
						"name": "metadata_jsonData.ChildWorkOrderNumbers",
						"type": "UTF8"
					},
					{
						"name": "metadata_jsonData.WorkOrderDescription",
						"type": "UTF8"
					},
					{
						"name": "metadata_jsonData.AssetNumbers",
						"type": "UTF8"
					},
					{
						"name": "metadata_jsonData.TaskCode",
						"type": "UTF8"
					},
					{
						"name": "metadata_jsonData.Suburb",
						"type": "UTF8"
					},
					{
						"name": "metadata_jsonData.Product",
						"type": "UTF8"
					},
					{
						"name": "metadata_jsonData.Contractor",
						"type": "UTF8"
					},
					{
						"name": "metadata_jsonData.UpstreamMH",
						"type": "UTF8"
					},
					{
						"name": "metadata_jsonData.DownstreamMH",
						"type": "UTF8"
					},
					{
						"name": "metadata_jsonData.DirectionOfSurvey",
						"type": "UTF8"
					},
					{
						"name": "metadata_jsonData.DateOfCompletedInspection",
						"type": "UTF8"
					},
					{
						"name": "metadata_jsonData.TimeOfCompletedInspection",
						"type": "UTF8"
					},
					{
						"name": "metadata_jsonData.PackageName",
						"type": "UTF8"
					},
					{
						"name": "metadata_jsonData.Cleaned",
						"type": "UTF8"
					},
					{
						"name": "metadata_jsonData.SurveyedLength",
						"type": "UTF8"
					},
					{
						"name": "metadata_jsonData.DiscardDate",
						"type": "UTF8"
					},
					{
						"name": "metadata_jsonData.Condition",
						"type": "UTF8"
					},
					{
						"name": "metadata_jsonData.Serviceability",
						"type": "UTF8"
					},
					{
						"name": "metadata_jsonData.Infiltration",
						"type": "UTF8"
					},
					{
						"name": "metadata_jsonData.AddressStreet",
						"type": "UTF8"
					},
					{
						"name": "processed_timestamp",
						"type": "INT96"
					},
					{
						"name": "_DLCleansedZoneTimeStamp",
						"type": "INT96"
					},
					{
						"name": "_RecordStart",
						"type": "INT96"
					},
					{
						"name": "_RecordEnd",
						"type": "INT96"
					},
					{
						"name": "_RecordDeleted",
						"type": "INT32"
					},
					{
						"name": "_RecordCurrent",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/src_cctv_ai_identified_defects')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_DeltaLake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureDatabricksDeltaLakeDataset",
				"typeProperties": {
					"database": "cleansed",
					"table": "cctv_ai_image_classifications"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_DeltaLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS-AzureDatabricks_DefinedCluster')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Interactive Cluster",
				"parameters": {
					"kvSecret": {
						"type": "string",
						"defaultValue": "databricks-token"
					},
					"clusterId": {
						"type": "string",
						"defaultValue": "1103-023442-me8nqcm9"
					}
				},
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "[parameters('LS-AzureDatabricks_DefinedCluster_properties_typeProperties_domain')]",
					"accessToken": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS-AzureKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().kvSecret",
							"type": "Expression"
						},
						"secretVersion": ""
					},
					"existingClusterId": "@linkedService().clusterId"
				},
				"connectVia": {
					"referenceName": "IntegrationRuntime-Azure-ManagedVnet-01",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IntegrationRuntime-Azure-ManagedVnet-01')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS-AzureDatabricks_JobCluster')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"kvSecret": {
						"type": "String"
					},
					"DataBricksClusterType": {
						"type": "String"
					},
					"DataBricksClusterVersion": {
						"type": "String"
					},
					"DataBricksWorkerNodes": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "[parameters('LS-AzureDatabricks_JobCluster_properties_typeProperties_domain')]",
					"accessToken": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS-AzureKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().kvSecret",
							"type": "Expression"
						},
						"secretVersion": "Latest version"
					},
					"newClusterNodeType": "@linkedService().DataBricksClusterType",
					"newClusterNumOfWorker": "@linkedService().DataBricksWorkerNodes",
					"newClusterSparkEnvVars": {
						"PYSPARK_PYTHON": "/databricks/python3/bin/python3"
					},
					"newClusterVersion": "@linkedService().DataBricksClusterVersion",
					"newClusterInitScripts": [],
					"clusterOption": "Fixed"
				},
				"connectVia": {
					"referenceName": "IntegrationRuntime-Azure-ManagedVnet-01",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IntegrationRuntime-Azure-ManagedVnet-01')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS-AzureKeyVault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('LS-AzureKeyVault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS-AzureSqlDatabase_Ctrldb')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "ETL Control database linked service",
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS-AzureKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('LS-AzureSqlDatabase_Ctrldb_properties_typeProperties_connectionString_secretName')]"
					}
				},
				"connectVia": {
					"referenceName": "IntegrationRuntime-Azure-ManagedVnet-01",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IntegrationRuntime-Azure-ManagedVnet-01')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_AzureBlobStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('LS_AzureBlobStorage_properties_typeProperties_serviceEndpoint')]",
					"tenant": "[parameters('LS_AzureBlobStorage_properties_typeProperties_tenant')]",
					"servicePrincipalId": "[parameters('LS_AzureBlobStorage_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS-AzureKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "SERVICE-PRINCIPAL-SECRET"
					},
					"accountKind": "StorageV2"
				},
				"connectVia": {
					"referenceName": "IntegrationRuntime-Azure-ManagedVnet-01",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IntegrationRuntime-Azure-ManagedVnet-01')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_AzureDatabricks_InstancePool')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"kvSecret": {
						"type": "string",
						"defaultValue": "databricks-token"
					},
					"PoolId": {
						"type": "string",
						"defaultValue": "0121-060302-next337-pool-owblzzx4"
					},
					"DatabricksVersion": {
						"type": "string",
						"defaultValue": "9.1.x-scala2.12"
					}
				},
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "[parameters('LS_AzureDatabricks_InstancePool_properties_typeProperties_domain')]",
					"accessToken": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS-AzureKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().kvSecret",
							"type": "Expression"
						}
					},
					"instancePoolId": "@linkedService().PoolId",
					"newClusterNumOfWorker": "1:8",
					"newClusterSparkEnvVars": {
						"PYSPARK_PYTHON": "/databricks/python3/bin/python3"
					},
					"newClusterVersion": "@linkedService().DatabricksVersion",
					"newClusterInitScripts": [],
					"clusterOption": "Fixed"
				},
				"connectVia": {
					"referenceName": "IntegrationRuntime-Azure-ManagedVnet-01",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IntegrationRuntime-Azure-ManagedVnet-01')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_AzureDatalake')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LS_AzureDatalake_properties_typeProperties_url')]",
					"tenant": "[parameters('LS_AzureDatalake_properties_typeProperties_tenant')]",
					"servicePrincipalId": "[parameters('LS_AzureDatalake_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalCredentialType": "ServicePrincipalKey",
					"servicePrincipalCredential": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS-AzureKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "SERVICE-PRINCIPAL-SECRET"
					}
				},
				"connectVia": {
					"referenceName": "IntegrationRuntime-Azure-ManagedVnet-01",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IntegrationRuntime-Azure-ManagedVnet-01')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_AzureSqlDatabase_Sewercctv')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS-AzureKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('LS_AzureSqlDatabase_Sewercctv_properties_typeProperties_connectionString_secretName')]"
					}
				},
				"connectVia": {
					"referenceName": "IntegrationRuntime-Azure-ManagedVnet-01",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IntegrationRuntime-Azure-ManagedVnet-01')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_DeltaLake')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Databricks Delta Lake ",
				"annotations": [],
				"type": "AzureDatabricksDeltaLake",
				"typeProperties": {
					"domain": "[parameters('LS_DeltaLake_properties_typeProperties_domain')]",
					"clusterId": "0216-023322-gejhoxce",
					"workspaceResourceId": "/subscriptions/e59a4313-66c3-4db6-842d-6154c5e08205/resourceGroups/rg-swcnonprod01-daf-dev-01/providers/Microsoft.Databricks/workspaces/dbw-swcnonprod01-daf-dev-01"
				},
				"connectVia": {
					"referenceName": "IntegrationRuntime-Azure-ManagedVnet-01",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IntegrationRuntime-Azure-ManagedVnet-01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_HTTP_Anonymous')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"url": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('LS_HTTP_Anonymous_properties_typeProperties_url')]",
					"enableServerCertificateValidation": false,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_Oracle')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"kvSecret": {
						"type": "string",
						"defaultValue": "daf-oracle-Maximo-connectionstring"
					}
				},
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS-AzureKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "[parameters('LS_Oracle_properties_typeProperties_connectionString_secretName')]",
							"type": "Expression"
						}
					}
				},
				"connectVia": {
					"referenceName": "IntegrationRuntime-SelfHosted-onPrem",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IntegrationRuntime-SelfHosted-onPrem')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_REST_Anonymous')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"url": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('LS_REST_Anonymous_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_SQLServer')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"kvSecret": {
						"type": "string",
						"defaultValue": "daf-sql-slt-connectionstring"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS-AzureKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "[parameters('LS_SQLServer_properties_typeProperties_connectionString_secretName')]",
							"type": "Expression"
						}
					}
				},
				"connectVia": {
					"referenceName": "IntegrationRuntime-Azure-ManagedVnet-01",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IntegrationRuntime-Azure-ManagedVnet-01')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/azure_Sql_sewercctv')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS-AzureKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('azure_Sql_sewercctv_properties_typeProperties_connectionString_secretName')]"
					}
				},
				"connectVia": {
					"referenceName": "IntegrationRuntime-Azure-ManagedVnet-01",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IntegrationRuntime-Azure-ManagedVnet-01')]",
				"[concat(variables('factoryId'), '/linkedServices/LS-AzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BATCH_DAILY_HYDRA')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Triggers Main pipeline to kick off Hydra daily loads on the blob-creation event of 'trigger_batch_daily_hydra.json' in 'triggers' container. This pipeline invocation runs multiple HYDRA data load Projects.",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "01-Main",
							"type": "PipelineReference"
						},
						"parameters": {
							"TriggerName": "[parameters('BATCH_DAILY_HYDRA_properties_01-Main_parameters_TriggerName')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/triggers/blobs/trigger_batch_daily_hydra.json",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('BATCH_DAILY_HYDRA_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/01-Main')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BATCH_DAILY_SAPCRM')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Triggers Main pipeline to kick off SAP CRM daily loads on the blob-creation event of 'trigger_batch_daily_sapcrm.json' in 'triggers' container. This pipeline invocation runs multiple SAPCRM data load Projects.",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "01-Main",
							"type": "PipelineReference"
						},
						"parameters": {
							"TriggerName": "[parameters('BATCH_DAILY_SAPCRM_properties_01-Main_parameters_TriggerName')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/triggers/blobs/trigger_batch_daily_sapcrm.json",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('BATCH_DAILY_SAPCRM_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/01-Main')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BATCH_DAILY_SAPISU')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Triggers Main pipeline to kick off SAP ISU daily loads on the blob-creation event of 'trigger_batch_daily_sapisu.json' in 'triggers' container. This pipeline invocation runs multiple SAPISU data load Projects.",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "01-Main",
							"type": "PipelineReference"
						},
						"parameters": {
							"TriggerName": "[parameters('BATCH_DAILY_SAPISU_properties_01-Main_parameters_TriggerName')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/triggers/blobs/trigger_batch_daily_sapisu.json",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('BATCH_DAILY_SAPISU_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/01-Main')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DLY1300')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "01-Main",
							"type": "PipelineReference"
						},
						"parameters": {
							"TriggerName": "[parameters('DLY1300_properties_01-Main_parameters_TriggerName')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-12-01T05:10:00",
						"timeZone": "AUS Eastern Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								13
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/01-Main')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IntegrationRuntime-Azure-ManagedVnet-01')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "Australia East",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false
						},
						"pipelineExternalComputeScaleProperties": {
							"timeToLive": 60
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IntegrationRuntime-SelfHosted-onPrem')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"description": "on premise SHIR",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/IntegrationRuntime-SelfHosted')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/default')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks",
			"apiVersion": "2018-06-01",
			"properties": {},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/mpe_sablob01')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('mpe_sablob01_properties_privateLinkResourceId')]",
				"groupId": "[parameters('mpe_sablob01_properties_groupId')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/mpe_salake01')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('mpe_salake01_properties_privateLinkResourceId')]",
				"groupId": "[parameters('mpe_salake01_properties_groupId')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/mpe_sqlserver_01')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('mpe_sqlserver_01_properties_privateLinkResourceId')]",
				"groupId": "[parameters('mpe_sqlserver_01_properties_groupId')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		}
	]
}